This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-07-16T15:48:02.380Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

================================================================
Directory Structure
================================================================
.gitignore
.replit
attached_assets/Pasted-Objective-Create-a-comprehensive-AI-powered-compliance-application-that-enables-businesses-to-create-1743781050729.txt
client/index.html
client/src/App.tsx
client/src/components/auth/LoginForm.tsx
client/src/components/auth/RegisterForm.tsx
client/src/components/common/Header.tsx
client/src/components/common/Sidebar.tsx
client/src/components/compliance/AddDeadlineModal.tsx
client/src/components/compliance/EditDeadlineModal.tsx
client/src/components/dashboard/AIAssistant.tsx
client/src/components/dashboard/ComplianceCalendar.tsx
client/src/components/dashboard/DashboardOverview.tsx
client/src/components/dashboard/DocumentsSection.tsx
client/src/components/document/AuditTrailTable.tsx
client/src/components/document/DocumentDetail.tsx
client/src/components/document/DocumentEditor.tsx
client/src/components/document/DocumentList.tsx
client/src/components/document/DocumentVersionHistory.tsx
client/src/components/document/FileManagerPanel.tsx
client/src/components/document/SignaturePanel.tsx
client/src/components/documents/ComplianceWorkspace.tsx
client/src/components/documents/CreateDocumentModal.tsx
client/src/components/documents/DocumentMoreOptions.tsx
client/src/components/documents/DocumentViewer.tsx
client/src/components/documents/FileUploader.tsx
client/src/components/documents/FolderManager.tsx
client/src/components/documents/ShareModal.tsx
client/src/components/documents/UserDocumentEditModal.tsx
client/src/components/documents/UserDocumentList.tsx
client/src/components/layouts/DashboardLayout.tsx
client/src/components/templates/TemplateList.tsx
client/src/components/ui/accordion.tsx
client/src/components/ui/alert-dialog.tsx
client/src/components/ui/alert.tsx
client/src/components/ui/aspect-ratio.tsx
client/src/components/ui/avatar.tsx
client/src/components/ui/badge.tsx
client/src/components/ui/breadcrumb.tsx
client/src/components/ui/button.tsx
client/src/components/ui/calendar.tsx
client/src/components/ui/card.tsx
client/src/components/ui/carousel.tsx
client/src/components/ui/chart.tsx
client/src/components/ui/checkbox.tsx
client/src/components/ui/collapsible.tsx
client/src/components/ui/command.tsx
client/src/components/ui/context-menu.tsx
client/src/components/ui/dialog.tsx
client/src/components/ui/drawer.tsx
client/src/components/ui/dropdown-menu.tsx
client/src/components/ui/form.tsx
client/src/components/ui/hover-card.tsx
client/src/components/ui/input-otp.tsx
client/src/components/ui/input.tsx
client/src/components/ui/label.tsx
client/src/components/ui/menubar.tsx
client/src/components/ui/navigation-menu.tsx
client/src/components/ui/pagination.tsx
client/src/components/ui/popover.tsx
client/src/components/ui/progress.tsx
client/src/components/ui/radio-group.tsx
client/src/components/ui/resizable.tsx
client/src/components/ui/scroll-area.tsx
client/src/components/ui/select.tsx
client/src/components/ui/separator.tsx
client/src/components/ui/sheet.tsx
client/src/components/ui/sidebar.tsx
client/src/components/ui/skeleton.tsx
client/src/components/ui/slider.tsx
client/src/components/ui/switch.tsx
client/src/components/ui/table.tsx
client/src/components/ui/tabs.tsx
client/src/components/ui/textarea.tsx
client/src/components/ui/toast.tsx
client/src/components/ui/toaster.tsx
client/src/components/ui/toggle-group.tsx
client/src/components/ui/toggle.tsx
client/src/components/ui/tooltip.tsx
client/src/components/users/UserList.tsx
client/src/hooks/use-auth.tsx
client/src/hooks/use-mobile.tsx
client/src/hooks/use-toast.ts
client/src/index.css
client/src/lib/protected-route.tsx
client/src/lib/queryClient.ts
client/src/lib/utils.ts
client/src/main.tsx
client/src/pages/audit-page.tsx
client/src/pages/auth-page.tsx
client/src/pages/compliance-deadline-page.tsx
client/src/pages/dashboard-page.tsx
client/src/pages/document-dashboard-page.tsx
client/src/pages/document-detail-page.tsx
client/src/pages/document-repository-page.tsx
client/src/pages/documents-page.tsx
client/src/pages/not-found.tsx
client/src/pages/settings-page.tsx
client/src/pages/signatures-page.tsx
client/src/pages/templates-page.tsx
client/src/pages/users-page.tsx
client/src/types/index.ts
drizzle.config.ts
package.json
postcss.config.js
replit.md
server/ai-service.ts
server/auth.ts
server/db.ts
server/index.ts
server/migrations/add-user-documents-fields.ts
server/migrations/add-user-documents-table.ts
server/routes.ts
server/run-migrations.ts
server/storage.ts
server/vite.ts
shared/schema.ts
tailwind.config.ts
theme.json
tsconfig.json
tsconfig.server.json
verify-build.js
vite.config.ts

================================================================
Files
================================================================

================
File: .gitignore
================
node_modules
dist
.DS_Store
server/public
vite.config.ts.*
*.tar.gz
.env

================
File: .replit
================
modules = ["nodejs-20", "web", "postgresql-16"]
run = "npm run dev"
hidden = [".config", ".git", "generated-icon.png", "node_modules", "dist"]

[nix]
channel = "stable-24_05"

[env]
REPLIT_DISABLE_PACKAGE_LAYER = "1"
NODE_ENV = "development"

[deployment]
deploymentTarget = "autoscale"
build = ["sh", "-c", "npm run build && node verify-build.js"]
run = ["sh", "-c", "NODE_ENV=production node dist/server/index.js"]

[[ports]]
localPort = 5000
externalPort = 80

[workflows]
runButton = "Project"

[[workflows.workflow]]
name = "Project"
mode = "parallel"
author = "agent"

[[workflows.workflow.tasks]]
task = "workflow.run"
args = "Start application"

[[workflows.workflow]]
name = "Start application"
author = "agent"

[workflows.workflow.metadata]
agentRequireRestartOnSave = false

[[workflows.workflow.tasks]]
task = "packager.installForAll"

[[workflows.workflow.tasks]]
task = "shell.exec"
args = "npm run dev"
waitForPort = 5000

[objectStorage]
defaultBucketID = "replit-objstore-98b6b970-0937-4dd6-9dc9-d33d8ec62826"

================
File: attached_assets/Pasted-Objective-Create-a-comprehensive-AI-powered-compliance-application-that-enables-businesses-to-create-1743781050729.txt
================
Objective
Create a comprehensive AI-powered compliance application that enables businesses to create, store, sign, verify, and maintain chain of custody for compliance documents. The application should streamline regulatory compliance processes while ensuring document integrity and auditability.
Context
This application will be used by compliance officers and employees at organizations that must adhere to strict regulatory requirements across various industries. Users will have varying levels of technical expertise but need a straightforward system to manage compliance documentation. The application should reduce compliance-related administrative burdens while maintaining security and legal validity of all documents.
Instructions

Develop a modern single-page application using Vite, TypeScript, and TailwindCSS for the frontend
Implement a secure document storage system using Replit's built-in database
Create the following core features:

User authentication with role-based access control (admin, compliance officer, employee)
AI-assisted document generation with customizable templates for different compliance requirements
Digital signature system with verification mechanisms
Document versioning and change tracking
Chain of custody logging for audit trails
Automated compliance reminders and deadline tracking
Dashboard with compliance status overview and upcoming requirements
Search functionality across all stored documents


Use a clean, professional design with accessibility features
Implement proper error handling and validation throughout
Structure the codebase for maintainability with clear separation of concerns

Constraints

Use only Vite, TypeScript, TailwindCSS, and Replit's built-in database
Ensure the application works within Replit's environment constraints
Implement proper security measures for sensitive compliance data
The application should work efficiently with up to 500 documents and 50 concurrent users
Avoid using external APIs that might introduce regulatory compliance issues
Ensure all features work in modern browsers without requiring additional plugins

Desired Output
A fully functional compliance application with:

Complete source code with TypeScript type definitions
User authentication system with role-based permissions
Document management system with versioning
Digital signature functionality with verification
Comprehensive audit trail and chain of custody tracking
Clean, responsive UI built with TailwindCSS
Basic documentation for setup and usage
Sample compliance document templates for testing

================
File: client/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1" />
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
    <!-- This script injects a replit badge into the page, please feel free to remove this line -->
    <script type="text/javascript" src="https://replit.com/public/js/replit-badge-v3.js"></script>
  </body>
</html>

================
File: client/src/App.tsx
================
import { Switch, Route } from "wouter";
import { queryClient } from "./lib/queryClient";
import { QueryClientProvider } from "@tanstack/react-query";
import { Toaster } from "@/components/ui/toaster";
import NotFound from "@/pages/not-found";
import { AuthProvider } from "@/hooks/use-auth";
import { ProtectedRoute } from "@/lib/protected-route";
import AuthPage from "@/pages/auth-page";
import DashboardPage from "@/pages/dashboard-page";
import TemplatesPage from "@/pages/templates-page";
import SignaturesPage from "@/pages/signatures-page";
import AuditPage from "@/pages/audit-page";
import UsersPage from "@/pages/users-page";
import SettingsPage from "@/pages/settings-page";
import DocumentDetailPage from "@/pages/document-detail-page";
import ComplianceDeadlinePage from '@/pages/compliance-deadline-page';
import DocumentDashboardPage from '@/pages/document-dashboard-page';
import DocumentRepositoryPage from "@/pages/document-repository-page";
import DocumentsPage from "@/pages/documents-page";


function Router() {
  return (
    <Switch>
      <ProtectedRoute path="/" component={DashboardPage} />
      <ProtectedRoute path="/document-repository" component={DocumentRepositoryPage} />
      <ProtectedRoute path="/document-repository/:id" component={DocumentDetailPage} />
      <ProtectedRoute path="/documents" component={DocumentsPage} />
      <ProtectedRoute path="/documents/:id" component={DocumentDetailPage} />
      <ProtectedRoute path="/templates" component={TemplatesPage} />
      <ProtectedRoute path="/signatures" component={SignaturesPage} />
      <ProtectedRoute path="/audit" component={AuditPage} />
      <ProtectedRoute path="/users" component={UsersPage} allowedRoles={["admin", "compliance_officer"]} />
      <ProtectedRoute path="/settings" component={SettingsPage} />
      <ProtectedRoute path="/compliance/deadlines/:id" component={ComplianceDeadlinePage} />
      <ProtectedRoute path="/document-dashboard" component={DocumentDashboardPage} />
      <Route path="/auth" component={AuthPage} />
      
      <Route component={NotFound} />
    </Switch>
  );
}

function App() {
  return (
    <QueryClientProvider client={queryClient}>
      <AuthProvider>
        <Router />
        <Toaster />
      </AuthProvider>
    </QueryClientProvider>
  );
}

export default App;

================
File: client/src/components/auth/LoginForm.tsx
================
import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { useAuth, LoginData } from '@/hooks/use-auth';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Loader2 } from 'lucide-react';

const loginSchema = z.object({
  username: z.string().min(1, { message: 'Username is required' }),
  password: z.string().min(1, { message: 'Password is required' })
});

export default function LoginForm() {
  const { loginMutation } = useAuth();
  const [errorMessage, setErrorMessage] = useState<string | null>(null);

  const form = useForm<LoginData>({
    resolver: zodResolver(loginSchema),
    defaultValues: {
      username: '',
      password: ''
    }
  });

  const onSubmit = async (data: LoginData) => {
    setErrorMessage(null);
    try {
      await loginMutation.mutateAsync(data);
    } catch (error: any) {
      setErrorMessage(error.message || 'Login failed. Please check your credentials.');
    }
  };

  return (
    <div className="space-y-6">
      <div>
        <h2 className="text-2xl font-bold">Welcome back</h2>
        <p className="text-sm text-slate-500 mt-1">Sign in to your account to continue</p>
      </div>

      {errorMessage && (
        <div className="bg-red-50 text-red-700 p-3 rounded-md text-sm">
          {errorMessage}
        </div>
      )}

      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
          <FormField
            control={form.control}
            name="username"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Username or Email</FormLabel>
                <FormControl>
                  <Input 
                    {...field}
                    placeholder="Enter your username or email"
                    autoComplete="username"
                    disabled={loginMutation.isPending}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />

          <FormField
            control={form.control}
            name="password"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Password</FormLabel>
                <FormControl>
                  <Input 
                    {...field}
                    type="password"
                    placeholder="Enter your password"
                    autoComplete="current-password"
                    disabled={loginMutation.isPending}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />

          <Button 
            type="submit" 
            className="w-full"
            disabled={loginMutation.isPending}
          >
            {loginMutation.isPending ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Signing in...
              </>
            ) : (
              'Sign In'
            )}
          </Button>
        </form>
      </Form>
    </div>
  );
}

================
File: client/src/components/auth/RegisterForm.tsx
================
import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { useAuth, RegisterData } from '@/hooks/use-auth';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Loader2 } from 'lucide-react';

const registerSchema = z.object({
  username: z.string().min(3, { message: 'Username must be at least 3 characters' }),
  password: z.string().min(8, { message: 'Password must be at least 8 characters' }),
  name: z.string().min(1, { message: 'Name is required' }),
  email: z.string().email({ message: 'Please enter a valid email' }),
  role: z.enum(['admin', 'compliance_officer', 'employee'])
});

export default function RegisterForm() {
  const { registerMutation } = useAuth();
  const [errorMessage, setErrorMessage] = useState<string | null>(null);

  const form = useForm<RegisterData>({
    resolver: zodResolver(registerSchema),
    defaultValues: {
      username: '',
      password: '',
      name: '',
      email: '',
      role: 'employee'
    }
  });

  const onSubmit = async (data: RegisterData) => {
    setErrorMessage(null);
    try {
      await registerMutation.mutateAsync(data);
    } catch (error: any) {
      setErrorMessage(error.message || 'Registration failed. Please try again.');
    }
  };

  return (
    <div className="space-y-6">
      <div>
        <h2 className="text-2xl font-bold">Create an account</h2>
        <p className="text-sm text-slate-500 mt-1">Sign up to start managing compliance documents</p>
      </div>

      {errorMessage && (
        <div className="bg-red-50 text-red-700 p-3 rounded-md text-sm">
          {errorMessage}
        </div>
      )}

      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
          <FormField
            control={form.control}
            name="name"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Full Name</FormLabel>
                <FormControl>
                  <Input 
                    {...field}
                    placeholder="Enter your full name"
                    autoComplete="name"
                    disabled={registerMutation.isPending}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />

          <FormField
            control={form.control}
            name="email"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Email</FormLabel>
                <FormControl>
                  <Input 
                    {...field}
                    placeholder="Enter your email"
                    type="email"
                    autoComplete="email"
                    disabled={registerMutation.isPending}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />

          <FormField
            control={form.control}
            name="username"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Username</FormLabel>
                <FormControl>
                  <Input 
                    {...field}
                    placeholder="Choose a username"
                    autoComplete="username"
                    disabled={registerMutation.isPending}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />

          <FormField
            control={form.control}
            name="password"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Password</FormLabel>
                <FormControl>
                  <Input 
                    {...field}
                    type="password"
                    placeholder="Create a password"
                    autoComplete="new-password"
                    disabled={registerMutation.isPending}
                  />
                </FormControl>
                <FormMessage />
              </FormItem>
            )}
          />

          <FormField
            control={form.control}
            name="role"
            render={({ field }) => (
              <FormItem>
                <FormLabel>Role</FormLabel>
                <Select 
                  onValueChange={field.onChange} 
                  defaultValue={field.value}
                  disabled={registerMutation.isPending}
                >
                  <FormControl>
                    <SelectTrigger>
                      <SelectValue placeholder="Select your role" />
                    </SelectTrigger>
                  </FormControl>
                  <SelectContent>
                    <SelectItem value="employee">Employee</SelectItem>
                    <SelectItem value="compliance_officer">Compliance Officer</SelectItem>
                    <SelectItem value="admin">Administrator</SelectItem>
                  </SelectContent>
                </Select>
                <FormMessage />
              </FormItem>
            )}
          />

          <Button 
            type="submit" 
            className="w-full"
            disabled={registerMutation.isPending}
          >
            {registerMutation.isPending ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Creating account...
              </>
            ) : (
              'Create Account'
            )}
          </Button>
        </form>
      </Form>
    </div>
  );
}

================
File: client/src/components/common/Header.tsx
================
import { useState } from "react";
import { Bell, Search, Menu } from "lucide-react";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Button } from "../ui/button";

type HeaderProps = {
  pageTitle: string;
  onSearchChange?: (query: string) => void;
  notificationCount?: number;
  toggleMobileSidebar?: () => void;
};

export default function Header({
  pageTitle,
  onSearchChange,
  notificationCount = 0,
  toggleMobileSidebar,
}: HeaderProps) {
  const [searchQuery, setSearchQuery] = useState("");

  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setSearchQuery(value);
    if (onSearchChange) {
      onSearchChange(value);
    }
  };

  return (
    <header className="bg-white border-b border-slate-200 sticky top-0 z-10">
      <div className="px-4 md:px-6 py-4 flex items-center justify-between">
        <h1 className="text-xl font-semibold text-slate-800">{pageTitle}</h1>
        
        <div className="flex items-center space-x-4">
          <div className="relative hidden sm:block">
            <Search className="absolute left-3 top-2.5 h-4 w-4 text-slate-400" />
            <Input
              type="text"
              placeholder="Search documents..."
              className="pl-10 pr-4 py-2 w-48 md:w-64"
              value={searchQuery}
              onChange={handleSearchChange}
            />
          </div>
          
          <Button 
            title="Toggle mobile sidebar"
            className="relative"
            onClick={toggleMobileSidebar}
          >
            <Bell className="h-5 w-5 text-slate-600" />
            {notificationCount > 0 && (
              <Badge 
                className="absolute -right-1 -top-1 bg-red-500 text-white text-xs w-5 h-5 flex items-center justify-center rounded-full p-0"
              >
                {notificationCount > 9 ? '9+' : notificationCount}
              </Badge>
            )}
          </Button>
          
          <Button 
            title="Toggle mobile sidebar"
            className="md:hidden text-slate-700"
            onClick={toggleMobileSidebar}
          >
            <Menu className="h-5 w-5" />
          </Button>
        </div>
      </div>
    </header>
  );
}

================
File: client/src/components/common/Sidebar.tsx
================
import { useState } from "react";
import { Link, useLocation } from "wouter";
import { useAuth } from "@/hooks/use-auth";
import { 
  LayoutDashboard, 
  FileText, 
  Copy, 
  PenTool, 
  CheckSquare, 
  Users, 
  Settings, 
  LogOut,
  Menu,
  X,
  Database
} from "lucide-react";
import { cn } from "@/lib/utils";
import { Button } from "../ui/button";

type SidebarLinkProps = {
  href: string;
  icon: React.ReactNode;
  label: string;
  isActive: boolean;
  onClick?: () => void;
};

const SidebarLink = ({ href, icon, label, isActive, onClick }: SidebarLinkProps) => (
  <li className="px-4 py-2 text-sm">
    <Link 
      href={href} 
      onClick={onClick}
      className={cn(
        "flex items-center p-2 rounded-md transition-colors",
        isActive
          ? "text-white bg-slate-700"
          : "text-slate-300 hover:bg-slate-700 hover:text-white"
      )}
    >
      <span className="mr-2 text-lg">{icon}</span>
      {label}
    </Link>
  </li>
);

export default function Sidebar() {
  const [location] = useLocation();
  const { user, logoutMutation } = useAuth();
  const [isMobileOpen, setIsMobileOpen] = useState(false);

  if (!user) return null;

  const handleLogout = () => {
    logoutMutation.mutate();
  };

  const toggleMobileSidebar = () => {
    setIsMobileOpen(!isMobileOpen);
  };

  // Function to get user initials
  const getUserInitials = () => {
    if (!user || !user.name) return "";
    return user.name
      .split(" ")
      .map(part => part.charAt(0).toUpperCase())
      .slice(0, 2)
      .join("");
  };

  const links = [
    { href: "/", icon: <LayoutDashboard size={20} />, label: "Dashboard" },
    { href: "/document-repository", icon: <FileText size={20} />, label: "Documents" },
    { href: "/templates", icon: <Copy size={20} />, label: "Templates" },
    { href: "/signatures", icon: <PenTool size={20} />, label: "Signatures" },
    { href: "/audit", icon: <CheckSquare size={20} />, label: "Audit Trails" },
  ];

  // Add admin links if user is admin
  if (user.role === "admin" || user.role === "compliance_officer") {
    links.push({ href: "/users", icon: <Users size={20} />, label: "Users" });
  }

  links.push({ href: "/settings", icon: <Settings size={20} />, label: "Settings" });

  return (
    <>
      {/* Mobile Overlay */}
      {isMobileOpen && (
        <div 
          className="md:hidden fixed inset-0 bg-black bg-opacity-50 z-20"
          onClick={toggleMobileSidebar}
        />
      )}
      
      {/* Mobile Toggle Button */}
      <Button 
        className="md:hidden fixed top-4 right-4 z-30 bg-slate-800 text-white p-2 rounded-md"
        onClick={toggleMobileSidebar}
        title="Toggle mobile sidebar"
      >
        {isMobileOpen ? <X size={20} /> : <Menu size={20} />}
      </Button>
      
      {/* Sidebar */}
      <nav 
        className={cn(
          "bg-slate-800 text-white w-64 flex-shrink-0 min-h-screen transition-all duration-300 ease-in-out z-30",
          "fixed md:static md:translate-x-0",
          isMobileOpen ? "translate-x-0" : "-translate-x-full"
        )}
      >
        <div className="px-4 py-5 flex items-center justify-between border-b border-slate-700">
          <div className="flex items-center">
            <div className="h-8 w-8 rounded-md bg-primary-600 flex items-center justify-center">
              <CheckSquare className="text-white" size={20} />
            </div>
            <span className="ml-2 text-xl font-semibold">ComplianceAI</span>
          </div>
          <Button className="md:hidden text-white focus:outline-none" onClick={toggleMobileSidebar} title="Close sidebar">
            <X size={20} />
          </Button>
        </div>
        
        <div className="py-4 px-4 border-b border-slate-700">
          <div className="flex items-center">
            <div className="h-9 w-9 rounded-full bg-primary-700 flex items-center justify-center text-sm font-medium">
              {getUserInitials()}
            </div>
            <div className="ml-2">
              <p className="text-sm font-medium">{user.name}</p>
              <p className="text-xs text-slate-400">
                {user.role === "admin" ? "Administrator" : 
                 user.role === "compliance_officer" ? "Compliance Officer" : 
                 "Employee"}
              </p>
            </div>
          </div>
        </div>
        
        <div className="py-4 custom-scrollbar overflow-y-auto h-[calc(100vh-160px)]">
          <ul>
            {links.map((link) => (
              <SidebarLink 
                key={link.href}
                href={link.href}
                icon={link.icon}
                label={link.label}
                isActive={location === link.href}
                onClick={() => setIsMobileOpen(false)}
              />
            ))}
          </ul>
        </div>
        
        <div className="border-t border-slate-700 p-4 mt-auto">
          <button 
            className="flex items-center text-slate-300 hover:text-white text-sm w-full"
            onClick={handleLogout}
            disabled={logoutMutation.isPending}
          >
            <LogOut className="text-lg mr-2" size={20} />
            Sign Out
            {logoutMutation.isPending && <span className="ml-2 spinner"></span>}
          </button>
        </div>
      </nav>
    </>
  );
}

================
File: client/src/components/compliance/AddDeadlineModal.tsx
================
import { useState, useEffect } from 'react';
import { useMutation, useQueryClient, useQuery } from '@tanstack/react-query';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Calendar } from '@/components/ui/calendar';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { format } from 'date-fns';
import { CalendarIcon, UserIcon } from 'lucide-react';
import { cn } from '@/lib/utils';
import { ComplianceDeadline, User } from '@/types';
import { useToast } from '@/hooks/use-toast';
import { Textarea } from '@/components/ui/textarea';

type DeadlineStatus = 'not_started' | 'in_progress' | 'completed' | 'overdue';

type AddDeadlineModalProps = {
  isOpen: boolean;
  onClose: () => void;
};

export default function AddDeadlineModal({
  isOpen,
  onClose,
}: AddDeadlineModalProps) {
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [type, setType] = useState<string>('regulatory');
  const [deadlineDate, setDeadlineDate] = useState<Date | undefined>(new Date());
  const [status, setStatus] = useState<DeadlineStatus>('not_started');
  const [assigneeId, setAssigneeId] = useState<number | null>(null);
  
  const { toast } = useToast();
  const queryClient = useQueryClient();
  
  // Fetch users for the assignee dropdown
  const { data: users, isLoading: usersLoading } = useQuery<User[]>({
    queryKey: ['/api/users'],
    staleTime: 5 * 60 * 1000, // 5 minutes
  });
  
  const createDeadlineMutation = useMutation({
    mutationFn: async (newDeadline: Record<string, any>) => {
      console.log('Creating new deadline:', newDeadline);
      
      const response = await fetch('/api/compliance-deadlines', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(newDeadline),
        credentials: 'include',
      });
      
      if (!response.ok) {
        let errorMessage = 'Failed to create deadline';
        try {
          const errorData = await response.json();
          console.error('Error response:', errorData);
          
          // Extract detailed validation errors
          if (errorData.errors) {
            console.log('Validation errors:', JSON.stringify(errorData.errors, null, 2));
            
            // Create a more descriptive error message from validation errors
            const errorDetails = Object.entries(errorData.errors)
              .filter(([key, value]) => key !== '_errors' && typeof value === 'object' && value !== null)
              .map(([key, value]) => {
                const fieldErrors = (value as any)._errors;
                if (Array.isArray(fieldErrors) && fieldErrors.length > 0) {
                  return `${key}: ${fieldErrors.join(', ')}`;
                }
                return null;
              })
              .filter(Boolean)
              .join('; ');
            
            if (errorDetails) {
              errorMessage = `Validation failed: ${errorDetails}`;
            } else {
              errorMessage = errorData.message || errorMessage;
            }
          } else {
            errorMessage = errorData.message || errorMessage;
          }
          
          // Check for permission errors
          if (response.status === 401) {
            errorMessage = 'You must be logged in to create deadlines';
          } else if (response.status === 403) {
            errorMessage = 'You do not have permission to create deadlines';
          }
        } catch (e) {
          console.error('Error parsing error response:', e);
        }
        throw new Error(errorMessage);
      }
      
      return await response.json();
    },
    onSuccess: (data) => {
      console.log('Deadline created successfully:', data);
      queryClient.invalidateQueries({ queryKey: ['/api/compliance-deadlines'] });
      toast({
        title: 'Deadline created',
        description: 'The compliance deadline has been created successfully.',
      });
      onClose();
    },
    onError: (error) => {
      console.error('Deadline creation error:', error);
      toast({
        title: 'Error',
        description: `Failed to create deadline: ${error.message}`,
        variant: 'destructive',
      });
    },
  });
  
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    // Validate required fields
    if (!title.trim()) {
      toast({
        title: 'Validation Error',
        description: 'Title is required',
        variant: 'destructive',
      });
      return;
    }
    
    if (!type) {
      toast({
        title: 'Validation Error',
        description: 'Type is required',
        variant: 'destructive',
      });
      return;
    }
    
    if (!deadlineDate) {
      toast({
        title: 'Validation Error',
        description: 'Deadline date is required',
        variant: 'destructive',
      });
      return;
    }
    
    try {
      // In the schema, deadline is a timestamp field in the database
      // For PostgreSQL timestamp fields, the correct format is an ISO string
      // But we need to make sure we modify the request on the server to accept this
      const deadline = deadlineDate.toISOString();
      
      // Create a properly formatted deadline object
      const payload: Record<string, any> = {
        title: title.trim(),
        type,
        status,
        deadline,
        ...(description.trim() ? { description: description.trim() } : {}),
      };
      
      // Only add assigneeId if it's a valid number
      if (assigneeId !== null && !isNaN(assigneeId)) {
        payload.assigneeId = assigneeId;
      }
      
      // Log the exact format we're sending
      console.log('Sending payload with deadline format:', {
        value: deadline,
        type: typeof deadline
      });
      
      createDeadlineMutation.mutate(payload);
    } catch (error) {
      console.error('Error preparing deadline payload:', error);
      toast({
        title: 'Error',
        description: 'Failed to prepare deadline data',
        variant: 'destructive',
      });
    }
  };
  
  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Add Compliance Deadline</DialogTitle>
        </DialogHeader>
        
        <form onSubmit={handleSubmit} className="space-y-4 py-4">
          <div className="space-y-2">
            <Label htmlFor="title">Title</Label>
            <Input
              id="title"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              disabled={createDeadlineMutation.isPending}
              required
            />
          </div>
          
          <div className="space-y-2">
            <Label htmlFor="description">Description (optional)</Label>
            <Textarea
              id="description"
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              disabled={createDeadlineMutation.isPending}
              rows={3}
              placeholder="Enter a description for this compliance deadline"
            />
          </div>
          
          <div className="space-y-2">
            <Label htmlFor="type">Type</Label>
            <Select 
              value={type} 
              onValueChange={(value) => setType(value)}
              disabled={createDeadlineMutation.isPending}
            >
              <SelectTrigger id="type">
                <SelectValue placeholder="Select type" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="regulatory">Regulatory</SelectItem>
                <SelectItem value="internal">Internal</SelectItem>
                <SelectItem value="audit">Audit</SelectItem>
                <SelectItem value="certification">Certification</SelectItem>
              </SelectContent>
            </Select>
          </div>
          
          <div className="space-y-2">
            <Label htmlFor="deadline">Deadline Date</Label>
            <Popover>
              <PopoverTrigger asChild>
                <Button
                  variant="outline"
                  className={cn(
                    "w-full justify-start text-left font-normal",
                    !deadlineDate && "text-muted-foreground"
                  )}
                  disabled={createDeadlineMutation.isPending}
                >
                  <CalendarIcon className="mr-2 h-4 w-4" />
                  {deadlineDate ? format(deadlineDate, "PPP") : <span>Pick a date</span>}
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-auto p-0">
                <Calendar
                  mode="single"
                  selected={deadlineDate}
                  onSelect={setDeadlineDate}
                  initialFocus
                />
              </PopoverContent>
            </Popover>
          </div>
          
          <div className="space-y-2">
            <Label htmlFor="assignee">Assignee (optional)</Label>
            <Select 
              value={assigneeId ? assigneeId.toString() : "none"}
              onValueChange={(value) => {
                if (value === "none") {
                  setAssigneeId(null);
                } else {
                  try {
                    const id = parseInt(value, 10);
                    setAssigneeId(isNaN(id) ? null : id);
                  } catch (e) {
                    console.error("Error parsing assignee ID:", e);
                    setAssigneeId(null);
                  }
                }
              }}
              disabled={createDeadlineMutation.isPending || usersLoading}
            >
              <SelectTrigger id="assignee">
                <SelectValue placeholder="Select assignee" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="none">None</SelectItem>
                {users?.map((user) => (
                  <SelectItem key={user.id} value={user.id.toString()}>
                    {user.name}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
          
          <div className="space-y-2">
            <Label htmlFor="status">Status</Label>
            <Select 
              value={status} 
              onValueChange={(value: DeadlineStatus) => setStatus(value)}
              disabled={createDeadlineMutation.isPending}
            >
              <SelectTrigger id="status">
                <SelectValue placeholder="Select status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="not_started">Not Started</SelectItem>
                <SelectItem value="in_progress">In Progress</SelectItem>
                <SelectItem value="completed">Completed</SelectItem>
                <SelectItem value="overdue">Overdue</SelectItem>
              </SelectContent>
            </Select>
          </div>
          
          <DialogFooter>
            <Button
              type="button"
              variant="outline"
              onClick={onClose}
              disabled={createDeadlineMutation.isPending}
            >
              Cancel
            </Button>
            <Button
              type="submit"
              disabled={createDeadlineMutation.isPending}
            >
              {createDeadlineMutation.isPending ? 'Creating...' : 'Create Deadline'}
            </Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
}

================
File: client/src/components/compliance/EditDeadlineModal.tsx
================
import { useState, useEffect } from 'react';
import { useMutation, useQueryClient, useQuery } from '@tanstack/react-query';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Calendar } from '@/components/ui/calendar';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';
import { format } from 'date-fns';
import { CalendarIcon } from 'lucide-react';
import { cn } from '@/lib/utils';
import { ComplianceDeadline, User } from '@/types';
import { useToast } from '@/hooks/use-toast';
import { Textarea } from '@/components/ui/textarea';

type DeadlineStatus = 'not_started' | 'in_progress' | 'completed' | 'overdue';

type EditDeadlineModalProps = {
  isOpen: boolean;
  onClose: () => void;
  deadline: ComplianceDeadline;
  isLoading?: boolean;
};

export default function EditDeadlineModal({
  isOpen,
  onClose,
  deadline,
  isLoading = false,
}: EditDeadlineModalProps) {
  // Extract and validate deadline ID early
  const deadlineId = typeof deadline.id === 'number' 
    ? deadline.id 
    : (typeof deadline.id === 'string' ? parseInt(deadline.id, 10) : null);

  // Safely parse date with fallback
  const parseDeadlineDate = () => {
    try {
      const date = new Date(deadline.deadline);
      // Check if date is valid
      return isNaN(date.getTime()) ? new Date() : date;
    } catch (e) {
      console.error("Error parsing deadline date:", e);
      return new Date();
    }
  };

  // Initialize state with default values to prevent undefined values
  const [title, setTitle] = useState(deadline.title || '');
  const [description, setDescription] = useState(deadline.description || '');
  const [type, setType] = useState<string>(deadline.type || 'regulatory');
  const [deadlineDate, setDeadlineDate] = useState<Date | undefined>(parseDeadlineDate());
  const [status, setStatus] = useState<DeadlineStatus>((deadline.status as DeadlineStatus) || 'not_started');
  const [assigneeId, setAssigneeId] = useState<number | null>(null);
  
  // Update state when deadline prop changes
  useEffect(() => {
    if (!deadline) return;
    
    setTitle(deadline.title || '');
    setDescription(deadline.description || '');
    setType(deadline.type || 'regulatory');
    setDeadlineDate(parseDeadlineDate());
    setStatus((deadline.status as DeadlineStatus) || 'not_started');
    
    // Ensure assigneeId is a valid number or null
    if (deadline.assigneeId && typeof deadline.assigneeId === 'number') {
      setAssigneeId(deadline.assigneeId);
    } else if (deadline.assigneeId && typeof deadline.assigneeId === 'string') {
      const parsedId = parseInt(deadline.assigneeId, 10);
      setAssigneeId(isNaN(parsedId) ? null : parsedId);
    } else {
      setAssigneeId(null);
    }
  }, [deadline]);
  
  const { toast } = useToast();
  const queryClient = useQueryClient();
  
  // Fetch users for the assignee dropdown
  const { data: users, isLoading: usersLoading } = useQuery<User[]>({
    queryKey: ['/api/users'],
    staleTime: 5 * 60 * 1000, // 5 minutes
  });
  
  const updateDeadlineMutation = useMutation({
    mutationFn: async (updatedDeadline: Record<string, any>) => {
      // Validate the deadline ID 
      if (!deadlineId || isNaN(deadlineId)) {
        throw new Error("Invalid deadline ID");
      }
      
      console.log('Updating deadline:', updatedDeadline);
      console.log('Deadline ID:', deadlineId, 'Type:', typeof deadlineId);
      
      const response = await fetch(`/api/compliance-deadlines/${deadlineId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(updatedDeadline),
        credentials: 'include',
      });
      
      if (!response.ok) {
        let errorMessage = 'Failed to update deadline';
        try {
          const errorData = await response.json();
          console.error('Error response:', errorData);
          errorMessage = errorData.message || errorMessage;
        } catch (e) {
          console.error('Error parsing error response:', e);
        }
        throw new Error(errorMessage);
      }
      
      return await response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/compliance-deadlines'] });
      toast({
        title: 'Deadline updated',
        description: 'The compliance deadline has been updated successfully.',
      });
      onClose();
    },
    onError: (error) => {
      toast({
        title: 'Error',
        description: `Failed to update deadline: ${error.message}`,
        variant: 'destructive',
      });
    },
  });
  
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    // Validate deadline ID before submitting
    if (!deadlineId || isNaN(deadlineId)) {
      toast({
        title: 'Error',
        description: 'Invalid deadline ID. Cannot update this deadline.',
        variant: 'destructive',
      });
      return;
    }
    
    if (!deadlineDate) {
      toast({
        title: 'Validation Error',
        description: 'Deadline date is required',
        variant: 'destructive',
      });
      return;
    }
    
    try {
      // Create a properly formatted deadline object
      const payload: Record<string, any> = {
        title: title.trim(),
        type,
        status,
        deadline: deadlineDate.toISOString(),
      };
      
      // Add optional fields
      if (description.trim()) {
        payload.description = description.trim();
      }
      
      // Only add assigneeId if it's a valid number
      if (assigneeId !== null && typeof assigneeId === 'number') {
        payload.assigneeId = assigneeId;
      } else {
        // Include null explicitly to clear the assignee
        payload.assigneeId = null;
      }
      
      updateDeadlineMutation.mutate(payload);
    } catch (error) {
      console.error('Error preparing deadline data:', error);
      toast({
        title: 'Error',
        description: 'Failed to prepare deadline data',
        variant: 'destructive',
      });
    }
  };
  
  // If deadline ID is invalid, show error in modal
  if (!deadlineId || isNaN(deadlineId)) {
    return (
      <Dialog open={isOpen} onOpenChange={onClose}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle>Error</DialogTitle>
          </DialogHeader>
          <div className="py-6">
            <p className="text-red-500">Invalid deadline ID. Cannot edit this deadline.</p>
          </div>
          <DialogFooter>
            <Button onClick={onClose}>Close</Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    );
  }
  
  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>Edit Compliance Deadline</DialogTitle>
        </DialogHeader>
        
        <form onSubmit={handleSubmit} className="space-y-4 py-4">
          <div className="space-y-2">
            <Label htmlFor="title">Title</Label>
            <Input
              id="title"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              disabled={isLoading || updateDeadlineMutation.isPending}
              required
            />
          </div>
          
          <div className="space-y-2">
            <Label htmlFor="description">Description (optional)</Label>
            <Textarea
              id="description"
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              disabled={isLoading || updateDeadlineMutation.isPending}
              rows={3}
              placeholder="Enter a description for this compliance deadline"
            />
          </div>
          
          <div className="space-y-2">
            <Label htmlFor="type">Type</Label>
            <Select 
              value={type} 
              onValueChange={(value) => setType(value)}
              disabled={isLoading || updateDeadlineMutation.isPending}
            >
              <SelectTrigger id="type">
                <SelectValue placeholder="Select type" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="regulatory">Regulatory</SelectItem>
                <SelectItem value="internal">Internal</SelectItem>
                <SelectItem value="audit">Audit</SelectItem>
                <SelectItem value="certification">Certification</SelectItem>
              </SelectContent>
            </Select>
          </div>
          
          <div className="space-y-2">
            <Label htmlFor="deadline">Deadline Date</Label>
            <Popover>
              <PopoverTrigger asChild>
                <Button
                  variant="outline"
                  className={cn(
                    "w-full justify-start text-left font-normal",
                    !deadlineDate && "text-muted-foreground"
                  )}
                  disabled={isLoading || updateDeadlineMutation.isPending}
                >
                  <CalendarIcon className="mr-2 h-4 w-4" />
                  {deadlineDate ? format(deadlineDate, "PPP") : <span>Pick a date</span>}
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-auto p-0">
                <Calendar
                  mode="single"
                  selected={deadlineDate}
                  onSelect={setDeadlineDate}
                  initialFocus
                />
              </PopoverContent>
            </Popover>
          </div>
          
          <div className="space-y-2">
            <Label htmlFor="assignee">Assignee (optional)</Label>
            <Select 
              value={assigneeId !== null ? assigneeId.toString() : "none"}
              onValueChange={(value) => {
                if (value === "none") {
                  setAssigneeId(null);
                } else {
                  try {
                    const id = parseInt(value, 10);
                    setAssigneeId(isNaN(id) ? null : id);
                  } catch (e) {
                    console.error("Error parsing assignee ID:", e);
                    setAssigneeId(null);
                  }
                }
              }}
              disabled={isLoading || updateDeadlineMutation.isPending || usersLoading}
            >
              <SelectTrigger id="assignee">
                <SelectValue placeholder="Select assignee" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="none">None</SelectItem>
                {users?.map((user) => (
                  <SelectItem key={user.id} value={user.id.toString()}>
                    {user.name}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>
          
          <div className="space-y-2">
            <Label htmlFor="status">Status</Label>
            <Select 
              value={status} 
              onValueChange={(value: DeadlineStatus) => setStatus(value)}
              disabled={isLoading || updateDeadlineMutation.isPending}
            >
              <SelectTrigger id="status">
                <SelectValue placeholder="Select status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="not_started">Not Started</SelectItem>
                <SelectItem value="in_progress">In Progress</SelectItem>
                <SelectItem value="completed">Completed</SelectItem>
                <SelectItem value="overdue">Overdue</SelectItem>
              </SelectContent>
            </Select>
          </div>
          
          <DialogFooter>
            <Button
              type="button"
              variant="outline"
              onClick={onClose}
              disabled={updateDeadlineMutation.isPending}
            >
              Cancel
            </Button>
            <Button
              type="submit"
              disabled={isLoading || updateDeadlineMutation.isPending}
            >
              {updateDeadlineMutation.isPending ? 'Saving...' : 'Save Changes'}
            </Button>
          </DialogFooter>
        </form>
      </DialogContent>
    </Dialog>
  );
}

================
File: client/src/components/dashboard/AIAssistant.tsx
================
import { useState, useRef, useEffect } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Bot, Send, User } from "lucide-react";
import { AIMessage } from "@/types";
import { apiRequest } from "@/lib/queryClient";
import { cn } from "@/lib/utils";

type AIAssistantProps = {
  initialMessages?: AIMessage[];
  suggestedPrompts?: string[];
};

// Typing indicator animation component
const TypingIndicator = () => {
  return (
    <div className="flex items-start">
      <div className="flex-shrink-0 mr-3">
        <div className="h-9 w-9 rounded-full bg-primary-100 flex items-center justify-center">
          <Bot className="text-primary-600" size={16} />
        </div>
      </div>
      
      <div className="rounded-lg p-3 bg-slate-100 max-w-[85%]">
        <div className="flex space-x-2">
          <div className="h-2 w-2 rounded-full bg-slate-400 animate-bounce" style={{ animationDelay: '0ms' }}></div>
          <div className="h-2 w-2 rounded-full bg-slate-400 animate-bounce" style={{ animationDelay: '300ms' }}></div>
          <div className="h-2 w-2 rounded-full bg-slate-400 animate-bounce" style={{ animationDelay: '600ms' }}></div>
        </div>
      </div>
    </div>
  );
};

export default function AIAssistant({ 
  initialMessages = [],
  suggestedPrompts = [
    "Generate ISO documentation",
    "Schedule meeting with auditor",
    "Show compliance checklist"
  ]
}: AIAssistantProps) {
  const [messages, setMessages] = useState<AIMessage[]>(initialMessages.length > 0 
    ? initialMessages 
    : [
        {
          id: "welcome",
          role: "assistant",
          content: "Hi! I'm your ComplianceAI Assistant. How can I help you with your compliance tasks today?",
          timestamp: new Date().toISOString()
        }
      ]
  );
  const [inputValue, setInputValue] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    scrollToBottom();
  }, [messages, isLoading]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  const handleSendMessage = async () => {
    if (!inputValue.trim()) return;
    
    // Add user message
    const userMessage: AIMessage = {
      id: Date.now().toString(),
      role: "user",
      content: inputValue.trim(),
      timestamp: new Date().toISOString()
    };
    
    setMessages(prev => [...prev, userMessage]);
    setInputValue("");
    setIsLoading(true);
    
    try {
      // Format messages for OpenAI API
      const messagesToSend = messages.concat(userMessage).map(msg => ({
        role: msg.role,
        content: msg.content
      }));
      
      // Call OpenAI API through our backend
      const response = await apiRequest(
        'POST',
        '/api/ai/chat',
        {
          messages: messagesToSend,
          model: "gpt-4o-mini", // Or other model as configured
          temperature: 0.5,
          max_tokens: 1000,
          context: "You are a helpful AI assistant specialized in compliance, regulations, and governance. Help users with their compliance tasks, documentation, and provide guidance on regulatory requirements."
        }
      );
      
      const responseData = await response.json();
      
      // Add AI response to messages
      const assistantMessage: AIMessage = {
        id: Date.now().toString(),
        role: "assistant",
        content: responseData.choices[0].message.content,
        timestamp: new Date().toISOString()
      };
      
      setMessages(prev => [...prev, assistantMessage]);
    } catch (error) {
      console.error("Error getting AI response:", error);
      
      // Add error message
      const errorMessage: AIMessage = {
        id: Date.now().toString(),
        role: "assistant",
        content: "I'm sorry, I encountered an error processing your request. Please try again later.",
        timestamp: new Date().toISOString()
      };
      
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleSuggestedPrompt = (prompt: string) => {
    setInputValue(prompt);
    handleSendMessage();
  };

  // Automatically send the message after setting the input value from a suggestion
  useEffect(() => {
    if (inputValue && inputValue.trim() && inputValue === suggestedPrompts.find(p => p === inputValue)) {
      handleSendMessage();
    }
  }, [inputValue]);

  return (
    <section className="mb-8">
      <Card className="shadow overflow-hidden border border-slate-200">
        <CardHeader className="p-4 border-b border-slate-200 flex flex-row items-center">
          <Bot className="text-primary-600 mr-2" size={20} />
          <CardTitle className="text-base font-medium">ComplianceAI Assistant</CardTitle>
        </CardHeader>
        <CardContent className="p-4">
          <div className="space-y-4 mb-4 max-h-[350px] overflow-y-auto custom-scrollbar">
            {messages.map((message) => (
              <div key={message.id} className={cn(
                "flex items-start",
                message.role === "user" ? "justify-end" : ""
              )}>
                {message.role === "assistant" && (
                  <div className="flex-shrink-0 mr-3">
                    <div className="h-9 w-9 rounded-full bg-primary-100 flex items-center justify-center">
                      <Bot className="text-primary-600" size={16} />
                    </div>
                  </div>
                )}
                
                <div className={cn(
                  "rounded-lg p-3 max-w-[85%]",
                  message.role === "assistant" ? "bg-slate-100" : "bg-primary-50"
                )}>
                  <p className="text-sm text-slate-700 whitespace-pre-line">{message.content}</p>
                </div>
                
                {message.role === "user" && (
                  <div className="flex-shrink-0 ml-3">
                    <div className="h-9 w-9 rounded-full bg-primary-600 flex items-center justify-center text-white">
                      <User size={16} />
                    </div>
                  </div>
                )}
              </div>
            ))}
            
            {isLoading && <TypingIndicator />}
            
            <div ref={messagesEndRef} />
          </div>
          
          <div className="relative mt-4">
            <Input
              type="text"
              className="w-full border-2 border-slate-300 rounded-full py-2 pl-4 pr-12 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-primary-500"
              placeholder="Type your message..."
              value={inputValue}
              onChange={(e) => setInputValue(e.target.value)}
              onKeyDown={(e) => {
                if (e.key === "Enter" && !e.shiftKey) {
                  e.preventDefault();
                  handleSendMessage();
                }
              }}
              disabled={isLoading}
            />
            <Button 
              size="icon"
              className="absolute right-1 top-1 bg-primary-600 text-white rounded-full w-8 h-8 flex items-center justify-center hover:bg-primary-700"
              onClick={handleSendMessage}
              disabled={isLoading || !inputValue.trim()}
            >
              <Send className="h-4 w-4" />
            </Button>
          </div>
          
          <div className="mt-4 text-center">
            <div className="inline-flex flex-wrap justify-center gap-2">
              {suggestedPrompts.map((prompt, index) => (
                <Button 
                  key={index} 
                  variant="outline"
                  size="sm"
                  className="bg-slate-100 hover:bg-slate-200 text-slate-700 text-sm h-auto py-1"
                  onClick={() => handleSuggestedPrompt(prompt)}
                  disabled={isLoading}
                >
                  {prompt}
                </Button>
              ))}
            </div>
          </div>
        </CardContent>
      </Card>
    </section>
  );
}

================
File: client/src/components/dashboard/ComplianceCalendar.tsx
================
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { 
  Calendar, 
  EyeIcon, 
  PencilIcon, 
  PlusIcon, 
  CalendarIcon, 
  Clock
} from "lucide-react";
import { ComplianceCalendarItem } from "@/types";

type ComplianceCalendarProps = {
  calendarItems: ComplianceCalendarItem[];
  isLoading?: boolean;
  onViewItem?: (id: number) => void;
  onEditItem?: (id: number) => void;
  onAddItem?: () => void;
};

const getStatusBadge = (status: string) => {
  let color = "";
  let bgColor = "";
  
  switch (status) {
    case "in_progress":
      return <Badge variant="outline" className="bg-warning-100 text-warning-800 border-transparent">In Progress</Badge>;
    case "completed":
      return <Badge variant="outline" className="bg-success-100 text-success-800 border-transparent">Completed</Badge>;
    case "not_started":
      return <Badge variant="outline" className="bg-slate-100 text-slate-800 border-transparent">Not Started</Badge>;
    case "overdue":
      return <Badge variant="outline" className="bg-error-100 text-error-800 border-transparent">Overdue</Badge>;
    default:
      return <Badge variant="outline" className="bg-slate-100 text-slate-800 border-transparent">{status}</Badge>;
  }
};

const getDeadlineIcon = (deadline: string) => {
  const deadlineDate = new Date(deadline);
  const now = new Date();
  const threeDaysFromNow = new Date();
  threeDaysFromNow.setDate(now.getDate() + 3);
  
  if (deadlineDate <= now) {
    return <Clock className="text-error-500 mr-1 text-sm" size={16} />;
  } else if (deadlineDate <= threeDaysFromNow) {
    return <Clock className="text-warning-500 mr-1 text-sm" size={16} />;
  } else {
    return <Clock className="text-slate-400 mr-1 text-sm" size={16} />;
  }
};

export default function ComplianceCalendar({ 
  calendarItems, 
  isLoading = false,
  onViewItem,
  onEditItem,
  onAddItem
}: ComplianceCalendarProps) {
  if (isLoading) {
    return (
      <section className="mb-8">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-lg font-semibold">Upcoming Compliance Deadlines</h2>
          <div className="animate-pulse flex space-x-2">
            <div className="h-8 bg-slate-200 rounded w-28"></div>
            <div className="h-8 bg-slate-200 rounded w-24"></div>
          </div>
        </div>
        
        <Card className="shadow overflow-hidden">
          <CardContent className="p-4 sm:p-6">
            <div className="animate-pulse">
              <div className="h-10 bg-slate-200 rounded w-full mb-4"></div>
              {[...Array(3)].map((_, i) => (
                <div key={i} className="h-16 bg-slate-200 rounded w-full mb-3"></div>
              ))}
            </div>
          </CardContent>
        </Card>
      </section>
    );
  }

  return (
    <section className="mb-8">
      <div className="flex items-center justify-between mb-4">
        <h2 className="text-lg font-semibold">Upcoming Compliance Deadlines</h2>
        <div className="flex space-x-2">
          <Button variant="outline" size="sm" onClick={() => {}}>
            <CalendarIcon className="h-4 w-4 mr-1" />
            Calendar View
          </Button>
          <Button variant="outline" size="sm" onClick={onAddItem}>
            <PlusIcon className="h-4 w-4 mr-1" />
            Add Event
          </Button>
        </div>
      </div>
      
      <Card className="shadow overflow-hidden">
        <CardContent className="p-4 sm:p-6 max-w-full overflow-x-auto">
          {calendarItems.length === 0 ? (
            <div className="text-center p-8 text-slate-500">
              <Calendar className="mx-auto h-12 w-12 text-slate-400 mb-3" />
              <h3 className="text-lg font-medium mb-1">No upcoming deadlines</h3>
              <p className="text-sm mb-4">Your compliance calendar is clear for now.</p>
              <Button onClick={onAddItem}>
                <PlusIcon className="h-4 w-4 mr-1" />
                Add Compliance Deadline
              </Button>
            </div>
          ) : (
            <table className="min-w-full divide-y divide-slate-200">
              <thead className="bg-slate-50">
                <tr>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Document</th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Deadline</th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Type</th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Assignee</th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Status</th>
                  <th scope="col" className="px-6 py-3 text-right text-xs font-medium text-slate-500 uppercase tracking-wider">Actions</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-slate-200">
                {calendarItems.map((item) => (
                  <tr key={item.id} className="hover:bg-slate-50">
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm font-medium text-slate-900">{item.title}</div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex items-center">
                        {getDeadlineIcon(item.deadline)}
                        <div className="text-sm text-slate-900">
                          {new Date(item.deadline).toLocaleDateString()}
                        </div>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="text-sm text-slate-500">{item.type}</div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      <div className="flex items-center">
                        <div className="h-8 w-8 rounded-full bg-primary-100 flex items-center justify-center text-xs font-medium text-primary-700">
                          {item.assignee.initials}
                        </div>
                        <div className="ml-2 text-sm text-slate-900">{item.assignee.name}</div>
                      </div>
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      {getStatusBadge(item.status)}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                      <Button variant="ghost" size="sm" className="h-8 px-2 text-primary-600 hover:text-primary-900" onClick={() => onViewItem && onViewItem(item.id)}>
                        <EyeIcon className="h-4 w-4" />
                        <span className="sr-only">View</span>
                      </Button>
                      <Button variant="ghost" size="sm" className="h-8 px-2 text-slate-600 hover:text-slate-900" onClick={() => onEditItem && onEditItem(item.id)}>
                        <PencilIcon className="h-4 w-4" />
                        <span className="sr-only">Edit</span>
                      </Button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          )}
        </CardContent>
      </Card>
    </section>
  );
}

================
File: client/src/components/dashboard/DashboardOverview.tsx
================
import { 
  FileText, 
  Clock, 
  CheckCircle, 
  AlertTriangle,
  TrendingUp
} from "lucide-react";
import { DashboardStats } from "@/types";
import { Card, CardContent } from "@/components/ui/card";

interface StatsCardProps {
  title: string;
  value: string | number;
  icon: React.ReactNode;
  iconBgColor: string;
  iconColor: string;
  footer: {
    label: string;
    value: string | number;
    color?: string;
  };
}

const StatsCard = ({ title, value, icon, iconBgColor, iconColor, footer }: StatsCardProps) => (
  <Card className="shadow">
    <CardContent className="p-5">
      <div className="flex items-start justify-between">
        <div>
          <p className="text-sm text-slate-500 mb-1">{title}</p>
          <h3 className="text-2xl font-semibold">{value}</h3>
        </div>
        <div className={`h-10 w-10 rounded-full ${iconBgColor} flex items-center justify-center`}>
          <span className={iconColor}>{icon}</span>
        </div>
      </div>
      <div className="mt-4 pt-4 border-t">
        <div className="flex items-center justify-between text-sm">
          <span className="text-slate-500">{footer.label}</span>
          <span className={`font-medium ${footer.color || "text-primary-600"}`}>{footer.value}</span>
        </div>
      </div>
    </CardContent>
  </Card>
);

type DashboardOverviewProps = {
  stats: DashboardStats;
  isLoading?: boolean;
};

export default function DashboardOverview({ stats, isLoading = false }: DashboardOverviewProps) {
  if (isLoading) {
    return (
      <section className="mb-8">
        <h2 className="text-lg font-semibold mb-4">Compliance Overview</h2>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          {[...Array(4)].map((_, i) => (
            <Card key={i} className="shadow">
              <CardContent className="p-5">
                <div className="animate-pulse flex space-x-4">
                  <div className="flex-1 space-y-4 py-1">
                    <div className="h-4 bg-slate-200 rounded w-3/4"></div>
                    <div className="h-6 bg-slate-200 rounded w-1/2"></div>
                    <div className="h-4 bg-slate-200 rounded w-5/6"></div>
                  </div>
                  <div className="rounded-full bg-slate-200 h-10 w-10"></div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      </section>
    );
  }

  return (
    <section className="mb-8">
      <h2 className="text-lg font-semibold mb-4">Compliance Overview</h2>
      
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        <StatsCard
          title="Documents"
          value={stats.documents}
          icon={<FileText size={20} />}
          iconBgColor="bg-primary-100"
          iconColor="text-primary-600"
          footer={{
            label: "Last 30 days",
            value: `+${stats.docsCreatedLastMonth}`,
          }}
        />
        
        <StatsCard
          title="Pending Approval"
          value={stats.pending}
          icon={<Clock size={20} />}
          iconBgColor="bg-warning-100"
          iconColor="text-warning-600"
          footer={{
            label: "Urgent",
            value: stats.urgentCount,
            color: "text-warning-600"
          }}
        />
        
        <StatsCard
          title="Compliance Rate"
          value={`${stats.complianceRate}%`}
          icon={<CheckCircle size={20} />}
          iconBgColor="bg-success-100"
          iconColor="text-success-600"
          footer={{
            label: "Last month",
            value: stats.lastMonthComplianceChange,
            color: "text-success-600"
          }}
        />
        
        <StatsCard
          title="Expiring Soon"
          value={stats.expiringCount}
          icon={<AlertTriangle size={20} />}
          iconBgColor="bg-error-100"
          iconColor="text-error-600"
          footer={{
            label: "Next 7 days",
            value: stats.urgentCount,
            color: "text-error-600"
          }}
        />
      </div>
    </section>
  );
}

================
File: client/src/components/dashboard/DocumentsSection.tsx
================
import { useLocation } from "wouter";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import { AlertCircle, Calendar, CheckSquare, Clock, Eye, FileText } from "lucide-react";
import { PendingDocumentItem, RecentDocumentItem } from "@/types";
import { formatDistanceToNow } from "date-fns";

type DocumentsCardProps = {
  title: string;
  viewAllHref: string;
  children: React.ReactNode;
};

const DocumentsCard = ({ title, viewAllHref, children }: DocumentsCardProps) => (
  <Card className="shadow h-full">
    <CardHeader className="p-4 border-b border-slate-200 flex flex-row items-center justify-between">
      <CardTitle className="text-base font-medium">{title}</CardTitle>
      <Button variant="link" size="sm" className="text-primary-600 hover:text-primary-700 p-0" asChild>
        <a href={viewAllHref}>View All</a>
      </Button>
    </CardHeader>
    <CardContent className="p-4 max-h-[350px] overflow-y-auto custom-scrollbar">
      {children}
    </CardContent>
  </Card>
);

type StatusBadgeProps = {
  status: string;
  label?: string;
};

const StatusBadge = ({ status, label }: StatusBadgeProps) => {
  let color = "";
  let bgColor = "";
  const displayLabel = label || status.replace("_", " ");
  
  switch (status) {
    case "pending_approval":
    case "Signature Required":
    case "In Review":
      color = "text-warning-800";
      bgColor = "bg-warning-100";
      break;
    case "active":
    case "Active":
      color = "text-success-800";
      bgColor = "bg-success-100";
      break;
    case "urgent":
    case "Urgent":
      color = "text-error-800";
      bgColor = "bg-error-100";
      break;
    default:
      color = "text-slate-800";
      bgColor = "bg-slate-100";
  }

  return (
    <Badge variant="outline" className={`${bgColor} ${color} border-transparent`}>
      {displayLabel}
    </Badge>
  );
};

type DocumentsSectionProps = {
  pendingDocuments: PendingDocumentItem[];
  recentDocuments: RecentDocumentItem[];
  isLoading?: boolean;
};

export default function DocumentsSection({ 
  pendingDocuments, 
  recentDocuments, 
  isLoading = false 
}: DocumentsSectionProps) {
  const [, navigate] = useLocation();

  if (isLoading) {
    return (
      <section className="mb-8 grid grid-cols-1 lg:grid-cols-2 gap-6">
        {[...Array(2)].map((_, i) => (
          <Card key={i} className="shadow">
            <CardHeader className="p-4 border-b border-slate-200">
              <div className="animate-pulse h-5 bg-slate-200 rounded w-1/3"></div>
            </CardHeader>
            <CardContent className="p-4">
              <div className="space-y-4">
                {[...Array(3)].map((_, j) => (
                  <div key={j} className="animate-pulse border border-slate-200 rounded-md p-4">
                    <div className="flex justify-between">
                      <div className="h-4 bg-slate-200 rounded w-1/3"></div>
                      <div className="h-4 bg-slate-200 rounded w-1/6"></div>
                    </div>
                    <div className="h-3 bg-slate-200 rounded w-1/4 mt-2"></div>
                    <div className="flex justify-end mt-3 space-x-2">
                      <div className="h-8 bg-slate-200 rounded w-16"></div>
                      <div className="h-8 bg-slate-200 rounded w-16"></div>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        ))}
      </section>
    );
  }

  const getActionIcon = (actionType: string) => {
    switch (actionType) {
      case "sign": return <AlertCircle className="text-warning-500 mr-1" size={16} />;
      case "review": return <AlertCircle className="text-error-500 mr-1" size={16} />;
      case "approve": return <CheckSquare className="text-slate-400 mr-1" size={16} />;
      default: return <FileText className="text-slate-400 mr-1" size={16} />;
    }
  };

  // View all documents handler
  const handleViewAll = () => {
    navigate('/document-repository');
  };

  return (
    <section className="mb-8 grid grid-cols-1 lg:grid-cols-2 gap-6">
      {/* Pending Action Documents */}
      <DocumentsCard title="Documents Requiring Action" viewAllHref="/document-repository?filter=pending">
        {pendingDocuments.length === 0 ? (
          <div className="text-center p-6 text-slate-500">
            <CheckSquare className="mx-auto h-8 w-8 text-slate-400 mb-2" />
            <p>No documents require your action</p>
          </div>
        ) : (
          pendingDocuments.map((doc) => (
            <div key={doc.id} className="border border-slate-200 rounded-md p-4 mb-3 hover:bg-slate-50">
              <div className="flex items-start justify-between">
                <div>
                  <div className="flex items-center">
                    {getActionIcon(doc.actionType)}
                    <h4 className="font-medium text-slate-800">{doc.title}</h4>
                  </div>
                  {doc.deadline && (
                    <p className="text-xs text-slate-500 mt-1">
                      Requires {doc.actionType} by {new Date(doc.deadline).toLocaleDateString()}
                    </p>
                  )}
                </div>
                <StatusBadge 
                  status={doc.actionType === "sign" ? "Signature Required" : 
                          doc.actionType === "review" ? "Urgent" : "Pending Approval"} 
                />
              </div>
              <div className="mt-3 flex justify-end space-x-2">
                <Button 
                  variant="outline"
                  size="sm"
                  className="px-3 py-1 h-auto text-xs" 
                  onClick={() => navigate(`/document-repository/${doc.id}`)}
                >
                  <Eye className="h-3 w-3 mr-1" />
                  View
                </Button>
                <Button 
                  size="sm"
                  className="px-3 py-1 h-auto text-xs"
                  onClick={() => navigate(`/document-repository/${doc.id}?action=${doc.actionType}`)}
                >
                  {doc.actionType === "sign" ? "Sign" : 
                   doc.actionType === "review" ? "Review" : "Approve"}
                </Button>
              </div>
            </div>
          ))
        )}
      </DocumentsCard>
      
      {/* Recent Documents */}
      <DocumentsCard title="Recently Updated Documents" viewAllHref="/document-repository">
        {recentDocuments.length === 0 ? (
          <div className="text-center p-6 text-slate-500">
            <FileText className="mx-auto h-8 w-8 text-slate-400 mb-2" />
            <p>No recent documents</p>
          </div>
        ) : (
          <table className="min-w-full divide-y divide-slate-200">
            <thead>
              <tr>
                <th className="px-3 py-2 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Document</th>
                <th className="px-3 py-2 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Updated</th>
                <th className="px-3 py-2 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">Status</th>
              </tr>
            </thead>
            <tbody className="divide-y divide-slate-200">
              {recentDocuments.map((doc) => (
                <tr key={doc.id} className="hover:bg-slate-50 cursor-pointer" onClick={() => navigate(`/document-repository/${doc.id}`)}>
                  <td className="px-3 py-3 whitespace-nowrap">
                    <div className="flex items-center">
                      <FileText className="text-slate-400 mr-2 text-lg" size={18} />
                      <span className="text-sm font-medium text-slate-700">{doc.title}</span>
                    </div>
                  </td>
                  <td className="px-3 py-3 whitespace-nowrap text-sm text-slate-500">
                    {formatDistanceToNow(new Date(doc.updatedAt), { addSuffix: true })}
                  </td>
                  <td className="px-3 py-3 whitespace-nowrap">
                    <StatusBadge status={doc.status} />
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        )}
      </DocumentsCard>
    </section>
  );
}

================
File: client/src/components/document/AuditTrailTable.tsx
================
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { CheckSquare, Info, User, Clock } from 'lucide-react';
import { AuditTrail } from '@/types';
import { format } from 'date-fns';

interface AuditTrailTableProps {
  auditTrail: AuditTrail[];
  isLoading: boolean;
}

export default function AuditTrailTable({ auditTrail, isLoading }: AuditTrailTableProps) {
  const getActionBadge = (action: string) => {
    let color = "";
    let label = action.replace(/_/g, ' ').toLowerCase();
    label = label.charAt(0).toUpperCase() + label.slice(1);
    
    switch (action) {
      case 'DOCUMENT_CREATED':
        return <Badge variant="outline" className="bg-primary-100 text-primary-800 border-transparent">Created</Badge>;
      case 'DOCUMENT_UPDATED':
        return <Badge variant="outline" className="bg-slate-100 text-slate-800 border-transparent">Updated</Badge>;
      case 'DOCUMENT_SIGNED':
        return <Badge variant="outline" className="bg-success-100 text-success-800 border-transparent">Signed</Badge>;
      case 'COMPLIANCE_DEADLINE_CREATED':
        return <Badge variant="outline" className="bg-warning-100 text-warning-800 border-transparent">Deadline Created</Badge>;
      case 'COMPLIANCE_DEADLINE_UPDATED':
        return <Badge variant="outline" className="bg-warning-100 text-warning-800 border-transparent">Deadline Updated</Badge>;
      default:
        return <Badge variant="outline">{label}</Badge>;
    }
  };

  if (isLoading) {
    return (
      <Card className="shadow">
        <CardHeader>
          <CardTitle>Audit Trail</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="animate-pulse space-y-4">
            <div className="h-10 bg-slate-200 rounded w-full"></div>
            <div className="h-20 bg-slate-200 rounded w-full"></div>
            <div className="h-20 bg-slate-200 rounded w-full"></div>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="shadow">
      <CardHeader>
        <CardTitle className="flex items-center">
          <CheckSquare className="mr-2 h-5 w-5" />
          Document Audit Trail
        </CardTitle>
      </CardHeader>
      <CardContent>
        {auditTrail.length > 0 ? (
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Timestamp</TableHead>
                <TableHead>User</TableHead>
                <TableHead>Action</TableHead>
                <TableHead>Details</TableHead>
                <TableHead>IP Address</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {auditTrail.map((entry) => (
                <TableRow key={entry.id}>
                  <TableCell className="whitespace-nowrap">
                    <div className="flex items-center">
                      <Clock className="h-3.5 w-3.5 text-slate-400 mr-1" />
                      {format(new Date(entry.timestamp), 'MMM d, yyyy h:mm a')}
                    </div>
                  </TableCell>
                  <TableCell>
                    <div className="flex items-center">
                      <User className="h-3.5 w-3.5 text-slate-400 mr-1" />
                      User ID: {entry.userId}
                    </div>
                  </TableCell>
                  <TableCell>{getActionBadge(entry.action)}</TableCell>
                  <TableCell>{entry.details || 'No details'}</TableCell>
                  <TableCell>{entry.ipAddress || 'Not recorded'}</TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        ) : (
          <div className="text-center p-6 border rounded-md bg-slate-50">
            <CheckSquare className="mx-auto h-12 w-12 text-slate-400 mb-3" />
            <h3 className="text-lg font-medium mb-1">No audit trail</h3>
            <p className="text-slate-500">No activity has been recorded for this document yet.</p>
          </div>
        )}
      </CardContent>
    </Card>
  );
}

================
File: client/src/components/document/DocumentDetail.tsx
================
import { Card, CardContent } from '@/components/ui/card';
import ReactMarkdown from 'react-markdown';

interface DocumentDetailProps {
  content: string;
}

export default function DocumentDetail({ content }: DocumentDetailProps) {
  return (
    <Card className="shadow">
      <CardContent className="p-6">
        <div className="prose max-w-none prose-slate prose-headings:font-semibold prose-h1:text-2xl prose-h2:text-xl prose-h3:text-lg prose-p:text-base prose-a:text-primary-600">
          <ReactMarkdown>{content}</ReactMarkdown>
        </div>
      </CardContent>
    </Card>
  );
}

================
File: client/src/components/document/DocumentEditor.tsx
================
import { useState } from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Save, FileText, Eye, X, Loader2 } from 'lucide-react';
import DocumentDetail from './DocumentDetail';

interface DocumentEditorProps {
  content: string;
  onSave: (content: string) => void;
  onCancel: () => void;
  isSaving: boolean;
}

export default function DocumentEditor({ 
  content, 
  onSave, 
  onCancel,
  isSaving
}: DocumentEditorProps) {
  const [editableContent, setEditableContent] = useState(content);
  const [activeTab, setActiveTab] = useState('edit');

  const handleContentChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    setEditableContent(e.target.value);
  };

  const handleSave = () => {
    onSave(editableContent);
  };

  return (
    <div className="space-y-4">
      <div className="flex justify-between items-center">
        <Tabs value={activeTab} onValueChange={setActiveTab}>
          <TabsList>
            <TabsTrigger value="edit">
              <FileText className="h-4 w-4 mr-1" />
              Edit
            </TabsTrigger>
            <TabsTrigger value="preview">
              <Eye className="h-4 w-4 mr-1" />
              Preview
            </TabsTrigger>
          </TabsList>
        </Tabs>
        
        <div className="flex space-x-2">
          <Button
            variant="outline"
            onClick={onCancel}
            disabled={isSaving}
          >
            <X className="h-4 w-4 mr-1" />
            Cancel
          </Button>
          <Button
            onClick={handleSave}
            disabled={isSaving}
          >
            {isSaving ? (
              <>
                <Loader2 className="h-4 w-4 mr-1 animate-spin" />
                Saving...
              </>
            ) : (
              <>
                <Save className="h-4 w-4 mr-1" />
                Save
              </>
            )}
          </Button>
        </div>
      </div>
      
      <Card className="shadow">
        <CardContent className="p-0">
          <TabsContent value="edit" className="m-0">
            <Textarea
              value={editableContent}
              onChange={handleContentChange}
              className="w-full min-h-[500px] font-mono text-sm p-4 border-0 focus-visible:ring-0 resize-none"
              placeholder="Enter document content here..."
            />
          </TabsContent>
          
          <TabsContent value="preview" className="m-0">
            <div className="p-6">
              <DocumentDetail content={editableContent} />
            </div>
          </TabsContent>
        </CardContent>
      </Card>
    </div>
  );
}

================
File: client/src/components/document/DocumentList.tsx
================
import { useLocation } from 'wouter';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent } from '@/components/ui/card';
import { Document } from '@/types';
import { formatDistanceToNow } from 'date-fns';
import { FileText, Eye, Calendar, Clock, CheckCircle, AlertTriangle, Archive } from 'lucide-react';
import { Skeleton } from '@/components/ui/skeleton';

interface DocumentListProps {
  documents: Document[];
  isLoading: boolean;
  error?: string;
}

const getStatusIcon = (status: string) => {
  switch (status) {
    case 'draft':
      return <FileText className="text-slate-400" size={16} />;
    case 'pending_approval':
      return <Clock className="text-warning-500" size={16} />;
    case 'active':
      return <CheckCircle className="text-success-500" size={16} />;
    case 'expired':
      return <AlertTriangle className="text-error-500" size={16} />;
    case 'archived':
      return <Archive className="text-slate-500" size={16} />;
    default:
      return <FileText className="text-slate-400" size={16} />;
  }
};

const getStatusBadge = (status: string) => {
  let variant = '';
  let label = status.replace('_', ' ');
  
  switch (status) {
    case 'draft':
      return <Badge variant="outline" className="bg-slate-100 text-slate-800">Draft</Badge>;
    case 'pending_approval':
      return <Badge variant="outline" className="bg-warning-100 text-warning-800">Pending Approval</Badge>;
    case 'active':
      return <Badge variant="outline" className="bg-success-100 text-success-800">Active</Badge>;
    case 'expired':
      return <Badge variant="outline" className="bg-error-100 text-error-800">Expired</Badge>;
    case 'archived':
      return <Badge variant="outline" className="bg-slate-200 text-slate-800">Archived</Badge>;
    default:
      return <Badge variant="outline">{label}</Badge>;
  }
};

export default function DocumentList({ documents, isLoading, error }: DocumentListProps) {
  const [, navigate] = useLocation();

  if (isLoading) {
    return (
      <div className="space-y-4">
        {[...Array(5)].map((_, index) => (
          <Card key={index} className="overflow-hidden">
            <CardContent className="p-0">
              <div className="p-4 flex items-center">
                <Skeleton className="h-10 w-10 rounded-md mr-4" />
                <div className="space-y-2 flex-1">
                  <Skeleton className="h-5 w-1/3" />
                  <Skeleton className="h-4 w-1/4" />
                </div>
                <Skeleton className="h-8 w-24 mr-2" />
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    );
  }

  if (error) {
    return (
      <div className="p-8 text-center">
        <AlertTriangle className="mx-auto h-12 w-12 text-error-500 mb-4" />
        <h3 className="text-lg font-medium mb-2">Error loading documents</h3>
        <p className="text-slate-600 mb-4">{error}</p>
        <Button onClick={() => window.location.reload()}>
          Try Again
        </Button>
      </div>
    );
  }

  if (documents.length === 0) {
    return (
      <div className="text-center p-12 border rounded-lg bg-white">
        <FileText className="mx-auto h-12 w-12 text-slate-400 mb-4" />
        <h3 className="text-lg font-medium mb-2">No documents found</h3>
        <p className="text-slate-600 mb-6">Start creating compliance documents to see them here.</p>
      </div>
    );
  }

  return (
    <div className="space-y-4">
      {documents.map((document) => (
        <Card 
          key={document.id} 
          className="overflow-hidden hover:shadow-md transition-shadow cursor-pointer"
          onClick={() => navigate(`/document-repository/${document.id}`)}
        >
          <CardContent className="p-0">
            <div className="p-4">
              <div className="flex items-center justify-between">
                <div className="flex items-center">
                  <div className="h-10 w-10 rounded-md bg-primary-50 text-primary-600 flex items-center justify-center mr-4">
                    <FileText size={20} />
                  </div>
                  <div>
                    <h3 className="font-medium">{document.title}</h3>
                    <div className="flex items-center text-sm text-slate-500 mt-1">
                      <span className="flex items-center">
                        <Clock className="h-3.5 w-3.5 mr-1" />
                        Updated {formatDistanceToNow(new Date(document.updatedAt), { addSuffix: true })}
                      </span>
                      
                      {document.expiresAt && (
                        <span className="flex items-center ml-4">
                          <Calendar className="h-3.5 w-3.5 mr-1" />
                          Expires {formatDistanceToNow(new Date(document.expiresAt), { addSuffix: true })}
                        </span>
                      )}
                    </div>
                  </div>
                </div>
                
                <div className="flex items-center space-x-3">
                  {getStatusBadge(document.status)}
                  <Button variant="ghost" size="sm" className="h-8 w-8 p-0" onClick={(e) => {
                    e.stopPropagation();
                    navigate(`/document-repository/${document.id}`);
                  }}>
                    <Eye className="h-4 w-4" />
                    <span className="sr-only">View</span>
                  </Button>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      ))}
    </div>
  );
}

================
File: client/src/components/document/DocumentVersionHistory.tsx
================
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { History, FileText, Clock, User, Eye } from 'lucide-react';
import { DocumentVersion } from '@/types';
import { format } from 'date-fns';
import { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import DocumentDetail from './DocumentDetail';

interface DocumentVersionHistoryProps {
  versions: DocumentVersion[];
  isLoading: boolean;
}

export default function DocumentVersionHistory({ versions, isLoading }: DocumentVersionHistoryProps) {
  const [selectedVersion, setSelectedVersion] = useState<DocumentVersion | null>(null);
  
  const handleViewVersion = (version: DocumentVersion) => {
    setSelectedVersion(version);
  };
  
  const closeVersionDialog = () => {
    setSelectedVersion(null);
  };

  if (isLoading) {
    return (
      <Card className="shadow">
        <CardHeader>
          <CardTitle>Version History</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="animate-pulse space-y-4">
            <div className="h-10 bg-slate-200 rounded w-1/3"></div>
            <div className="h-20 bg-slate-200 rounded w-full"></div>
            <div className="h-20 bg-slate-200 rounded w-full"></div>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <>
      <Card className="shadow">
        <CardHeader>
          <CardTitle className="flex items-center">
            <History className="mr-2 h-5 w-5" />
            Document Version History
          </CardTitle>
        </CardHeader>
        <CardContent>
          {versions.length > 0 ? (
            <div className="space-y-4">
              {versions.map((version) => (
                <div 
                  key={version.id}
                  className="border rounded-md p-4 hover:bg-slate-50"
                >
                  <div className="flex items-center justify-between">
                    <div className="flex items-center">
                      <div className="h-10 w-10 rounded-full bg-primary-100 text-primary-600 flex items-center justify-center mr-3">
                        <FileText size={18} />
                      </div>
                      <div>
                        <h4 className="font-medium">Version {version.version}</h4>
                        <div className="flex items-center text-sm text-slate-500 mt-1">
                          <Clock className="h-3.5 w-3.5 mr-1" />
                          {format(new Date(version.createdAt), 'MMM d, yyyy h:mm a')}
                          
                          <span className="mx-2">•</span>
                          
                          <User className="h-3.5 w-3.5 mr-1" />
                          User ID: {version.createdById}
                        </div>
                      </div>
                    </div>
                    <Button 
                      variant="outline" 
                      size="sm"
                      onClick={() => handleViewVersion(version)}
                    >
                      <Eye className="h-3.5 w-3.5 mr-1" />
                      View
                    </Button>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="text-center p-6 border rounded-md bg-slate-50">
              <History className="mx-auto h-12 w-12 text-slate-400 mb-3" />
              <h3 className="text-lg font-medium mb-1">No version history</h3>
              <p className="text-slate-500">This document doesn't have any version history yet.</p>
            </div>
          )}
        </CardContent>
      </Card>

      {/* Version Content Dialog */}
      {selectedVersion && (
        <Dialog open={!!selectedVersion} onOpenChange={closeVersionDialog}>
          <DialogContent className="max-w-4xl">
            <DialogHeader>
              <DialogTitle>Version {selectedVersion.version}</DialogTitle>
            </DialogHeader>
            <div className="text-sm text-slate-500 mb-4">
              Created on {format(new Date(selectedVersion.createdAt), 'MMM d, yyyy h:mm a')} 
              by User ID: {selectedVersion.createdById}
            </div>
            <DocumentDetail content={selectedVersion.content} />
          </DialogContent>
        </Dialog>
      )}
    </>
  );
}

================
File: client/src/components/document/FileManagerPanel.tsx
================
import { useState } from 'react';
import { useQuery, useMutation } from '@tanstack/react-query';
import { Button } from '@/components/ui/button';
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from '@/components/ui/table';
import { queryClient } from '@/lib/queryClient';

interface FileItem { name: string; key: string; }
interface FileManagerPanelProps { documentId: number; }

export default function FileManagerPanel({ documentId }: FileManagerPanelProps) {
  const [selectedFile, setSelectedFile] = useState<File | null>(null);

  const {
    data: files = [],
    isLoading,
    error,
  } = useQuery<FileItem[], Error>({
    queryKey: [`/api/documents/${documentId}/files`],
    queryFn: async (): Promise<FileItem[]> => {
      const res = await fetch(`/api/documents/${documentId}/files`, { credentials: 'include' });
      if (!res.ok) throw new Error('Failed to fetch files');
      return res.json();
    },
  });

  const uploadMutation = useMutation<FileItem, Error, File>({
    mutationFn: async (file: File): Promise<FileItem> => {
      try {
        console.log(`Preparing to upload file: ${file.name} (${file.size} bytes) for document ${documentId}`);
        
        const formData = new FormData();
        formData.append('file', file);
        
        const res = await fetch(`/api/documents/${documentId}/files`, {
          method: 'POST',
          body: formData,
          credentials: 'include',
        });
        
        if (!res.ok) {
          const errorText = await res.text().catch(() => "Unknown error");
          console.error(`Upload failed for file ${file.name}:`, errorText);
          throw new Error(`Upload failed: ${res.status} ${res.statusText}`);
        }
        
        const result = await res.json();
        console.log(`File ${file.name} uploaded successfully:`, result);
        return result;
      } catch (error) {
        console.error("Error in file upload process:", error);
        throw error;
      }
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: [`/api/documents/${documentId}/files`] });
      setSelectedFile(null);
    },
  });

  const deleteMutation = useMutation<void, Error, string>({
    mutationFn: async (fileName: string): Promise<void> => {
      const res = await fetch(
        `/api/documents/${documentId}/files/${fileName}`,
        { method: 'DELETE', credentials: 'include' }
      );
      if (!res.ok) throw new Error('Deletion failed');
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: [`/api/documents/${documentId}/files`] });
    },
  });

  return (
    <div className="space-y-4">
      <div className="flex items-center space-x-2">
        <input
          title="Upload file"
          placeholder="Upload file"
          type="file"
          onChange={e => e.target.files && setSelectedFile(e.target.files[0])}
          className="text-sm text-slate-600"
        />
        <Button
          onClick={() => selectedFile && uploadMutation.mutate(selectedFile)}
          disabled={!selectedFile || uploadMutation.status === 'pending'}
        >
          {uploadMutation.status === 'pending' ? 'Uploading...' : 'Upload'}
        </Button>
      </div>
      {error && <p className="text-red-600">Error: {(error as Error).message}</p>}
      {isLoading ? (
        <p>Loading files...</p>
      ) : files.length > 0 ? (
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Name</TableHead>
              <TableHead>Actions</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {files.map(file => (
              <TableRow key={file.key}>
                <TableCell>{file.name}</TableCell>
                <TableCell className="flex space-x-2">
                  <Button variant="outline" size="sm" asChild>
                    <a
                      href={`/api/documents/${documentId}/files/${file.name}`}
                      download
                    >
                      Download
                    </a>
                  </Button>
                  <Button
                    variant="destructive"
                    size="sm"
                    onClick={() => deleteMutation.mutate(file.name)}
                    disabled={deleteMutation.status === 'pending'}
                  >
                    Delete
                  </Button>
                </TableCell>
              </TableRow>
            ))}
          </TableBody>
        </Table>
      ) : (
        <p className="text-slate-500">No files uploaded.</p>
      )}
    </div>
  );
}

================
File: client/src/components/document/SignaturePanel.tsx
================
import { useState } from 'react';
import { useMutation } from '@tanstack/react-query';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Signature } from '@/types';
import { apiRequest, queryClient } from '@/lib/queryClient';
import { useToast } from '@/hooks/use-toast';
import { PenTool, User, Clock, Info, CheckCircle, Loader2 } from 'lucide-react';
import { format } from 'date-fns';
import SignatureCanvas from 'react-signature-canvas';
import { useAuth } from '@/hooks/use-auth';

interface SignaturePanelProps {
  documentId: number;
  signatures: Signature[];
  isLoading: boolean;
  documentStatus: string;
}

export default function SignaturePanel({ 
  documentId, 
  signatures, 
  isLoading,
  documentStatus
}: SignaturePanelProps) {
  const [sigCanvas, setSigCanvas] = useState<SignatureCanvas | null>(null);
  const { toast } = useToast();
  const { user } = useAuth();
  
  // State for typed signature
  const [typedSignature, setTypedSignature] = useState('');
  const [signatureType, setSignatureType] = useState<'draw' | 'type'>('draw');

  // Check if user has already signed
  const hasUserSigned = signatures.some(sig => sig.userId === user?.id);

  // Signature mutation
  const signatureMutation = useMutation({
    mutationFn: async (signature: string) => {
      return await apiRequest(
        'POST',
        `/api/documents/${documentId}/signatures`,
        { signature, metadata: { type: signatureType } }
      );
    },
    onSuccess: () => {
      // Clear signature
      if (sigCanvas) sigCanvas.clear();
      setTypedSignature('');
      
      // Refetch signatures and document
      queryClient.invalidateQueries({ queryKey: [`/api/documents/${documentId}/signatures`] });
      queryClient.invalidateQueries({ queryKey: [`/api/documents/${documentId}`] });
      
      toast({
        title: 'Document signed',
        description: 'Your signature has been successfully added to the document. The document will now be marked as active.',
      });
    },
    onError: (error) => {
      toast({
        title: 'Signature failed',
        description: error.message || 'Failed to sign document',
        variant: 'destructive',
      });
    }
  });

  const handleSignDocument = () => {
    let signature = '';
    
    if (signatureType === 'draw') {
      if (!sigCanvas?.isEmpty()) {
        signature = sigCanvas?.toDataURL() || '';
      } else {
        toast({
          title: 'Signature required',
          description: 'Please draw your signature',
          variant: 'destructive',
        });
        return;
      }
    } else {
      if (typedSignature.trim()) {
        signature = typedSignature;
      } else {
        toast({
          title: 'Signature required',
          description: 'Please type your signature',
          variant: 'destructive',
        });
        return;
      }
    }
    
    signatureMutation.mutate(signature);
  };

  const handleClearSignature = () => {
    if (signatureType === 'draw') {
      sigCanvas?.clear();
    } else {
      setTypedSignature('');
    }
  };

  if (isLoading) {
    return (
      <Card className="shadow">
        <CardHeader>
          <CardTitle>Signatures</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="animate-pulse space-y-4">
            <div className="h-10 bg-slate-200 rounded w-1/3"></div>
            <div className="h-20 bg-slate-200 rounded w-full"></div>
            <div className="h-10 bg-slate-200 rounded w-1/2"></div>
          </div>
        </CardContent>
      </Card>
    );
  }

  return (
    <Card className="shadow">
      <CardHeader>
        <CardTitle className="flex items-center">
          <PenTool className="mr-2 h-5 w-5" />
          Document Signatures
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* Signature List */}
        {signatures.length > 0 ? (
          <div className="space-y-4">
            <h3 className="text-lg font-medium">Signatures ({signatures.length})</h3>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {signatures.map((signature) => (
                <div 
                  key={signature.id} 
                  className="border rounded-md p-4 bg-slate-50"
                >
                  <div className="flex items-start justify-between">
                    <div>
                      <p className="font-medium mb-1">User ID: {signature.userId}</p>
                      <div className="flex items-center text-sm text-slate-500">
                        <Clock className="h-3.5 w-3.5 mr-1" />
                        {format(new Date(signature.createdAt), 'MMM d, yyyy h:mm a')}
                      </div>
                      {signature.ipAddress && (
                        <div className="flex items-center text-sm text-slate-500 mt-1">
                          <Info className="h-3.5 w-3.5 mr-1" />
                          IP: {signature.ipAddress}
                        </div>
                      )}
                    </div>
                    <div className="flex items-center justify-center h-8 w-8 rounded-full bg-success-100 text-success-600">
                      <CheckCircle size={16} />
                    </div>
                  </div>
                  
                  <div className="mt-3 p-2 bg-white border rounded-md">
                    {signature.metadata?.type === 'type' ? (
                      <p className="font-medium text-lg text-slate-700 italic">{signature.signature}</p>
                    ) : (
                      <img 
                        src={signature.signature}
                        alt="Signature"
                        className="max-h-16"
                      />
                    )}
                  </div>
                </div>
              ))}
            </div>
          </div>
        ) : (
          <div className="text-center p-6 border rounded-md bg-slate-50">
            <PenTool className="mx-auto h-12 w-12 text-slate-400 mb-3" />
            <h3 className="text-lg font-medium mb-1">No signatures yet</h3>
            <p className="text-slate-500 mb-4">This document hasn't been signed yet.</p>
          </div>
        )}

        {/* Sign Document Section */}
        {!hasUserSigned && documentStatus !== 'draft' && documentStatus !== 'expired' && documentStatus !== 'archived' && (
          <div className="mt-6 border-t pt-6">
            <h3 className="text-lg font-medium mb-4">Sign Document</h3>
            
            <div className="flex space-x-4 mb-4">
              <Button
                variant={signatureType === 'draw' ? "default" : "outline"}
                onClick={() => setSignatureType('draw')}
              >
                Draw Signature
              </Button>
              <Button
                variant={signatureType === 'type' ? "default" : "outline"}
                onClick={() => setSignatureType('type')}
              >
                Type Signature
              </Button>
            </div>
            
            {signatureType === 'draw' ? (
              <div className="mb-4">
                <div className="border-2 border-slate-300 rounded-md bg-white mb-3">
                  <SignatureCanvas
                    ref={(ref) => setSigCanvas(ref)}
                    penColor="black"
                    canvasProps={{
                      className: "w-full h-40"
                    }}
                  />
                </div>
                <p className="text-sm text-slate-500 mb-4">Draw your signature above</p>
              </div>
            ) : (
              <div className="mb-4">
                <Label htmlFor="typedSignature">Enter your signature</Label>
                <Input
                  id="typedSignature"
                  value={typedSignature}
                  onChange={(e) => setTypedSignature(e.target.value)}
                  placeholder="Type your full name"
                  className="font-medium text-slate-800 italic text-lg h-12 mt-1"
                />
                <p className="text-sm text-slate-500 mt-1 mb-4">
                  Type your full legal name as your electronic signature
                </p>
              </div>
            )}
            
            <div className="flex space-x-2">
              <Button 
                variant="outline" 
                onClick={handleClearSignature}
                disabled={signatureMutation.isPending}
              >
                Clear
              </Button>
              <Button 
                onClick={handleSignDocument}
                disabled={signatureMutation.isPending}
              >
                {signatureMutation.isPending ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Signing...
                  </>
                ) : (
                  'Sign Document'
                )}
              </Button>
            </div>
          </div>
        )}
        
        {/* Message for draft documents */}
        {documentStatus === 'draft' && (
          <div className="mt-6 border-t pt-6">
            <div className="bg-blue-50 border border-blue-200 rounded-md p-4">
              <div className="flex">
                <Info className="h-5 w-5 text-blue-400 mt-0.5 mr-3" />
                <div>
                  <h3 className="text-sm font-medium text-blue-800">Document needs to be submitted first</h3>
                  <p className="text-sm text-blue-700 mt-1">
                    This document is still in draft status. To collect signatures, it must first be 
                    submitted for signature approval. Go to the "Details" tab and click "Submit for Signature".
                  </p>
                </div>
              </div>
            </div>
          </div>
        )}
      </CardContent>
    </Card>
  );
}

================
File: client/src/components/documents/ComplianceWorkspace.tsx
================
"use client";

import React, { useState, useRef, useEffect, useCallback } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { useLocation } from 'wouter';
import { 
  FolderPlus, 
  FileText, 
  ChevronRight, 
  ChevronDown, 
  MoreHorizontal,
  Search,
  Filter,
  Grid3X3,
  List,
  Star,
  Share2,
  Download,
  Trash2,
  Edit3,
  Eye,
  Clock,
  User,
  Tag,
  Plus,
  Upload
} from "lucide-react";
import { UserDocument, Document } from '@/types';
import { apiRequest } from '@/lib/queryClient';
import { useToast } from '@/hooks/use-toast';
import { Button } from '@/components/ui/button';
import DocumentViewer from '@/components/documents/DocumentViewer';
import FileUploader from '@/components/documents/FileUploader';
import DocumentMoreOptions from '@/components/documents/DocumentMoreOptions';
import UserDocumentEditModal from '@/components/documents/UserDocumentEditModal';
import ShareModal from '@/components/documents/ShareModal';
import FolderManager from '@/components/documents/FolderManager';

interface FileNode {
  id: string;
  name: string;
  type: "folder" | "file";
  children?: FileNode[];
  size?: string;
  modified?: string;
  status?: "draft" | "review" | "approved" | "archived";
  tags?: string[];
  starred?: boolean;
  document?: UserDocument | Document;
  folderId?: string; // For managed folders
  documentCount?: number; // For managed folders
  isManaged?: boolean; // For managed folders
}

interface GridItemProps {
  node: FileNode;
  onSelect: (node: FileNode) => void;
  onToggle?: (id: string) => void;
  onStar?: (node: FileNode) => void;
  onDelete?: (node: FileNode) => void;
  onView?: (node: FileNode) => void;
  onEdit?: (node: FileNode) => void;
  onShare?: (node: FileNode) => void;
  onDownload?: (node: FileNode) => void;
  onChangeStatus?: (node: FileNode, status: string) => void;
  onDuplicate?: (node: FileNode) => void;
  onMoveToFolder?: (documentId: string, folderId: string, sourceNodeId: string) => void;
  isSelected: boolean;
  level?: number;
}

const GridItem: React.FC<GridItemProps> = ({ 
  node, 
  onSelect, 
  onToggle, 
  onStar,
  onDelete,
  onView,
  onEdit,
  onShare,
  onDownload,
  onChangeStatus,
  onDuplicate,
  onMoveToFolder,
  isSelected, 
  level = 0 
}) => {
  const [isExpanded, setIsExpanded] = useState(false);
  const [showActions, setShowActions] = useState(false);
  const [isDragOver, setIsDragOver] = useState(false);

  const handleToggle = () => {
    if (node.type === "folder") {
      setIsExpanded(!isExpanded);
      onToggle?.(node.id);
    }
  };

  const getStatusColor = (status?: string) => {
    switch (status) {
      case "draft": return "bg-yellow-500/20 text-yellow-300 border-yellow-500/30";
      case "review": return "bg-blue-500/20 text-blue-300 border-blue-500/30";
      case "approved": return "bg-green-500/20 text-green-300 border-green-500/30";
      case "archived": return "bg-gray-500/20 text-gray-300 border-gray-500/30";
      default: return "bg-gray-500/20 text-gray-300 border-gray-500/30";
    }
  };

  const formatFileSize = (bytes: number) => {
    const sizes = ['B', 'KB', 'MB', 'GB'];
    if (bytes === 0) return '0 B';
    const i = Math.floor(Math.log(bytes) / Math.log(1024));
    return Math.round(bytes / Math.pow(1024, i)) + ' ' + sizes[i];
  };

  const handleDragStart = (e: React.DragEvent) => {
    e.stopPropagation();
    
    if (node.type === "file" && node.document) {
      const dragData = {
        type: 'document',
        documentId: node.document.id,
        documentType: 'type' in node.document ? node.document.type : 'user',
        currentCategory: 'category' in node.document ? node.document.category : 'Compliance',
        currentFolderId: 'folderId' in node.document ? node.document.folderId : null,
        sourceNodeId: node.id
      };
      e.dataTransfer.setData('application/json', JSON.stringify(dragData));
      e.dataTransfer.effectAllowed = 'move';
      
      // Add visual feedback to the dragged element
      const dragImage = e.currentTarget.cloneNode(true) as HTMLElement;
      dragImage.style.transform = 'rotate(5deg)';
      dragImage.style.opacity = '0.8';
      e.dataTransfer.setDragImage(dragImage, 0, 0);
    } else if (node.type === "folder") {
      const dragData = {
        type: 'folder',
        folderId: node.folderId || node.id,
        folderName: node.name,
        sourceNodeId: node.id,
        isManaged: node.isManaged || false,
        documentCount: node.documentCount || 0
      };
      e.dataTransfer.setData('application/json', JSON.stringify(dragData));
      e.dataTransfer.effectAllowed = 'move';
      
      // Add visual feedback to the dragged folder
      const dragImage = e.currentTarget.cloneNode(true) as HTMLElement;
      dragImage.style.transform = 'rotate(3deg)';
      dragImage.style.opacity = '0.7';
      e.dataTransfer.setDragImage(dragImage, 0, 0);
    }
  };

  const handleDragOver = (e: React.DragEvent) => {
    if (node.type === "folder") {
      e.preventDefault();
      e.dataTransfer.dropEffect = 'move';
      setIsDragOver(true);
    }
  };

  const handleDragLeave = (e: React.DragEvent) => {
    if (node.type === "folder") {
      // Only clear drag over if we're actually leaving the folder
      const rect = (e.currentTarget as HTMLElement).getBoundingClientRect();
      if (
        e.clientX < rect.left ||
        e.clientX > rect.right ||
        e.clientY < rect.top ||
        e.clientY > rect.bottom
      ) {
        setIsDragOver(false);
      }
    }
  };

  const handleDrop = (e: React.DragEvent) => {
    if (node.type === "folder") {
      e.preventDefault();
      e.stopPropagation();
      setIsDragOver(false);
      
      try {
        const dragData = JSON.parse(e.dataTransfer.getData('application/json'));
        
        if (dragData.type === 'document' && dragData.documentType === 'user') {
          // Move document to folder - use the actual folder ID for managed folders
          const targetFolderId = node.isManaged ? node.folderId : node.id;
          if (onMoveToFolder && targetFolderId) {
            onMoveToFolder(dragData.documentId, targetFolderId, dragData.sourceNodeId);
          }
        } else if (dragData.type === 'folder' && dragData.sourceNodeId !== node.id) {
          // Only allow moving managed folders for now
          if (dragData.isManaged && node.isManaged) {
            // Move folder into this folder (create subfolder relationship)
            if (onMoveToFolder) {
              onMoveToFolder(dragData.folderId, node.folderId || node.id, dragData.sourceNodeId);
            }
          }
        }
      } catch (error) {
        console.error('Error handling drop:', error);
      }
    }
  };

  return (
    <motion.div
      layout
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      className="relative group"
    >
      <div
        draggable={true}
        onDragStart={handleDragStart}
        onDragOver={handleDragOver}
        onDragLeave={handleDragLeave}
        onDrop={handleDrop}
        className={`
          relative p-4 rounded-xl border transition-all duration-300 cursor-pointer
          ${isSelected 
            ? "bg-blue-500/20 border-blue-500/50 shadow-lg shadow-blue-500/20" 
            : "bg-background/50 border-border hover:border-blue-400/50 hover:bg-blue-500/10"
          }
          ${isDragOver && node.type === "folder" 
            ? "border-green-400 bg-green-500/10 scale-105" 
            : ""
          }
          backdrop-blur-sm
          cursor-move
        `}
        onClick={(e) => {
          // Only handle click if it's not a drag operation
          if (e.detail > 0) { // detail > 0 means it's a real click, not from drag
            if (node.type === "folder") {
              handleToggle();
            }
            onSelect(node);
          }
        }}
        onMouseEnter={() => setShowActions(true)}
        onMouseLeave={() => setShowActions(false)}
      >
        <motion.div
          whileHover={{ scale: 1.02, y: -2 }}
          whileTap={{ scale: 0.98 }}
        >
        {/* Header */}
        <div className="flex items-start justify-between mb-3">
          <div className="flex items-center gap-2">
            {node.type === "folder" ? (
              <motion.div
                className="flex items-center gap-1 text-blue-400 cursor-pointer"
              >
                <motion.div
                  animate={{ rotate: isExpanded ? 90 : 0 }}
                  transition={{ duration: 0.2 }}
                >
                  <ChevronRight className="w-4 h-4" />
                </motion.div>
                <FolderPlus className="w-5 h-5" />
              </motion.div>
            ) : (
              <FileText className="w-5 h-5 text-gray-400" />
            )}
            {node.starred && (
              <Star className="w-4 h-4 text-yellow-400 fill-current" />
            )}
          </div>

          <AnimatePresence>
            {showActions && (
              <motion.div
                initial={{ opacity: 0, scale: 0.8 }}
                animate={{ opacity: 1, scale: 1 }}
                exit={{ opacity: 0, scale: 0.8 }}
                className="flex items-center gap-1 pointer-events-auto"
                onClick={(e) => e.stopPropagation()}
              >
                <button 
                  className="p-1 rounded-md hover:bg-white/10 transition-colors"
                  onClick={(e) => {
                    e.stopPropagation();
                    if (onView) {
                      onView(node);
                    }
                  }}
                  title="View document"
                  aria-label="View document"
                >
                  <Eye className="w-4 h-4 text-gray-400" />
                </button>
                <button 
                  className="p-1 rounded-md hover:bg-white/10 transition-colors"
                  onClick={(e) => {
                    e.stopPropagation();
                    onStar?.(node);
                  }}
                  title={node.starred ? "Remove from favorites" : "Add to favorites"}
                  aria-label={node.starred ? "Remove from favorites" : "Add to favorites"}
                >
                  <Star className={`w-4 h-4 ${node.starred ? 'text-yellow-400 fill-current' : 'text-gray-400'}`} />
                </button>
                {node.type === "file" && onDelete && (
                  <button 
                    className="p-1 rounded-md hover:bg-red-500/20 transition-colors"
                    onClick={(e) => {
                      e.stopPropagation();
                      onDelete(node);
                    }}
                    title="Delete document"
                    aria-label="Delete document"
                  >
                    <Trash2 className="w-4 h-4 text-red-400" />
                  </button>
                )}
                {node.type === "file" && node.document && (
                  <DocumentMoreOptions
                    document={node.document}
                    onEdit={onEdit ? () => onEdit(node) : undefined}
                    onShare={onShare ? () => onShare(node) : undefined}
                    onDownload={onDownload ? () => onDownload(node) : undefined}
                    onChangeStatus={onChangeStatus ? (status) => onChangeStatus(node, status) : undefined}
                    onDuplicate={onDuplicate ? () => onDuplicate(node) : undefined}
                  />
                )}
              </motion.div>
            )}
          </AnimatePresence>
        </div>

        {/* Title */}
        <h3 className="font-medium text-foreground mb-2 line-clamp-2">
          {node.name}
        </h3>

        {/* Status Badge */}
        {node.status && (
          <div className={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium border mb-2 ${getStatusColor(node.status)}`}>
            {node.status}
          </div>
        )}

        {/* Tags */}
        {node.tags && node.tags.length > 0 && (
          <div className="flex flex-wrap gap-1 mb-2">
            {node.tags.slice(0, 3).map((tag, index) => (
              <span
                key={index}
                className="inline-flex items-center gap-1 px-2 py-1 bg-gray-500/20 text-gray-300 rounded-md text-xs"
              >
                <Tag className="w-3 h-3" />
                {tag}
              </span>
            ))}
            {node.tags.length > 3 && (
              <span className="text-xs text-gray-400">+{node.tags.length - 3}</span>
            )}
          </div>
        )}

        {/* Footer */}
        <div className="flex items-center justify-between text-xs text-gray-400 mt-3">
          <div className="flex items-center gap-1">
            <Clock className="w-3 h-3" />
            {node.modified || "2 days ago"}
          </div>
          {node.size && (
            <div className="flex items-center gap-1">
              <span>{node.size}</span>
            </div>
          )}
        </div>

        {/* Children count for folders */}
        {node.type === "folder" && (
          <div className="absolute top-2 right-2 flex items-center gap-1">
            {node.isManaged && (
              <div className="bg-green-500/20 text-green-300 text-xs px-2 py-1 rounded-full border border-green-500/30">
                Managed
              </div>
            )}
            {(node.children || node.documentCount !== undefined) && (
              <div className="bg-blue-500/20 text-blue-300 text-xs px-2 py-1 rounded-full">
                {node.documentCount !== undefined ? node.documentCount : (node.children?.length || 0)}
              </div>
            )}
          </div>
        )}

        {/* Drop zone indicator for folders */}
        {node.type === "folder" && isDragOver && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            className="absolute inset-0 bg-green-500/20 border-2 border-dashed border-green-400 rounded-xl flex items-center justify-center backdrop-blur-sm"
          >
            <div className="text-green-400 font-semibold text-sm flex items-center gap-2">
              <span>📂</span>
              Drop document here
            </div>
          </motion.div>
        )}
      </motion.div>
      </div>

      {/* Expanded Children */}
      <AnimatePresence>
        {isExpanded && node.children && (
          <motion.div
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: "auto" }}
            exit={{ opacity: 0, height: 0 }}
            className="ml-6 mt-2 space-y-2 border-l border-border/50 pl-4"
          >
            {node.children.map((child) => (
              <GridItem
                key={child.id}
                node={child}
                onSelect={onSelect}
                onToggle={onToggle}
                onStar={onStar}
                onDelete={onDelete}
                onView={onView}
                onEdit={onEdit}
                onShare={onShare}
                onDownload={onDownload}
                onChangeStatus={onChangeStatus}
                onDuplicate={onDuplicate}
                onMoveToFolder={onMoveToFolder}
                isSelected={isSelected}
                level={level + 1}
              />
            ))}
          </motion.div>
        )}
      </AnimatePresence>
    </motion.div>
  );
};

const ComplianceWorkspace: React.FC = () => {
  const [selectedNode, setSelectedNode] = useState<FileNode | null>(null);
  const [searchQuery, setSearchQuery] = useState("");
  const [viewMode, setViewMode] = useState<"grid" | "list">("grid");
  const [filterStatus, setFilterStatus] = useState<string>("all");
  const [viewingDocument, setViewingDocument] = useState<UserDocument | null>(null);
  const [editingDocument, setEditingDocument] = useState<UserDocument | null>(null);
  const [sharingDocument, setSharingDocument] = useState<UserDocument | Document | null>(null);
  const [isUploadMode, setIsUploadMode] = useState(false);
  const [showFolderManager, setShowFolderManager] = useState(false);
  const [starredComplianceDocs, setStarredComplianceDocs] = useState<Set<number>>(new Set());
  const [isMainAreaDragOver, setIsMainAreaDragOver] = useState(false);
  const queryClient = useQueryClient();
  const { toast } = useToast();
  const [location, setLocation] = useLocation();

  // Load starred compliance documents from localStorage on mount
  useEffect(() => {
    const savedStarred = localStorage.getItem('starredComplianceDocs');
    if (savedStarred) {
      try {
        const parsed = JSON.parse(savedStarred);
        setStarredComplianceDocs(new Set(parsed));
      } catch (error) {
        console.error('Error loading starred documents:', error);
      }
    }
  }, []);

  // Fetch user documents
  const { data: userDocuments, isLoading: isLoadingUserDocs } = useQuery<UserDocument[]>({
    queryKey: ['/api/user-documents'],
  });

  // Fetch compliance documents
  const { data: complianceDocuments, isLoading: isLoadingComplianceDocs } = useQuery<Document[]>({
    queryKey: ['/api/documents'],
  });

  // Fetch user document folders
  const { data: folders, isLoading: isLoadingFolders } = useQuery<any[]>({
    queryKey: ['/api/user-documents/folders'],
  });

  // Star document mutation
  const starDocumentMutation = useMutation({
    mutationFn: async ({ documentId, starred }: { documentId: number; starred: boolean }) => {
      return apiRequest('PATCH', `/api/user-documents/${documentId}`, { starred });
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/user-documents'] });
      toast({
        title: "Success",
        description: "Document updated successfully",
      });
    },
    onError: () => {
      toast({
        title: "Error",
        description: "Failed to update document",
        variant: "destructive",
      });
    }
  });

  // Status update mutation for user documents
  const updateStatusMutation = useMutation({
    mutationFn: async ({ documentId, status }: { documentId: number; status: string }) => {
      return apiRequest('PATCH', `/api/user-documents/${documentId}`, { status });
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/user-documents'] });
      toast({
        title: "Status Updated",
        description: "Document status updated successfully",
      });
    },
    onError: () => {
      toast({
        title: "Error",
        description: "Failed to update document status",
        variant: "destructive",
      });
    }
  });

  // Delete document mutation
  const deleteDocumentMutation = useMutation({
    mutationFn: async (documentId: number) => {
      return apiRequest('DELETE', `/api/user-documents/${documentId}`);
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/user-documents'] });
      toast({
        title: "Success",
        description: "Document deleted successfully",
      });
      setSelectedNode(null);
    },
    onError: () => {
      toast({
        title: "Error",
        description: "Failed to delete document",
        variant: "destructive",
      });
    }
  });

  // Edit document mutation
  const editDocumentMutation = useMutation({
    mutationFn: async ({ documentId, updates }: { documentId: number; updates: Partial<UserDocument> }) => {
      return apiRequest('PATCH', `/api/user-documents/${documentId}`, updates);
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/user-documents'] });
      toast({
        title: "Success",
        description: "Document updated successfully",
      });
      setEditingDocument(null);
    },
    onError: () => {
      toast({
        title: "Error",
        description: "Failed to update document",
        variant: "destructive",
      });
    }
  });

  // Folder management mutations
  const createFolderMutation = useMutation({
    mutationFn: async (name: string) => {
      return apiRequest('POST', '/api/user-documents/folders', { name });
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/user-documents/folders'] });
      queryClient.invalidateQueries({ queryKey: ['/api/user-documents'] });
    }
  });

  const renameFolderMutation = useMutation({
    mutationFn: async ({ id, newName }: { id: string; newName: string }) => {
      // For renaming, we need to update all documents in the folder
      // This would require a more complex backend endpoint
      throw new Error('Folder renaming not yet implemented');
    }
  });

  const deleteFolderMutation = useMutation({
    mutationFn: async (id: string) => {
      return apiRequest('DELETE', `/api/user-documents/folders/${id}`);
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/user-documents/folders'] });
      queryClient.invalidateQueries({ queryKey: ['/api/user-documents'] });
    }
  });

  const uploadToFolderMutation = useMutation({
    mutationFn: async ({ folderId, files }: { folderId: string; files: FileList }) => {
      // Upload each file to the specified folder
      const uploadPromises = Array.from(files).map(async (file) => {
        const formData = new FormData();
        formData.append('file', file);
        formData.append('title', file.name);
        formData.append('folderId', folderId);
        
        const response = await fetch('/api/user-documents/upload', {
          method: 'POST',
          body: formData,
          credentials: 'include',
        });
        
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.message || 'Failed to upload document');
        }
        
        return await response.json();
      });
      
      return Promise.all(uploadPromises);
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/user-documents'] });
      queryClient.invalidateQueries({ queryKey: ['/api/user-documents/folders'] });
    }
  });

  // Upload document mutation
  const uploadMutation = useMutation({
    mutationFn: async (data: { file: File; metadata: any }): Promise<UserDocument> => {
      const { file, metadata } = data;
      
      // Create form data for file upload
      const formData = new FormData();
      formData.append('file', file);
      formData.append('title', metadata.title || file.name);
      if (metadata.description) formData.append('description', metadata.description);
      if (metadata.tags) formData.append('tags', JSON.stringify(metadata.tags));
      if (metadata.category) formData.append('category', metadata.category);
      if (metadata.status) formData.append('status', metadata.status);
      
      const response = await fetch('/api/user-documents/upload', {
        method: 'POST',
        body: formData,
        credentials: 'include',
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Failed to upload document');
      }
      
      return await response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/user-documents'] });
      setIsUploadMode(false);
      toast({
        title: 'Upload Successful',
        description: 'Your document has been uploaded.',
      });
    },
    onError: (error: any) => {
      console.error("Upload mutation error:", error);
      toast({
        title: 'Upload Failed',
        description: error.message || 'There was an error uploading your document.',
        variant: 'destructive',
      });
    },
  });

  const formatFileSize = (bytes: number) => {
    const sizes = ['B', 'KB', 'MB', 'GB'];
    if (bytes === 0) return '0 B';
    const i = Math.floor(Math.log(bytes) / Math.log(1024));
    return Math.round(bytes / Math.pow(1024, i)) + ' ' + sizes[i];
  };

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    const now = new Date();
    const diffInMs = now.getTime() - date.getTime();
    const diffInDays = Math.floor(diffInMs / (1000 * 60 * 60 * 24));
    
    if (diffInDays === 0) {
      return 'Today';
    } else if (diffInDays === 1) {
      return '1 day ago';
    } else if (diffInDays < 7) {
      return `${diffInDays} days ago`;
    } else if (diffInDays < 30) {
      const weeks = Math.floor(diffInDays / 7);
      return `${weeks} ${weeks === 1 ? 'week' : 'weeks'} ago`;
    } else {
      return date.toLocaleDateString();
    }
  };

  // Transform documents into hierarchical structure
  const transformToFileNodes = (): FileNode[] => {
    if (!userDocuments && !complianceDocuments) return [];

    const folderNodes: Record<string, FileNode> = {};
    const allDocuments = [
      ...(userDocuments || []).map(doc => ({ ...doc, type: 'user' as const })),
      ...(complianceDocuments || []).map(doc => ({ ...doc, type: 'compliance' as const }))
    ];

    // Only create managed folders if they are actually loaded
    if (folders && Array.isArray(folders)) {
      folders.forEach(folder => {
        folderNodes[folder.id] = {
          id: `managed-folder-${folder.id}`,
          name: folder.name,
          type: "folder",
          children: [],
          modified: formatDate(folder.createdAt || new Date().toISOString()),
          folderId: folder.id, // Store original folder ID for operations
          documentCount: folder.documentCount || 0,
          isManaged: true // Flag to distinguish from category folders
        };
      });
    }

    // Then, process documents and create category folders as needed
    allDocuments.forEach(doc => {
      const category = ('category' in doc ? doc.category : 'Compliance') || 'General';
      const documentFolderId = 'folderId' in doc ? doc.folderId : null;
      
      // If document has a folderId, assign it to that managed folder
      if (documentFolderId && folderNodes[`managed-folder-${documentFolderId}`]) {
        const targetFolder = folderNodes[`managed-folder-${documentFolderId}`];
        
        const fileNode: FileNode = {
          id: `${doc.type}-${doc.id}`,
          name: doc.title,
          type: "file",
          size: 'fileSize' in doc ? formatFileSize(doc.fileSize) : undefined,
          modified: formatDate(doc.updatedAt || doc.createdAt),
          status: doc.status as any,
          tags: 'tags' in doc ? doc.tags : undefined,
          starred: 'starred' in doc ? doc.starred : starredComplianceDocs.has(doc.id),
          document: doc
        };

        targetFolder.children!.push(fileNode);
        targetFolder.documentCount = (targetFolder.documentCount || 0) + 1;
      } else {
        // Otherwise, create/use category folder
        const categoryFolderId = `category-folder-${category}`;
        
        if (!folderNodes[categoryFolderId]) {
          folderNodes[categoryFolderId] = {
            id: categoryFolderId,
            name: category,
            type: "folder",
            children: [],
            isManaged: false // Category folder, not managed
          };
        }

        const fileNode: FileNode = {
          id: `${doc.type}-${doc.id}`,
          name: doc.title,
          type: "file",
          size: 'fileSize' in doc ? formatFileSize(doc.fileSize) : undefined,
          modified: formatDate(doc.updatedAt || doc.createdAt),
          status: doc.status as any,
          tags: 'tags' in doc ? doc.tags : undefined,
          starred: 'starred' in doc ? doc.starred : starredComplianceDocs.has(doc.id),
          document: doc
        };

        folderNodes[categoryFolderId].children!.push(fileNode);
      }
    });

    return Object.values(folderNodes);
  };

  const fileNodes = transformToFileNodes();

  const filteredData = fileNodes.filter(node => {
    const matchesSearch = node.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
      (node.children && node.children.some(child => 
        child.name.toLowerCase().includes(searchQuery.toLowerCase())
      ));
    
    const matchesFilter = filterStatus === "all" || 
      (node.children && node.children.some(child => child.status === filterStatus));
    
    return matchesSearch && matchesFilter;
  });

  const handleStarDocument = (node: FileNode) => {
    if (!node.document) return;
    
    if ('starred' in node.document) {
      // User document - use API
      starDocumentMutation.mutate({
        documentId: node.document.id,
        starred: !node.starred
      });
    } else {
      // Compliance document - use localStorage
      const newStarredSet = new Set(starredComplianceDocs);
      if (starredComplianceDocs.has(node.document.id)) {
        newStarredSet.delete(node.document.id);
        toast({
          title: "Removed from favorites",
          description: "Document removed from your favorites.",
        });
      } else {
        newStarredSet.add(node.document.id);
        toast({
          title: "Added to favorites",
          description: "Document added to your favorites.",
        });
      }
      
      setStarredComplianceDocs(newStarredSet);
      localStorage.setItem('starredComplianceDocs', JSON.stringify(Array.from(newStarredSet)));
    }
  };

  const handleDeleteDocument = (node: FileNode) => {
    if (node.document && 'userId' in node.document) {
      deleteDocumentMutation.mutate(node.document.id);
    }
  };

  const handleViewDocument = (node: FileNode) => {
    if (!node.document) return;
    
    if ('userId' in node.document) {
      // User document - open in modal
      setViewingDocument(node.document);
    } else {
      // Compliance document - navigate to detail page
      setLocation(`/documents/${node.document.id}`);
    }
  };

  const handleUpload = async (file: File, metadata: any) => {
    uploadMutation.mutate({ file, metadata });
  };

  // Folder management handlers
  const handleCreateFolder = async (name: string) => {
    await createFolderMutation.mutateAsync(name);
  };

  const handleRenameFolder = async (id: string, newName: string) => {
    await renameFolderMutation.mutateAsync({ id, newName });
  };

  const handleDeleteFolder = async (id: string) => {
    await deleteFolderMutation.mutateAsync(id);
  };

  const handleUploadToFolder = async (folderId: string, files: FileList) => {
    await uploadToFolderMutation.mutateAsync({ folderId, files });
  };

  const handleEditDocument = (node: FileNode) => {
    if (!node.document) return;
    
    if ('userId' in node.document) {
      // User document - open edit modal
      setEditingDocument(node.document);
    } else {
      // Compliance document - navigate to edit mode
      setLocation(`/documents/${node.document.id}?action=edit`);
    }
  };

  const handleSaveDocumentEdit = (documentId: number, updates: Partial<UserDocument>) => {
    editDocumentMutation.mutate({ documentId, updates });
  };

  const handleShareDocument = (node: FileNode) => {
    if (!node.document) return;
    
    setSharingDocument(node.document);
  };

  const handleDownloadDocument = (node: FileNode) => {
    if (!node.document) return;
    
    if ('userId' in node.document) {
      // User document - use API endpoint with proper authentication
      const link = document.createElement('a');
      link.href = node.document.fileUrl; // This is the API endpoint: /api/user-documents/:id/download
      link.setAttribute('download', node.document.fileName);
      link.style.display = 'none';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    } else {
      // Compliance document - for now, just show a toast
      toast({
        title: "Download Document",
        description: "Compliance document download is not yet implemented.",
      });
    }
  };

  const handleChangeDocumentStatus = (node: FileNode, newStatus: string) => {
    if (!node.document) return;
    
    if ('userId' in node.document) {
      // User document - update status
      updateStatusMutation.mutate({
        documentId: node.document.id,
        status: newStatus,
      });
    } else {
      // Compliance document - would need API endpoint
      toast({
        title: "Status Change",
        description: `Changing compliance document status to ${newStatus} is not yet implemented.`,
      });
    }
  };

  const handleDuplicateDocument = (node: FileNode) => {
    if (!node.document) return;
    
    toast({
      title: "Duplicate Document",
      description: "Document duplication is not yet implemented.",
    });
  };

  const handleMoveToFolder = async (itemId: string, targetFolderId: string, sourceNodeId: string) => {
    try {
      // Find the target folder for better user feedback
      const targetFolder = fileNodes.find(folder => 
        folder.id === targetFolderId || 
        folder.folderId === targetFolderId ||
        folder.id === `managed-folder-${targetFolderId}`
      );
      const targetFolderName = targetFolder?.name || 'folder';
      
      // Determine if we're moving a document or a folder
      const sourceNode = fileNodes.flatMap(folder => [folder, ...(folder.children || [])])
        .find(node => node.id === sourceNodeId);
      
      if (!sourceNode) {
        throw new Error('Source item not found');
      }
      
      const isMovingFolder = sourceNode.type === 'folder';
      const itemName = sourceNode.name;
      
      // For managed folders, use actual API calls
      if (targetFolder?.isManaged) {
        if (isMovingFolder && sourceNode.isManaged) {
          // Moving a managed folder into another managed folder
          // This would require backend support for nested folders
          toast({
            title: "Feature Not Available",
            description: "Nested managed folders are not yet supported.",
            variant: "destructive",
          });
          return;
        } else if (!isMovingFolder && sourceNode.document && 'userId' in sourceNode.document) {
          // Moving a user document to a managed folder
          try {
            await apiRequest('PATCH', `/api/user-documents/${itemId}`, { 
              category: targetFolderName 
            });
            
            // Refresh data
            queryClient.invalidateQueries({ queryKey: ['/api/user-documents'] });
            queryClient.invalidateQueries({ queryKey: ['/api/user-documents/folders'] });
            
            toast({
              title: "Document Moved",
              description: `${itemName} has been moved to ${targetFolderName}.`,
            });
            return;
          } catch (apiError) {
            throw new Error('Failed to move document to folder');
          }
        }
      }
      
      // For category folders or other operations, show success toast
      // (these are visual operations for now)
      toast({
        title: `${isMovingFolder ? 'Folder' : 'Document'} Moved`,
        description: `${itemName} has been moved to ${targetFolderName}.`,
      });
      
    } catch (error) {
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      toast({
        title: "Error",
        description: `Failed to move item: ${errorMessage}`,
        variant: "destructive",
      });
    }
  };

  const getStatusColor = (status?: string) => {
    switch (status) {
      case "draft": return "bg-yellow-500/20 text-yellow-300 border-yellow-500/30";
      case "review": return "bg-blue-500/20 text-blue-300 border-blue-500/30";
      case "approved": return "bg-green-500/20 text-green-300 border-green-500/30";
      case "archived": return "bg-gray-500/20 text-gray-300 border-gray-500/30";
      default: return "bg-gray-500/20 text-gray-300 border-gray-500/30";
    }
  };

  if (isLoadingUserDocs || isLoadingComplianceDocs) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-900 via-blue-800 to-blue-700 p-6 flex items-center justify-center">
        <div className="text-white text-lg">Loading documents...</div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-900 via-blue-800 to-blue-700 p-6">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <motion.div
          initial={{ opacity: 0, y: -20 }}
          animate={{ opacity: 1, y: 0 }}
          className="mb-8"
        >
          <div className="flex justify-between items-center mb-4">
            <div>
              <h1 className="text-4xl font-bold text-white mb-2">
                Compliance Documentation Workspace
              </h1>
              <p className="text-blue-200">
                Organize and manage your compliance documents with visual clarity
              </p>
            </div>
            <div className="flex gap-2">
              <Button
                onClick={() => setShowFolderManager(!showFolderManager)}
                variant={showFolderManager ? "secondary" : "outline"}
                className="text-white border-white/20 hover:bg-white/10"
              >
                <FolderPlus className="w-4 h-4 mr-2" />
                {showFolderManager ? 'Hide Folders' : 'Manage Folders'}
              </Button>
              <Button
                onClick={() => setIsUploadMode(!isUploadMode)}
                className="bg-blue-600 hover:bg-blue-700 text-white"
              >
                <Upload className="w-4 h-4 mr-2" />
                {isUploadMode ? 'Cancel Upload' : 'Upload Document'}
              </Button>
            </div>
          </div>
        </motion.div>

        {/* Controls */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="flex flex-col sm:flex-row gap-4 mb-6 p-4 bg-white/10 backdrop-blur-sm rounded-xl border border-white/20"
        >
          <div className="flex-1 relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
            <input
              type="text"
              placeholder="Search documents..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="w-full pl-10 pr-4 py-2 bg-white/10 border border-white/20 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-400"
            />
          </div>

          <div className="flex items-center gap-2">
            <select
              value={filterStatus}
              onChange={(e) => setFilterStatus(e.target.value)}
              className="px-3 py-2 bg-white/10 border border-white/20 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-400"
              aria-label="Filter documents by status"
              title="Filter by status"
            >
              <option value="all">All Status</option>
              <option value="draft">Draft</option>
              <option value="review">Review</option>
              <option value="approved">Approved</option>
              <option value="archived">Archived</option>
            </select>

            <div className="flex items-center bg-white/10 rounded-lg border border-white/20">
              <button
                onClick={() => setViewMode("grid")}
                className={`p-2 rounded-l-lg transition-colors ${
                  viewMode === "grid" ? "bg-blue-500 text-white" : "text-gray-400 hover:text-white"
                }`}
                aria-label="Grid view"
                title="Grid view"
              >
                <Grid3X3 className="w-4 h-4" />
              </button>
              <button
                onClick={() => setViewMode("list")}
                className={`p-2 rounded-r-lg transition-colors ${
                  viewMode === "list" ? "bg-blue-500 text-white" : "text-gray-400 hover:text-white"
                }`}
                aria-label="List view"
                title="List view"
              >
                <List className="w-4 h-4" />
              </button>
            </div>
          </div>
        </motion.div>

        {/* Upload Section */}
        <AnimatePresence>
          {isUploadMode && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: "auto" }}
              exit={{ opacity: 0, height: 0 }}
              className="mb-6 p-4 bg-white/10 backdrop-blur-sm rounded-xl border border-white/20"
            >
              <h2 className="text-xl font-semibold text-white mb-4">Upload Document</h2>
              <FileUploader 
                onFileUpload={handleUpload}
                folders={folders?.map(folder => ({ id: folder.id, name: folder.name })) || []}
                isUploading={uploadMutation.isPending}
              />
            </motion.div>
          )}
        </AnimatePresence>

        {/* Folder Manager Section */}
        <AnimatePresence>
          {showFolderManager && (
            <motion.div
              initial={{ opacity: 0, height: 0 }}
              animate={{ opacity: 1, height: "auto" }}
              exit={{ opacity: 0, height: 0 }}
              className="mb-6 p-4 bg-white/10 backdrop-blur-sm rounded-xl border border-white/20"
            >
              <FolderManager
                folders={folders || []}
                onCreateFolder={handleCreateFolder}
                onRenameFolder={handleRenameFolder}
                onDeleteFolder={handleDeleteFolder}
                onUploadToFolder={handleUploadToFolder}
                isCreating={createFolderMutation.isPending}
              />
            </motion.div>
          )}
        </AnimatePresence>

        {/* Grid */}
        <motion.div
          layout
          onDragOver={(e) => {
            e.preventDefault();
            e.dataTransfer.dropEffect = 'move';
            setIsMainAreaDragOver(true);
          }}
          onDragLeave={(e) => {
            // Only clear if we're leaving the main area completely
            if (!e.currentTarget.contains(e.relatedTarget as Node)) {
              setIsMainAreaDragOver(false);
            }
          }}
          onDrop={(e) => {
            e.preventDefault();
            setIsMainAreaDragOver(false);
            
            try {
              const dragData = JSON.parse(e.dataTransfer.getData('application/json'));
              if (dragData.type === 'folder' && dragData.isManaged) {
                toast({
                  title: "Folder Organized",
                  description: `${dragData.folderName} is now displayed in the main area.`,
                });
                // Managed folders are already displayed in main area by default
              } else if (dragData.type === 'document') {
                toast({
                  title: "Document Organization",
                  description: "Documents can be moved between folders by dropping them on folder icons.",
                });
              }
            } catch (error) {
              console.error('Error handling main area drop:', error);
            }
          }}
          className={`grid gap-4 ${
            viewMode === "grid" 
              ? "grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4" 
              : "grid-cols-1"
          } ${isMainAreaDragOver ? 'bg-blue-500/10 border-2 border-dashed border-blue-400 rounded-lg p-4' : ''}`}
        >
          <AnimatePresence>
            {filteredData.map((node) => (
              <GridItem
                key={node.id}
                node={node}
                onSelect={setSelectedNode}
                onStar={handleStarDocument}
                onDelete={handleDeleteDocument}
                onView={handleViewDocument}
                onEdit={handleEditDocument}
                onShare={handleShareDocument}
                onDownload={handleDownloadDocument}
                onChangeStatus={handleChangeDocumentStatus}
                onDuplicate={handleDuplicateDocument}
                onMoveToFolder={handleMoveToFolder}
                isSelected={selectedNode?.id === node.id}
              />
            ))}
          </AnimatePresence>
        </motion.div>

        {/* Selected Item Details */}
        <AnimatePresence>
          {selectedNode && (
            <motion.div
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: 20 }}
              className="fixed bottom-6 right-6 w-80 p-4 bg-white/10 backdrop-blur-sm rounded-xl border border-white/20 shadow-xl"
            >
              <div className="flex items-center justify-between mb-3">
                <h3 className="font-semibold text-white">Selected Item</h3>
                <button
                  onClick={() => setSelectedNode(null)}
                  className="text-gray-400 hover:text-white transition-colors"
                  aria-label="Close details"
                  title="Close details"
                >
                  ×
                </button>
              </div>
              <div className="space-y-2 text-sm">
                <div className="flex items-center gap-2">
                  {selectedNode.type === "folder" ? (
                    <FolderPlus className="w-4 h-4 text-blue-400" />
                  ) : (
                    <FileText className="w-4 h-4 text-gray-400" />
                  )}
                  <span className="text-white font-medium">{selectedNode.name}</span>
                </div>
                {selectedNode.status && (
                  <div className={`inline-flex items-center px-2 py-1 rounded-full text-xs ${getStatusColor(selectedNode.status)}`}>
                    {selectedNode.status}
                  </div>
                )}
                <div className="flex gap-2 pt-2">
                  <button 
                    className="flex items-center gap-1 px-3 py-1 bg-blue-500/20 text-blue-300 rounded-md text-xs hover:bg-blue-500/30 transition-colors"
                    onClick={() => handleShareDocument(selectedNode)}
                  >
                    <Share2 className="w-3 h-3" />
                    Share
                  </button>
                  <button 
                    className="flex items-center gap-1 px-3 py-1 bg-green-500/20 text-green-300 rounded-md text-xs hover:bg-green-500/30 transition-colors"
                    onClick={() => handleDownloadDocument(selectedNode)}
                  >
                    <Download className="w-3 h-3" />
                    Download
                  </button>
                </div>
              </div>
            </motion.div>
          )}
        </AnimatePresence>

        {/* Document Viewer Modal */}
        {viewingDocument && (
          <DocumentViewer
            document={viewingDocument}
            isOpen={!!viewingDocument}
            onClose={() => setViewingDocument(null)}
          />
        )}

        {/* Document Edit Modal */}
        {editingDocument && (
          <UserDocumentEditModal
            document={editingDocument}
            isOpen={!!editingDocument}
            onClose={() => setEditingDocument(null)}
            onSave={handleSaveDocumentEdit}
            isSaving={editDocumentMutation.isPending}
          />
        )}

        {/* Document Share Modal */}
        {sharingDocument && (
          <ShareModal
            document={sharingDocument}
            isOpen={!!sharingDocument}
            onClose={() => setSharingDocument(null)}
            onDownload={() => handleDownloadDocument({ document: sharingDocument } as FileNode)}
          />
        )}
      </div>
    </div>
  );
};

export default ComplianceWorkspace;

================
File: client/src/components/documents/CreateDocumentModal.tsx
================
import { useState, useEffect } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Checkbox } from "@/components/ui/checkbox";
import { Template } from "@/types";
import { FileText, Plus } from "lucide-react";
import { useToast } from "@/hooks/use-toast";
import { apiRequest, queryClient } from "@/lib/queryClient";
import { cn } from "@/lib/utils";
import { useAuth } from "@/hooks/use-auth";

type CreateDocumentModalProps = {
  isOpen: boolean;
  onClose: () => void;
  templates: Template[];
  isLoadingTemplates?: boolean;
};

export default function CreateDocumentModal({
  isOpen,
  onClose,
  templates,
  isLoadingTemplates = false
}: CreateDocumentModalProps) {
  const [title, setTitle] = useState("");
  const [selectedTemplateId, setSelectedTemplateId] = useState<number | null>(null);
  const [aiOptions, setAIOptions] = useState({
    autoPopulate: true,
    suggestImprovements: false,
    flagIssues: true
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const { toast } = useToast();
  const { user } = useAuth();

  useEffect(() => {
    if (isOpen) {
      // Reset form when modal opens
      setTitle("");
      setSelectedTemplateId(null);
      setAIOptions({
        autoPopulate: true,
        suggestImprovements: false,
        flagIssues: true
      });
    }
  }, [isOpen]);

  const handleSubmit = async () => {
    if (!user) {
      toast({
        title: "Authentication required",
        description: "Please log in to create documents",
        variant: "destructive"
      });
      return;
    }

    if (!title.trim()) {
      toast({
        title: "Missing information",
        description: "Please enter a document title",
        variant: "destructive"
      });
      return;
    }

    if (selectedTemplateId === null) {
      toast({
        title: "Missing information",
        description: "Please select a template",
        variant: "destructive"
      });
      return;
    }

    setIsSubmitting(true);

    try {
      // First get the template content with AI generation if auto-populate is enabled
      let content = "";
      if (aiOptions.autoPopulate) {
        const aiResponse = await apiRequest("POST", "/api/ai/generate-from-template", {
          templateId: selectedTemplateId,
          companyInfo: {
            name: "Your Company Name" // Would be pulled from actual company settings
          }
        });
        const aiData = await aiResponse.json();
        content = aiData.content;
      } else {
        // Get raw template content
        const templateResponse = await apiRequest("GET", `/api/templates/${selectedTemplateId}`);
        const templateData = await templateResponse.json();
        content = templateData.content;
      }

      // Create the document
      const response = await apiRequest("POST", "/api/documents", {
        title,
        content,
        status: "draft",
        templateId: selectedTemplateId,
        createdById: user.id // Explicitly include user ID even though the server should add it
      });

      if (!response.ok) {
        const errorData = await response.json();
        console.error("Server error response:", errorData);
        throw new Error(`Failed to create document: ${JSON.stringify(errorData)}`);
      }

      const newDocument = await response.json();

      // Invalidate documents cache to refresh the list
      queryClient.invalidateQueries({ queryKey: ["/api/documents"] });

      toast({
        title: "Document created",
        description: `"${title}" has been created successfully.`
      });

      onClose();
    } catch (error: any) {
      console.error("Error creating document:", error);
      
      // Log the exact format we're sending
      console.error("Error details:", {
        message: error.message,
        stack: error.stack,
        name: error.name
      });
      
      toast({
        title: "Error",
        description: error.message || "Failed to create document",
        variant: "destructive"
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-lg">
        <DialogHeader>
          <DialogTitle className="text-lg font-medium">Create New Document</DialogTitle>
        </DialogHeader>
        
        <div className="space-y-4 py-2">
          <div>
            <Label htmlFor="documentTitle" className="block text-sm font-medium text-slate-700 mb-1">
              Document Title
            </Label>
            <Input
              id="documentTitle"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              placeholder="Enter document title"
              disabled={isSubmitting}
            />
          </div>
          
          <div>
            <Label className="block text-sm font-medium text-slate-700 mb-1">
              Template
            </Label>
            <div className="grid grid-cols-2 gap-3 mt-2">
              {isLoadingTemplates ? (
                Array(4).fill(0).map((_, i) => (
                  <div key={i} className="border border-slate-200 rounded-md p-3 h-12 animate-pulse bg-slate-100"></div>
                ))
              ) : (
                <>
                  {templates.map((template) => (
                    <div 
                      key={template.id}
                      className={cn(
                        "border rounded-md p-3 hover:border-primary-500 cursor-pointer",
                        selectedTemplateId === template.id 
                          ? "border-primary-500 bg-primary-50" 
                          : "border-slate-200"
                      )}
                      onClick={() => setSelectedTemplateId(template.id)}
                    >
                      <div className="flex items-center">
                        <FileText className="text-slate-400 mr-2" size={16} />
                        <span className="text-sm font-medium text-slate-700">{template.name}</span>
                      </div>
                    </div>
                  ))}
                  
                  <div className="border border-dashed border-slate-300 rounded-md p-3 hover:border-primary-500 cursor-pointer flex items-center justify-center text-sm text-slate-500">
                    <Plus className="mr-1" size={16} />
                    Custom Template
                  </div>
                </>
              )}
            </div>
          </div>
          
          <div>
            <Label className="block text-sm font-medium text-slate-700 mb-1">
              AI Assistance Options
            </Label>
            <div className="space-y-2 mt-1">
              <div className="flex items-center">
                <Checkbox 
                  id="aiOption1" 
                  checked={aiOptions.autoPopulate}
                  onCheckedChange={(checked) => setAIOptions({...aiOptions, autoPopulate: checked === true})}
                />
                <Label htmlFor="aiOption1" className="ml-2 block text-sm text-slate-700">
                  Auto-populate with company information
                </Label>
              </div>
              <div className="flex items-center">
                <Checkbox 
                  id="aiOption2"
                  checked={aiOptions.suggestImprovements}
                  onCheckedChange={(checked) => setAIOptions({...aiOptions, suggestImprovements: checked === true})}
                />
                <Label htmlFor="aiOption2" className="ml-2 block text-sm text-slate-700">
                  Suggest improvements based on industry standards
                </Label>
              </div>
              <div className="flex items-center">
                <Checkbox 
                  id="aiOption3"
                  checked={aiOptions.flagIssues}
                  onCheckedChange={(checked) => setAIOptions({...aiOptions, flagIssues: checked === true})}
                />
                <Label htmlFor="aiOption3" className="ml-2 block text-sm text-slate-700">
                  Flag potential compliance issues
                </Label>
              </div>
            </div>
          </div>
        </div>
        
        <DialogFooter className="mt-5 border-t border-slate-200 pt-4">
          <Button 
            variant="outline" 
            onClick={onClose}
            disabled={isSubmitting}
          >
            Cancel
          </Button>
          <Button 
            onClick={handleSubmit}
            disabled={isSubmitting}
          >
            {isSubmitting ? "Creating..." : "Create Document"}
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
}

================
File: client/src/components/documents/DocumentMoreOptions.tsx
================
import React, { useState, useRef, useEffect } from 'react';
import { createPortal } from 'react-dom';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  MoreHorizontal, 
  Edit3, 
  Share2, 
  Download, 
  Copy, 
  Settings, 
  Archive,
  CheckCircle,
  Clock,
  AlertCircle,
  FileText,
  Star,
  Folder,
  ChevronRight
} from 'lucide-react';
import { UserDocument, Document } from '@/types';

interface DocumentMoreOptionsProps {
  document: UserDocument | Document;
  onEdit?: () => void;
  onShare?: () => void;
  onDownload?: () => void;
  onDuplicate?: () => void;
  onChangeStatus?: (status: string) => void;
  onArchive?: () => void;
}

export default function DocumentMoreOptions({
  document,
  onEdit,
  onShare,
  onDownload,
  onDuplicate,
  onChangeStatus,
  onArchive
}: DocumentMoreOptionsProps) {
  const [isOpen, setIsOpen] = useState(false);
  const [showStatusSubmenu, setShowStatusSubmenu] = useState(false);
  const [dropdownPosition, setDropdownPosition] = useState({ top: 0, left: 0 });
  const buttonRef = useRef<HTMLButtonElement>(null);
  const dropdownRef = useRef<HTMLDivElement>(null);

  const isUserDocument = 'userId' in document;
  const canEdit = isUserDocument || document.status === 'draft';

  // Calculate dropdown position
  const updateDropdownPosition = () => {
    if (buttonRef.current) {
      const rect = buttonRef.current.getBoundingClientRect();
      const scrollX = window.pageXOffset || window.document.documentElement.scrollLeft;
      const scrollY = window.pageYOffset || window.document.documentElement.scrollTop;
      
      setDropdownPosition({
        top: rect.bottom + scrollY + 8, // 8px gap
        left: rect.right + scrollX - 256 // 256px is dropdown width, align to right edge
      });
    }
  };

  // Update dropdown position on scroll/resize
  useEffect(() => {
    if (isOpen) {
      const handlePositionUpdate = () => updateDropdownPosition();
      
      window.addEventListener('scroll', handlePositionUpdate, true);
      window.addEventListener('resize', handlePositionUpdate);
      
      return () => {
        window.removeEventListener('scroll', handlePositionUpdate, true);
        window.removeEventListener('resize', handlePositionUpdate);
      };
    }
  }, [isOpen]);

  // Close dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (
        dropdownRef.current && 
        !dropdownRef.current.contains(event.target as Node) &&
        buttonRef.current &&
        !buttonRef.current.contains(event.target as Node)
      ) {
        setIsOpen(false);
        setShowStatusSubmenu(false);
      }
    };

    if (isOpen) {
      window.document.addEventListener('mousedown', handleClickOutside);
      return () => window.document.removeEventListener('mousedown', handleClickOutside);
    }
  }, [isOpen]);

  const statusOptions = isUserDocument 
    ? [
        { 
          value: 'draft', 
          label: 'Draft', 
          icon: <Edit3 className="w-4 h-4" />, 
          color: 'text-amber-600 bg-amber-50',
          description: 'Work in progress'
        },
        { 
          value: 'review', 
          label: 'In Review', 
          icon: <Clock className="w-4 h-4" />, 
          color: 'text-blue-600 bg-blue-50',
          description: 'Under review'
        },
        { 
          value: 'approved', 
          label: 'Approved', 
          icon: <CheckCircle className="w-4 h-4" />, 
          color: 'text-green-600 bg-green-50',
          description: 'Ready to use'
        },
        { 
          value: 'archived', 
          label: 'Archived', 
          icon: <Archive className="w-4 h-4" />, 
          color: 'text-gray-600 bg-gray-50',
          description: 'No longer active'
        }
      ]
    : [
        { 
          value: 'draft', 
          label: 'Draft', 
          icon: <Edit3 className="w-4 h-4" />, 
          color: 'text-amber-600 bg-amber-50',
          description: 'Work in progress'
        },
        { 
          value: 'pending_approval', 
          label: 'Pending Approval', 
          icon: <Clock className="w-4 h-4" />, 
          color: 'text-blue-600 bg-blue-50',
          description: 'Awaiting approval'
        },
        { 
          value: 'active', 
          label: 'Active', 
          icon: <CheckCircle className="w-4 h-4" />, 
          color: 'text-green-600 bg-green-50',
          description: 'Currently active'
        },
        { 
          value: 'expired', 
          label: 'Expired', 
          icon: <AlertCircle className="w-4 h-4" />, 
          color: 'text-red-600 bg-red-50',
          description: 'No longer valid'
        },
        { 
          value: 'archived', 
          label: 'Archived', 
          icon: <Archive className="w-4 h-4" />, 
          color: 'text-gray-600 bg-gray-50',
          description: 'No longer active'
        }
      ];

  const handleOptionClick = (action: () => void) => {
    action();
    setIsOpen(false);
    setShowStatusSubmenu(false);
  };

  const quickActions = [
    ...(canEdit && onEdit ? [{
      icon: <Edit3 className="w-4 h-4" />,
      label: 'Edit',
      action: onEdit,
      color: 'hover:bg-blue-50 hover:text-blue-700',
      shortcut: 'E'
    }] : []),
    ...(onShare ? [{
      icon: <Share2 className="w-4 h-4" />,
      label: 'Share',
      action: onShare,
      color: 'hover:bg-emerald-50 hover:text-emerald-700',
      shortcut: 'S'
    }] : []),
    ...(onDownload ? [{
      icon: <Download className="w-4 h-4" />,
      label: 'Download',
      action: onDownload,
      color: 'hover:bg-purple-50 hover:text-purple-700',
      shortcut: 'D'
    }] : []),
  ];

  const secondaryActions = [
    ...(onDuplicate ? [{
      icon: <Copy className="w-4 h-4" />,
      label: 'Duplicate',
      action: onDuplicate,
      color: 'hover:bg-indigo-50 hover:text-indigo-700'
    }] : []),
  ];

  return (
    <div className="relative">
      <motion.button
        ref={buttonRef}
        whileHover={{ scale: 1.05 }}
        whileTap={{ scale: 0.95 }}
        className={`
          relative p-2 rounded-lg transition-all duration-200 group
          ${isOpen 
            ? 'bg-white/20 text-white shadow-lg' 
            : 'hover:bg-white/10 text-gray-400 hover:text-white'
          }
        `}
        onClick={(e) => {
          e.stopPropagation();
          if (!isOpen) {
            updateDropdownPosition();
          }
          setIsOpen(!isOpen);
        }}
        title="More options"
        aria-label="More options"
        aria-expanded={isOpen}
      >
        <motion.div
          animate={{ rotate: isOpen ? 90 : 0 }}
          transition={{ duration: 0.2 }}
        >
          <MoreHorizontal className="w-4 h-4" />
        </motion.div>
        
        {/* Pulse ring on hover */}
        <motion.div
          className="absolute inset-0 rounded-lg border border-white/20"
          initial={{ scale: 1, opacity: 0 }}
          whileHover={{ scale: 1.2, opacity: 1 }}
          transition={{ duration: 0.3 }}
        />
      </motion.button>

      {/* Portal-based dropdown to escape stacking context */}
      {isOpen && createPortal(
        <AnimatePresence>
          <motion.div
            ref={dropdownRef}
            initial={{ opacity: 0, scale: 0.9, y: -10 }}
            animate={{ opacity: 1, scale: 1, y: 0 }}
            exit={{ opacity: 0, scale: 0.9, y: -10 }}
            transition={{ 
              type: "spring", 
              damping: 20, 
              stiffness: 300,
              duration: 0.2 
            }}
            style={{
              position: 'fixed',
              top: dropdownPosition.top,
              left: dropdownPosition.left,
              zIndex: 9999
            }}
            className="w-64 bg-white/95 backdrop-blur-xl border border-white/20 rounded-xl shadow-2xl overflow-hidden"
          >
            {/* Header */}
            <div className="px-4 py-3 bg-gradient-to-r from-blue-50/80 to-purple-50/80 border-b border-white/20">
              <div className="flex items-center gap-3">
                <div className="p-1.5 rounded-lg bg-white/60">
                  <FileText className="w-4 h-4 text-gray-600" />
                </div>
                <div>
                                     <h4 className="font-medium text-gray-900 text-sm truncate">
                     {document.title}
                   </h4>
                  <p className="text-xs text-gray-500">
                    {isUserDocument ? 'User Document' : 'Compliance Document'}
                  </p>
                </div>
              </div>
            </div>

            <div className="py-2">
              {/* Quick Actions */}
              {quickActions.length > 0 && (
                <div className="px-2">
                  <div className="text-xs font-medium text-gray-500 px-2 py-1 mb-1">
                    Quick Actions
                  </div>
                  <div className="space-y-1">
                    {quickActions.map((action, index) => (
                      <motion.button
                        key={action.label}
                        initial={{ opacity: 0, x: -10 }}
                        animate={{ opacity: 1, x: 0 }}
                        transition={{ delay: index * 0.05 }}
                        className={`
                          w-full px-3 py-2.5 text-left text-sm font-medium rounded-lg
                          transition-all duration-200 flex items-center justify-between group
                          ${action.color} text-gray-700
                        `}
                        onClick={() => handleOptionClick(action.action)}
                      >
                        <div className="flex items-center gap-3">
                          <div className="transition-transform group-hover:scale-110">
                            {action.icon}
                          </div>
                          {action.label}
                        </div>
                        {action.shortcut && (
                          <span className="text-xs bg-white/60 px-1.5 py-0.5 rounded font-mono">
                            {action.shortcut}
                          </span>
                        )}
                      </motion.button>
                    ))}
                  </div>
                </div>
              )}

              {/* Status Management */}
              {onChangeStatus && (
                <div className="px-2 mt-3">
                  <div className="text-xs font-medium text-gray-500 px-2 py-1 mb-1">
                    Status Management
                  </div>
                  <div className="relative">
                    <motion.button
                      className="w-full px-3 py-2.5 text-left text-sm font-medium rounded-lg text-gray-700 hover:bg-slate-50 transition-all duration-200 flex items-center justify-between group"
                      onClick={() => setShowStatusSubmenu(!showStatusSubmenu)}
                      whileHover={{ x: 2 }}
                    >
                      <div className="flex items-center gap-3">
                        <Settings className="w-4 h-4 transition-transform group-hover:rotate-90 duration-300" />
                        Change Status
                      </div>
                      <motion.div
                        animate={{ rotate: showStatusSubmenu ? 90 : 0 }}
                        transition={{ duration: 0.2 }}
                      >
                        <ChevronRight className="w-4 h-4 text-gray-400" />
                      </motion.div>
                    </motion.button>
                    
                    <AnimatePresence>
                      {showStatusSubmenu && (
                        <motion.div
                          initial={{ opacity: 0, height: 0 }}
                          animate={{ opacity: 1, height: 'auto' }}
                          exit={{ opacity: 0, height: 0 }}
                          transition={{ duration: 0.2 }}
                          className="mt-2 ml-4 space-y-1 border-l-2 border-gray-100 pl-3"
                        >
                          {statusOptions.map((status, index) => (
                            <motion.button
                              key={status.value}
                              initial={{ opacity: 0, x: -10 }}
                              animate={{ opacity: 1, x: 0 }}
                              transition={{ delay: index * 0.05 }}
                              className={`
                                w-full px-3 py-2 text-left text-sm rounded-lg
                                transition-all duration-200 flex items-center gap-3 group
                                hover:shadow-sm ${status.color}
                              `}
                              onClick={() => handleOptionClick(() => onChangeStatus(status.value))}
                            >
                              <div className="transition-transform group-hover:scale-110">
                                {status.icon}
                              </div>
                              <div>
                                <div className="font-medium">{status.label}</div>
                                <div className="text-xs opacity-75">{status.description}</div>
                              </div>
                            </motion.button>
                          ))}
                        </motion.div>
                      )}
                    </AnimatePresence>
                  </div>
                </div>
              )}

              {/* Secondary Actions */}
              {secondaryActions.length > 0 && (
                <div className="px-2 mt-3">
                  <div className="text-xs font-medium text-gray-500 px-2 py-1 mb-1">
                    More Actions
                  </div>
                  <div className="space-y-1">
                    {secondaryActions.map((action, index) => (
                      <motion.button
                        key={action.label}
                        initial={{ opacity: 0, x: -10 }}
                        animate={{ opacity: 1, x: 0 }}
                        transition={{ delay: (quickActions.length + index) * 0.05 }}
                        className={`
                          w-full px-3 py-2 text-left text-sm font-medium rounded-lg
                          transition-all duration-200 flex items-center gap-3 group
                          ${action.color} text-gray-700
                        `}
                        onClick={() => handleOptionClick(action.action)}
                      >
                        <div className="transition-transform group-hover:scale-110">
                          {action.icon}
                        </div>
                        {action.label}
                      </motion.button>
                    ))}
                  </div>
                </div>
              )}

              {/* Destructive Actions */}
              {onArchive && (
                <div className="px-2 mt-3 pt-3 border-t border-gray-100">
                  <motion.button
                    initial={{ opacity: 0, x: -10 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ delay: 0.2 }}
                    className="w-full px-3 py-2.5 text-left text-sm font-medium rounded-lg text-red-600 hover:bg-red-50 transition-all duration-200 flex items-center gap-3 group"
                    onClick={() => handleOptionClick(onArchive)}
                  >
                    <div className="transition-transform group-hover:scale-110">
                      <Archive className="w-4 h-4" />
                    </div>
                    Archive Document
                  </motion.button>
                </div>
              )}
            </div>
          </motion.div>
        </AnimatePresence>,
        window.document.body
      )}
    </div>
  );
}

================
File: client/src/components/documents/DocumentViewer.tsx
================
import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { UserDocument } from '@/types';
import { Download, X, FileText, AlertTriangle, Loader2, Info } from 'lucide-react';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';

interface DocumentViewerProps {
  document: UserDocument;
  isOpen: boolean;
  onClose: () => void;
}

export default function DocumentViewer({ document, isOpen, onClose }: DocumentViewerProps) {
  const [isLoading, setIsLoading] = useState(false);

  const handleDownload = () => {
    // Create a direct link to download the file with proper authentication
    const link = window.document.createElement('a');
    link.href = document.fileUrl; // This is the API endpoint: /api/user-documents/:id/download
    link.setAttribute('download', document.fileName);
    link.style.display = 'none';
    window.document.body.appendChild(link);
    link.click();
    window.document.body.removeChild(link);
  };

  // Determine if the file is an image type
  const isImageType = (fileType: string) => {
    return fileType.startsWith('image/');
  };

  // Get file icon and description
  const getFileInfo = () => {
    if (isImageType(document.fileType)) {
      return {
        description: 'Image file',
        icon: <FileText className="mx-auto h-12 w-12 text-blue-400 mb-4" />
      };
    } else if (document.fileType === 'application/pdf') {
      return {
        description: 'PDF document',
        icon: <FileText className="mx-auto h-12 w-12 text-red-400 mb-4" />
      };
    } else if (document.fileType.includes('word') || document.fileType.includes('document')) {
      return {
        description: 'Word document',
        icon: <FileText className="mx-auto h-12 w-12 text-blue-600 mb-4" />
      };
    } else if (document.fileType.includes('excel') || document.fileType.includes('sheet')) {
      return {
        description: 'Excel spreadsheet',
        icon: <FileText className="mx-auto h-12 w-12 text-green-600 mb-4" />
      };
    } else {
      return {
        description: 'Document',
        icon: <FileText className="mx-auto h-12 w-12 text-slate-400 mb-4" />
      };
    }
  };

  const fileInfo = getFileInfo();

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-4xl h-[80vh] max-h-[800px] flex flex-col">
        <DialogHeader className="flex justify-between items-center">
          <DialogTitle>{document.title}</DialogTitle>
          <div className="flex items-center space-x-2">
            <Button variant="outline" size="sm" onClick={handleDownload}>
              <Download className="h-4 w-4 mr-1" />
              Download
            </Button>
            <Button variant="ghost" size="sm" onClick={onClose}>
              <X className="h-4 w-4" />
            </Button>
          </div>
        </DialogHeader>

        <div className="flex-1 overflow-hidden">
          <div className="h-full flex items-center justify-center bg-slate-50">
            <div className="text-center p-8 max-w-md">
              {fileInfo.icon}
              <h3 className="text-lg font-medium mb-2">{document.fileName}</h3>
              <p className="text-slate-600 mb-2">{fileInfo.description}</p>
              <p className="text-sm text-slate-500 mb-6">
                {(document.fileSize / 1024 / 1024).toFixed(2)} MB
              </p>
              
              <div className="bg-blue-50 border border-blue-200 rounded-md p-4 mb-6">
                <div className="flex">
                  <Info className="h-5 w-5 text-blue-500 mr-2 mt-0.5" />
                  <div>
                    <p className="text-sm text-blue-800">
                      Preview is currently unavailable. Please download the file to view its contents.
                    </p>
                  </div>
                </div>
              </div>
              
              <Button onClick={handleDownload} size="lg">
                <Download className="h-4 w-4 mr-2" />
                Download File
              </Button>
            </div>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
}

================
File: client/src/components/documents/FileUploader.tsx
================
import { useState, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { UploadCloud, X, AlertCircle, File, Loader2, Folder } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { cn } from '@/lib/utils';

interface FolderOption {
  id: string;
  name: string;
}

interface FileUploaderProps {
  onFileUpload: (file: File, metadata: { title: string; description?: string; tags?: string[]; folderId?: string }) => Promise<void>;
  folders?: FolderOption[];
  defaultFolderId?: string;
  isUploading?: boolean;
}

export default function FileUploader({ onFileUpload, folders = [], defaultFolderId, isUploading = false }: FileUploaderProps) {
  const [dragActive, setDragActive] = useState(false);
  const [file, setFile] = useState<File | null>(null);
  const [fileError, setFileError] = useState<string | null>(null);
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [tags, setTags] = useState('');
  const [selectedFolderId, setSelectedFolderId] = useState<string>(defaultFolderId || (folders.length > 0 ? folders[0].id : ''));
  
  const inputRef = useRef<HTMLInputElement>(null);
  const { toast } = useToast();

  const handleDrag = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    
    if (e.type === 'dragenter' || e.type === 'dragover') {
      setDragActive(true);
    } else if (e.type === 'dragleave') {
      setDragActive(false);
    }
  };

  const validateFile = (file: File) => {
    // Accept common document formats: PDF, Word, Excel, PowerPoint, etc.
    const validTypes = [
      'application/pdf', 
      'application/msword', 
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
      'application/vnd.ms-excel',
      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
      'application/vnd.ms-powerpoint',
      'application/vnd.openxmlformats-officedocument.presentationml.presentation',
      'text/plain',
      'text/csv'
    ];
    
    if (!validTypes.includes(file.type)) {
      return 'Invalid file type. Please upload a PDF, Word, Excel, PowerPoint, or text document.';
    }
    
    // Limit file size to 20MB
    if (file.size > 20 * 1024 * 1024) {
      return 'File is too large. Please upload a file smaller than 20MB.';
    }
    
    return null;
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);
    
    if (e.dataTransfer.files && e.dataTransfer.files[0]) {
      const droppedFile = e.dataTransfer.files[0];
      const error = validateFile(droppedFile);
      
      if (error) {
        setFileError(error);
        toast({
          title: 'Invalid File',
          description: error,
          variant: 'destructive'
        });
      } else {
        setFile(droppedFile);
        setFileError(null);
        // Auto-populate title with filename (without extension)
        const fileName = droppedFile.name.split('.').slice(0, -1).join('.');
        setTitle(fileName || droppedFile.name);
      }
    }
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files[0]) {
      const selectedFile = e.target.files[0];
      const error = validateFile(selectedFile);
      
      if (error) {
        setFileError(error);
        toast({
          title: 'Invalid File',
          description: error,
          variant: 'destructive'
        });
      } else {
        setFile(selectedFile);
        setFileError(null);
        // Auto-populate title with filename (without extension)
        const fileName = selectedFile.name.split('.').slice(0, -1).join('.');
        setTitle(fileName || selectedFile.name);
      }
    }
  };

  const handleButtonClick = () => {
    inputRef.current?.click();
  };

  const handleRemoveFile = () => {
    setFile(null);
    setFileError(null);
    if (inputRef.current) inputRef.current.value = '';
  };

  const handleSubmit = async () => {
    if (!file) {
      setFileError('Please select a file to upload');
      return;
    }
    
    if (!title.trim()) {
      toast({
        title: 'Missing Title',
        description: 'Please provide a title for your document',
        variant: 'destructive'
      });
      return;
    }
    
    try {
      console.log('Preparing file upload:', file.name, 'Size:', file.size, 'Type:', file.type);
      
      const tagArray = tags.split(',')
        .map(tag => tag.trim())
        .filter(tag => tag.length > 0);
      
      const metadata = {
        title: title.trim(),
        description: description.trim() || undefined,
        tags: tagArray.length > 0 ? tagArray : undefined,
        folderId: selectedFolderId || undefined
      };
      
      console.log('Upload metadata:', metadata);
      
      await onFileUpload(file, metadata);
      console.log('Upload completed successfully');
      
      // Reset form after successful upload
      setFile(null);
      setTitle('');
      setDescription('');
      setTags('');
      setSelectedFolderId(defaultFolderId || (folders.length > 0 ? folders[0].id : ''));
      if (inputRef.current) inputRef.current.value = '';
      
    } catch (error) {
      console.error('Error uploading file:', error);
      toast({
        title: 'Upload Failed',
        description: 'There was an error uploading your document. Please try again.',
        variant: 'destructive'
      });
    }
  };

  return (
    <div className="space-y-6">
      <div 
        className={cn(
          "border-2 border-dashed rounded-lg p-6 transition-colors",
          dragActive ? "border-primary-500 bg-primary-50" : "border-slate-300",
          fileError ? "border-error-300 bg-error-50" : ""
        )}
        onDragEnter={handleDrag}
        onDragLeave={handleDrag}
        onDragOver={handleDrag}
        onDrop={handleDrop}
      >
        <div className="flex flex-col items-center justify-center py-4">
          {!file ? (
            <>
              <UploadCloud 
                className={cn(
                  "h-12 w-12 mb-4",
                  fileError ? "text-error-500" : "text-slate-400"
                )} 
              />
              <h3 className="text-lg font-medium mb-2">Drag & drop your document</h3>
              <p className="text-sm text-slate-500 text-center mb-6">
                Support for PDF, Word, Excel, PowerPoint, and text files
                <br />
                Max file size: 20MB
              </p>
              <Button 
                type="button" 
                variant="outline" 
                onClick={handleButtonClick}
                className="relative"
              >
                Browse files
                <input 
                  ref={inputRef}
                  type="file" 
                  className="sr-only"
                  onChange={handleFileChange}
                  accept=".pdf,.doc,.docx,.xls,.xlsx,.ppt,.pptx,.txt,.csv"
                  title="Upload a file"
                  placeholder="Upload a file"
                />
              </Button>
              {fileError && (
                <div className="flex items-center text-error-600 mt-4">
                  <AlertCircle className="h-4 w-4 mr-1" />
                  <span className="text-sm">{fileError}</span>
                </div>
              )}
            </>
          ) : (
            <div className="w-full">
              <div className="flex items-center justify-between p-3 bg-slate-50 rounded">
                <div className="flex items-center space-x-3">
                  <div className="h-10 w-10 rounded bg-primary-100 text-primary-700 flex items-center justify-center">
                    <File className="h-5 w-5" />
                  </div>
                  <div>
                    <p className="font-medium text-sm">{file.name}</p>
                    <p className="text-xs text-slate-500">
                      {(file.size / 1024 / 1024).toFixed(2)} MB
                    </p>
                  </div>
                </div>
                <Button 
                  variant="ghost" 
                  size="sm" 
                  className="h-8 w-8 p-0"
                  onClick={handleRemoveFile}
                >
                  <X className="h-4 w-4" />
                  <span className="sr-only">Remove</span>
                </Button>
              </div>
            </div>
          )}
        </div>
      </div>

      {file && (
        <div className="space-y-4">
          <div>
            <Label htmlFor="document-title" className="block text-sm font-medium text-slate-700 mb-1">
              Document Title <span className="text-error-500">*</span>
            </Label>
            <Input
              id="document-title"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              placeholder="Enter document title"
            />
          </div>
          
          <div>
            <Label htmlFor="document-description" className="block text-sm font-medium text-slate-700 mb-1">
              Description (Optional)
            </Label>
            <Input
              id="document-description"
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              placeholder="Enter a brief description"
            />
          </div>
          
          {folders.length > 0 && (
            <div>
              <Label htmlFor="document-folder" className="block text-sm font-medium text-slate-700 mb-1">
                <Folder className="w-4 h-4 inline mr-1" />
                Folder
              </Label>
              <Select value={selectedFolderId} onValueChange={setSelectedFolderId}>
                <SelectTrigger>
                  <SelectValue placeholder="Select a folder" />
                </SelectTrigger>
                <SelectContent>
                  {folders.map((folder) => (
                    <SelectItem key={folder.id} value={folder.id}>
                      {folder.name}
                    </SelectItem>
                  ))}
                </SelectContent>
              </Select>
            </div>
          )}
          
          <div>
            <Label htmlFor="document-tags" className="block text-sm font-medium text-slate-700 mb-1">
              Tags (Optional)
            </Label>
            <Input
              id="document-tags"
              value={tags}
              onChange={(e) => setTags(e.target.value)}
              placeholder="Enter tags separated by commas"
            />
            {tags && (
              <div className="flex flex-wrap gap-2 mt-2">
                {tags.split(',').map((tag, index) => (
                  tag.trim() && (
                    <span 
                      key={index} 
                      className="px-2 py-1 bg-slate-100 text-slate-700 rounded text-xs"
                    >
                      {tag.trim()}
                    </span>
                  )
                ))}
              </div>
            )}
          </div>
          
          <div className="pt-2">
            <Button
              onClick={handleSubmit}
              disabled={isUploading || !file || !title.trim()}
              className="w-full"
            >
              {isUploading ? (
                <>
                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                  Uploading...
                </>
              ) : (
                'Upload Document'
              )}
            </Button>
          </div>
        </div>
      )}
    </div>
  );
}

================
File: client/src/components/documents/FolderManager.tsx
================
import React, { useState, useRef, useCallback } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  FolderPlus, 
  Upload, 
  MoreHorizontal,
  Edit2,
  Trash2,
  FileText,
  X,
  Save,
  Plus,
  Folder,
  FolderOpen
} from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { useToast } from '@/hooks/use-toast';

interface FolderItem {
  id: string;
  name: string;
  documentCount: number;
  createdAt: string;
  isDefault?: boolean;
}

interface FolderManagerProps {
  folders: FolderItem[];
  onCreateFolder: (name: string) => Promise<void>;
  onRenameFolder: (id: string, newName: string) => Promise<void>;
  onDeleteFolder: (id: string) => Promise<void>;
  onUploadToFolder: (folderId: string, files: FileList) => Promise<void>;
  isCreating?: boolean;
  className?: string;
}

interface CreateFolderModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSave: (name: string) => void;
  isSaving?: boolean;
}

const CreateFolderModal: React.FC<CreateFolderModalProps> = ({
  isOpen,
  onClose,
  onSave,
  isSaving = false
}) => {
  const [folderName, setFolderName] = useState('');
  const [error, setError] = useState('');

  const handleSave = () => {
    const trimmedName = folderName.trim();
    
    if (!trimmedName) {
      setError('Folder name is required');
      return;
    }
    
    if (trimmedName.length < 2) {
      setError('Folder name must be at least 2 characters');
      return;
    }
    
    if (trimmedName.length > 50) {
      setError('Folder name must be less than 50 characters');
      return;
    }
    
    // Check for invalid characters
    const invalidChars = /[<>:"/\\|?*]/;
    if (invalidChars.test(trimmedName)) {
      setError('Folder name contains invalid characters');
      return;
    }
    
    setError('');
    onSave(trimmedName);
  };

  const handleClose = () => {
    setFolderName('');
    setError('');
    onClose();
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !isSaving) {
      handleSave();
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={handleClose}>
      <DialogContent className="sm:max-w-md">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <FolderPlus className="w-5 h-5" />
            Create New Folder
          </DialogTitle>
        </DialogHeader>
        
        <div className="space-y-4 py-4">
          <div className="space-y-2">
            <Label htmlFor="folderName">Folder Name</Label>
            <Input
              id="folderName"
              value={folderName}
              onChange={(e) => {
                setFolderName(e.target.value);
                if (error) setError('');
              }}
              onKeyPress={handleKeyPress}
              placeholder="Enter folder name"
              disabled={isSaving}
              autoFocus
            />
            {error && (
              <p className="text-sm text-red-600">{error}</p>
            )}
          </div>
          
          <div className="flex gap-2 justify-end">
            <Button
              variant="outline"
              onClick={handleClose}
              disabled={isSaving}
            >
              Cancel
            </Button>
            <Button
              onClick={handleSave}
              disabled={isSaving || !folderName.trim()}
              className="bg-blue-600 hover:bg-blue-700"
            >
              {isSaving ? 'Creating...' : 'Create Folder'}
            </Button>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};

interface FolderCardProps {
  folder: FolderItem;
  onRename: (id: string, newName: string) => void;
  onDelete: (id: string) => void;
  onUpload: (folderId: string, files: FileList) => void;
  isDragOver: boolean;
  onDragOver: (e: React.DragEvent, folderId: string) => void;
  onDragLeave: (e: React.DragEvent) => void;
  onDrop: (e: React.DragEvent, folderId: string) => void;
}

const FolderCard: React.FC<FolderCardProps> = ({
  folder,
  onRename,
  onDelete,
  onUpload,
  isDragOver,
  onDragOver,
  onDragLeave,
  onDrop
}) => {
  const [isEditing, setIsEditing] = useState(false);
  const [editName, setEditName] = useState(folder.name);
  const [showActions, setShowActions] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);
  const { toast } = useToast();

  const handleSaveEdit = () => {
    const trimmedName = editName.trim();
    if (trimmedName && trimmedName !== folder.name) {
      onRename(folder.id, trimmedName);
    }
    setIsEditing(false);
    setEditName(folder.name);
  };

  const handleCancelEdit = () => {
    setIsEditing(false);
    setEditName(folder.name);
  };

  const handleFileSelect = (e: React.ChangeEvent<HTMLInputElement>) => {
    const files = e.target.files;
    if (files && files.length > 0) {
      onUpload(folder.id, files);
    }
    // Reset the input to allow selecting the same files again
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  const handleUploadClick = () => {
    fileInputRef.current?.click();
  };

  return (
    <motion.div
      layout
      initial={{ opacity: 0, scale: 0.9 }}
      animate={{ opacity: 1, scale: 1 }}
      exit={{ opacity: 0, scale: 0.9 }}
      className={`
        relative group p-4 rounded-xl border-2 transition-all duration-300 cursor-pointer
        ${isDragOver 
          ? 'border-blue-400 bg-blue-50 shadow-lg scale-105' 
          : 'border-gray-200 hover:border-blue-300 hover:shadow-md'
        }
        bg-white
      `}
      onMouseEnter={() => setShowActions(true)}
      onMouseLeave={() => setShowActions(false)}
      onDragOver={(e) => onDragOver(e, folder.id)}
      onDragLeave={onDragLeave}
      onDrop={(e) => onDrop(e, folder.id)}
    >
      {/* Hidden file input */}
      <input
        type="file"
        ref={fileInputRef}
        onChange={handleFileSelect}
        multiple
        className="hidden"
        accept=".pdf,.doc,.docx,.xls,.xlsx,.ppt,.pptx,.txt,.rtf,.csv,.json,.xml"
        aria-label={`Upload files to ${folder.name} folder`}
        title={`Upload files to ${folder.name} folder`}
      />

      {/* Folder Icon */}
      <div className="flex items-center justify-between mb-3">
        <div className="flex items-center gap-2">
          {isDragOver ? (
            <FolderOpen className="w-8 h-8 text-blue-500" />
          ) : (
            <Folder className="w-8 h-8 text-blue-500" />
          )}
          <div className="flex-1">
            {isEditing ? (
              <div className="flex items-center gap-2">
                <Input
                  value={editName}
                  onChange={(e) => setEditName(e.target.value)}
                  onKeyPress={(e) => {
                    if (e.key === 'Enter') handleSaveEdit();
                    if (e.key === 'Escape') handleCancelEdit();
                  }}
                  onBlur={handleSaveEdit}
                  className="text-sm h-6 px-2"
                  autoFocus
                  onFocus={(e) => e.target.select()}
                />
              </div>
            ) : (
              <h3 className="font-medium text-gray-900 text-sm truncate">
                {folder.name}
              </h3>
            )}
          </div>
        </div>

        {/* Actions Menu */}
        <AnimatePresence>
          {showActions && !isEditing && (
            <motion.div
              initial={{ opacity: 0, scale: 0.8 }}
              animate={{ opacity: 1, scale: 1 }}
              exit={{ opacity: 0, scale: 0.8 }}
              className="flex items-center gap-1"
            >
              <button
                onClick={handleUploadClick}
                className="p-1 rounded-md hover:bg-blue-100 transition-colors"
                title="Upload files to this folder"
              >
                <Upload className="w-4 h-4 text-blue-600" />
              </button>
              
              {!folder.isDefault && (
                <>
                  <button
                    onClick={() => setIsEditing(true)}
                    className="p-1 rounded-md hover:bg-gray-100 transition-colors"
                    title="Rename folder"
                  >
                    <Edit2 className="w-4 h-4 text-gray-600" />
                  </button>
                  
                  <button
                    onClick={() => onDelete(folder.id)}
                    className="p-1 rounded-md hover:bg-red-100 transition-colors"
                    title="Delete folder"
                  >
                    <Trash2 className="w-4 h-4 text-red-600" />
                  </button>
                </>
              )}
            </motion.div>
          )}
        </AnimatePresence>
      </div>

      {/* Document Count */}
      <div className="text-xs text-gray-500 flex items-center gap-1">
        <FileText className="w-3 h-3" />
        {folder.documentCount} {folder.documentCount === 1 ? 'document' : 'documents'}
      </div>

      {/* Drag overlay */}
      {isDragOver && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          className="absolute inset-0 bg-blue-100/50 rounded-xl flex items-center justify-center border-2 border-blue-400 border-dashed"
        >
          <div className="text-blue-600 text-center">
            <Upload className="w-8 h-8 mx-auto mb-2" />
            <p className="text-sm font-medium">Drop files here</p>
          </div>
        </motion.div>
      )}

      {/* Default folder indicator */}
      {folder.isDefault && (
        <div className="absolute top-2 right-2 bg-gray-100 text-gray-600 text-xs px-2 py-1 rounded-full">
          Default
        </div>
      )}
    </motion.div>
  );
};

export default function FolderManager({
  folders,
  onCreateFolder,
  onRenameFolder,
  onDeleteFolder,
  onUploadToFolder,
  isCreating = false,
  className = ''
}: FolderManagerProps) {
  const [showCreateModal, setShowCreateModal] = useState(false);
  const [dragOverFolder, setDragOverFolder] = useState<string | null>(null);
  const { toast } = useToast();

  const handleCreateFolder = async (name: string) => {
    try {
      await onCreateFolder(name);
      setShowCreateModal(false);
      toast({
        title: "Folder Created",
        description: `Folder "${name}" has been created successfully.`,
      });
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to create folder. Please try again.",
        variant: "destructive",
      });
    }
  };

  const handleRenameFolder = async (id: string, newName: string) => {
    try {
      await onRenameFolder(id, newName);
      toast({
        title: "Folder Renamed",
        description: `Folder has been renamed to "${newName}".`,
      });
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to rename folder. Please try again.",
        variant: "destructive",
      });
    }
  };

  const handleDeleteFolder = async (id: string) => {
    const folder = folders.find(f => f.id === id);
    if (!folder) return;

    if (folder.documentCount > 0) {
      toast({
        title: "Cannot Delete Folder",
        description: "Please move or delete all documents in this folder first.",
        variant: "destructive",
      });
      return;
    }

    try {
      await onDeleteFolder(id);
      toast({
        title: "Folder Deleted",
        description: `Folder "${folder.name}" has been deleted.`,
      });
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to delete folder. Please try again.",
        variant: "destructive",
      });
    }
  };

  const handleDragOver = useCallback((e: React.DragEvent, folderId: string) => {
    e.preventDefault();
    e.stopPropagation();
    setDragOverFolder(folderId);
  }, []);

  const handleDragLeave = useCallback((e: React.DragEvent) => {
    e.preventDefault();
    e.stopPropagation();
    // Only clear if we're leaving the actual folder card
    if (!e.currentTarget.contains(e.relatedTarget as Node)) {
      setDragOverFolder(null);
    }
  }, []);

  const handleDrop = useCallback(async (e: React.DragEvent, folderId: string) => {
    e.preventDefault();
    e.stopPropagation();
    setDragOverFolder(null);

    const files = e.dataTransfer.files;
    if (files.length > 0) {
      try {
        await onUploadToFolder(folderId, files);
        const folder = folders.find(f => f.id === folderId);
        toast({
          title: "Files Uploaded",
          description: `${files.length} file(s) uploaded to "${folder?.name}" successfully.`,
        });
      } catch (error) {
        toast({
          title: "Upload Failed",
          description: "Failed to upload files. Please try again.",
          variant: "destructive",
        });
      }
    }
  }, [folders, onUploadToFolder, toast]);

  return (
    <div className={`space-y-4 ${className}`}>
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-lg font-semibold text-gray-900">Folders</h2>
          <p className="text-sm text-gray-500">
            Organize your documents by creating folders and dragging files to them
          </p>
        </div>
        
        <Button
          onClick={() => setShowCreateModal(true)}
          disabled={isCreating}
          className="bg-blue-600 hover:bg-blue-700"
        >
          <FolderPlus className="w-4 h-4 mr-2" />
          {isCreating ? 'Creating...' : 'New Folder'}
        </Button>
      </div>

      {/* Folders Grid */}
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4">
        <AnimatePresence>
          {folders.map((folder) => (
            <FolderCard
              key={folder.id}
              folder={folder}
              onRename={handleRenameFolder}
              onDelete={handleDeleteFolder}
              onUpload={onUploadToFolder}
              isDragOver={dragOverFolder === folder.id}
              onDragOver={handleDragOver}
              onDragLeave={handleDragLeave}
              onDrop={handleDrop}
            />
          ))}
        </AnimatePresence>
      </div>

      {/* Empty State */}
      {folders.length === 0 && (
        <div className="text-center py-12">
          <FolderPlus className="w-12 h-12 text-gray-400 mx-auto mb-4" />
          <h3 className="text-lg font-medium text-gray-900 mb-2">No folders yet</h3>
          <p className="text-gray-500 mb-4">
            Create your first folder to organize your documents
          </p>
          <Button
            onClick={() => setShowCreateModal(true)}
            className="bg-blue-600 hover:bg-blue-700"
          >
            <FolderPlus className="w-4 h-4 mr-2" />
            Create First Folder
          </Button>
        </div>
      )}

      {/* Create Folder Modal */}
      <CreateFolderModal
        isOpen={showCreateModal}
        onClose={() => setShowCreateModal(false)}
        onSave={handleCreateFolder}
        isSaving={isCreating}
      />
    </div>
  );
}

================
File: client/src/components/documents/ShareModal.tsx
================
import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  X, 
  Mail, 
  Copy, 
  Download,
  Share2,
  MessageCircle,
  Send,
  Link,
  Facebook,
  Twitter,
  Linkedin,
  Instagram,
  CheckCircle,
  AlertCircle,
  FileText
} from 'lucide-react';
import { UserDocument, Document } from '@/types';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { useToast } from '@/hooks/use-toast';

interface ShareModalProps {
  document: UserDocument | Document;
  isOpen: boolean;
  onClose: () => void;
  onDownload?: () => void;
}

interface ShareOption {
  id: string;
  name: string;
  icon: React.ReactNode;
  color: string;
  action: () => void;
  description?: string;
}

export default function ShareModal({
  document,
  isOpen,
  onClose,
  onDownload
}: ShareModalProps) {
  const [emailAddress, setEmailAddress] = useState('');
  const [emailMessage, setEmailMessage] = useState('');
  const [shareUrl, setShareUrl] = useState('');
  const [copySuccess, setCopySuccess] = useState(false);
  const [emailSending, setEmailSending] = useState(false);
  const { toast } = useToast();

  const isUserDocument = 'userId' in document;

  // Generate share URL and default message
  useEffect(() => {
    if (isOpen) {
      const baseUrl = window.location.origin;
      let url = '';
      
      if (isUserDocument) {
        // For user documents, create a generic share URL
        url = `${baseUrl}/document-repository`;
      } else {
        // For compliance documents, link directly to the document
        url = `${baseUrl}/documents/${document.id}`;
      }
      
      setShareUrl(url);
      setEmailMessage(`Hi!\n\nI wanted to share this document with you: "${document.title}"\n\nYou can view it here: ${url}\n\nBest regards`);
    }
  }, [isOpen, document, isUserDocument]);

  // Reset state when modal closes
  useEffect(() => {
    if (!isOpen) {
      setEmailAddress('');
      setEmailMessage('');
      setCopySuccess(false);
      setEmailSending(false);
    }
  }, [isOpen]);

  const handleCopyLink = async () => {
    try {
      await navigator.clipboard.writeText(shareUrl);
      setCopySuccess(true);
      toast({
        title: "Link Copied",
        description: "Document link has been copied to clipboard.",
      });
      
      // Reset copy success state after 3 seconds
      setTimeout(() => setCopySuccess(false), 3000);
    } catch (error) {
      toast({
        title: "Copy Failed",
        description: "Could not copy link to clipboard.",
        variant: "destructive",
      });
    }
  };

  const handleEmailShare = async () => {
    if (!emailAddress.trim()) {
      toast({
        title: "Email Required",
        description: "Please enter an email address.",
        variant: "destructive",
      });
      return;
    }

    setEmailSending(true);
    
    try {
      // Create mailto link for now - in production you'd send via backend API
      const subject = encodeURIComponent(`Shared Document: ${document.title}`);
      const body = encodeURIComponent(emailMessage);
      const mailtoLink = `mailto:${emailAddress}?subject=${subject}&body=${body}`;
      
      window.open(mailtoLink, '_blank');
      
      toast({
        title: "Email Opened",
        description: "Your email client has been opened with the document link.",
      });
      
      onClose();
    } catch (error) {
      toast({
        title: "Email Failed",
        description: "Could not open email client.",
        variant: "destructive",
      });
    } finally {
      setEmailSending(false);
    }
  };

  const handleSocialShare = (platform: string) => {
    const text = `Check out this document: "${document.title}"`;
    const url = encodeURIComponent(shareUrl);
    const encodedText = encodeURIComponent(text);
    
    let shareLink = '';
    
    switch (platform) {
      case 'facebook':
        shareLink = `https://www.facebook.com/sharer/sharer.php?u=${url}`;
        break;
      case 'twitter':
        shareLink = `https://twitter.com/intent/tweet?text=${encodedText}&url=${url}`;
        break;
      case 'linkedin':
        shareLink = `https://www.linkedin.com/sharing/share-offsite/?url=${url}`;
        break;
      case 'whatsapp':
        shareLink = `https://wa.me/?text=${encodedText}%20${url}`;
        break;
      case 'telegram':
        shareLink = `https://t.me/share/url?url=${url}&text=${encodedText}`;
        break;
      default:
        return;
    }
    
    window.open(shareLink, '_blank', 'width=600,height=400,scrollbars=yes,resizable=yes');
  };

     const handleNativeShare = async () => {
     if ('share' in navigator) {
       try {
         await navigator.share({
           title: document.title,
           text: `Check out this document: "${document.title}"`,
           url: shareUrl,
         });
         
         toast({
           title: "Shared Successfully",
           description: "Document has been shared.",
         });
       } catch (error) {
         if ((error as Error).name !== 'AbortError') {
           toast({
             title: "Share Failed",
             description: "Could not share document.",
             variant: "destructive",
           });
         }
       }
     }
   };

  const shareOptions: ShareOption[] = [
    {
      id: 'copy',
      name: 'Copy Link',
      icon: copySuccess ? <CheckCircle className="w-5 h-5" /> : <Copy className="w-5 h-5" />,
      color: copySuccess ? 'bg-green-50 text-green-600 border-green-200' : 'bg-blue-50 text-blue-600 border-blue-200',
      action: handleCopyLink,
      description: 'Copy link to clipboard'
    },
         ...('share' in navigator ? [{
       id: 'native',
       name: 'Share',
       icon: <Share2 className="w-5 h-5" />,
       color: 'bg-purple-50 text-purple-600 border-purple-200',
       action: handleNativeShare,
       description: 'Use device share menu'
     }] : []),
    {
      id: 'facebook',
      name: 'Facebook',
      icon: <Facebook className="w-5 h-5" />,
      color: 'bg-blue-50 text-blue-600 border-blue-200',
      action: () => handleSocialShare('facebook'),
      description: 'Share on Facebook'
    },
    {
      id: 'twitter',
      name: 'Twitter',
      icon: <Twitter className="w-5 h-5" />,
      color: 'bg-sky-50 text-sky-600 border-sky-200',
      action: () => handleSocialShare('twitter'),
      description: 'Share on Twitter'
    },
    {
      id: 'linkedin',
      name: 'LinkedIn',
      icon: <Linkedin className="w-5 h-5" />,
      color: 'bg-blue-50 text-blue-700 border-blue-200',
      action: () => handleSocialShare('linkedin'),
      description: 'Share on LinkedIn'
    },
    {
      id: 'whatsapp',
      name: 'WhatsApp',
      icon: <MessageCircle className="w-5 h-5" />,
      color: 'bg-green-50 text-green-600 border-green-200',
      action: () => handleSocialShare('whatsapp'),
      description: 'Share via WhatsApp'
    },
    {
      id: 'telegram',
      name: 'Telegram',
      icon: <Send className="w-5 h-5" />,
      color: 'bg-blue-50 text-blue-500 border-blue-200',
      action: () => handleSocialShare('telegram'),
      description: 'Share via Telegram'
    },
    ...(onDownload ? [{
      id: 'download',
      name: 'Download',
      icon: <Download className="w-5 h-5" />,
      color: 'bg-gray-50 text-gray-600 border-gray-200',
      action: () => {
        onDownload();
        onClose();
      },
      description: 'Download document'
    }] : [])
  ];

  if (!isOpen) return null;

  return (
    <AnimatePresence>
      <div className="fixed inset-0 z-50 flex items-center justify-center">
        {/* Backdrop */}
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          className="absolute inset-0 bg-black/50 backdrop-blur-sm"
          onClick={onClose}
        />

        {/* Modal */}
        <motion.div
          initial={{ opacity: 0, scale: 0.9, y: 20 }}
          animate={{ opacity: 1, scale: 1, y: 0 }}
          exit={{ opacity: 0, scale: 0.9, y: 20 }}
          transition={{ type: "spring", damping: 20, stiffness: 300 }}
          className="relative w-full max-w-2xl max-h-[90vh] bg-white rounded-xl shadow-2xl overflow-hidden"
          onClick={(e) => e.stopPropagation()}
        >
          {/* Header */}
          <div className="flex items-center justify-between p-6 border-b bg-gradient-to-r from-blue-50 to-indigo-50">
            <div className="flex items-center gap-3">
              <div className="p-2 bg-blue-100 rounded-lg">
                <Share2 className="w-5 h-5 text-blue-600" />
              </div>
              <div>
                <h2 className="text-xl font-semibold text-gray-900">
                  Share Document
                </h2>
                <p className="text-sm text-gray-500">
                  Share "{document.title}" with others
                </p>
              </div>
            </div>
            <Button
              variant="ghost"
              size="sm"
              onClick={onClose}
              className="rounded-full w-8 h-8 p-0"
            >
              <X className="w-4 h-4" />
            </Button>
          </div>

          {/* Content */}
          <div className="p-6 space-y-6 max-h-[calc(90vh-200px)] overflow-y-auto">
            {/* Document Info */}
            <div className="p-4 bg-gray-50 rounded-lg border">
              <div className="flex items-center gap-3 mb-2">
                <FileText className="w-5 h-5 text-gray-500" />
                <span className="font-medium text-gray-900">Document Information</span>
              </div>
              <div className="space-y-1 text-sm text-gray-600">
                <p><span className="font-medium">Title:</span> {document.title}</p>
                <p><span className="font-medium">Type:</span> {isUserDocument ? 'User Document' : 'Compliance Document'}</p>
                {isUserDocument && (
                  <p><span className="font-medium">Note:</span> Shared link will direct to document repository</p>
                )}
              </div>
            </div>

            {/* Quick Share Options */}
            <div className="space-y-3">
              <Label className="text-sm font-medium text-gray-900">
                Quick Share Options
              </Label>
              <div className="grid grid-cols-2 sm:grid-cols-3 gap-3">
                {shareOptions.map((option) => (
                  <motion.button
                    key={option.id}
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                    onClick={option.action}
                    className={`
                      flex flex-col items-center gap-2 p-4 rounded-lg border-2 transition-all duration-200
                      hover:shadow-md ${option.color}
                    `}
                  >
                    {option.icon}
                    <span className="text-sm font-medium">{option.name}</span>
                    {option.description && (
                      <span className="text-xs opacity-75 text-center">{option.description}</span>
                    )}
                  </motion.button>
                ))}
              </div>
            </div>

            {/* Email Share */}
            <div className="space-y-3">
              <Label className="text-sm font-medium text-gray-900">
                Share via Email
              </Label>
              <div className="space-y-3">
                <div>
                  <Label htmlFor="email" className="text-sm font-medium text-gray-700">
                    Email Address
                  </Label>
                  <Input
                    id="email"
                    type="email"
                    value={emailAddress}
                    onChange={(e) => setEmailAddress(e.target.value)}
                    placeholder="Enter email address"
                    className="mt-1"
                  />
                </div>
                <div>
                  <Label htmlFor="message" className="text-sm font-medium text-gray-700">
                    Message
                  </Label>
                  <Textarea
                    id="message"
                    value={emailMessage}
                    onChange={(e) => setEmailMessage(e.target.value)}
                    placeholder="Enter your message"
                    className="mt-1 min-h-[100px] resize-none"
                  />
                </div>
                <Button
                  onClick={handleEmailShare}
                  disabled={emailSending || !emailAddress.trim()}
                  className="w-full bg-blue-600 hover:bg-blue-700"
                >
                  <Mail className="w-4 h-4 mr-2" />
                  {emailSending ? 'Opening Email...' : 'Send Email'}
                </Button>
              </div>
            </div>

            {/* Link Preview */}
            <div className="space-y-3">
              <Label className="text-sm font-medium text-gray-900">
                Share Link
              </Label>
              <div className="flex gap-2">
                <Input
                  value={shareUrl}
                  readOnly
                  className="flex-1 bg-gray-50"
                />
                <Button
                  variant="outline"
                  onClick={handleCopyLink}
                  className={copySuccess ? 'text-green-600 border-green-300' : ''}
                >
                  {copySuccess ? <CheckCircle className="w-4 h-4" /> : <Copy className="w-4 h-4" />}
                </Button>
              </div>
            </div>
          </div>

          {/* Footer */}
          <div className="flex items-center justify-between p-6 border-t bg-gray-50">
            <div className="text-xs text-gray-500">
              Recipients will need appropriate access to view the document
            </div>
            <Button
              variant="outline"
              onClick={onClose}
            >
              Close
            </Button>
          </div>
        </motion.div>
      </div>
    </AnimatePresence>
  );
}

================
File: client/src/components/documents/UserDocumentEditModal.tsx
================
import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  X, 
  Save, 
  Loader2, 
  FileText,
  Tag,
  Folder,
  Edit3
} from 'lucide-react';
import { UserDocument } from '@/types';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';

interface UserDocumentEditModalProps {
  document: UserDocument;
  isOpen: boolean;
  onClose: () => void;
  onSave: (documentId: number, updates: Partial<UserDocument>) => void;
  isSaving?: boolean;
}

export default function UserDocumentEditModal({
  document,
  isOpen,
  onClose,
  onSave,
  isSaving = false
}: UserDocumentEditModalProps) {
  const [title, setTitle] = useState(document.title);
  const [description, setDescription] = useState(document.description || '');
  const [category, setCategory] = useState(document.category || 'General');
  const [tags, setTags] = useState<string[]>(document.tags || []);
  const [newTag, setNewTag] = useState('');

  // Reset form when document changes
  useEffect(() => {
    setTitle(document.title);
    setDescription(document.description || '');
    setCategory(document.category || 'General');
    setTags(document.tags || []);
    setNewTag('');
  }, [document]);

  const handleAddTag = () => {
    if (newTag.trim() && !tags.includes(newTag.trim())) {
      setTags([...tags, newTag.trim()]);
      setNewTag('');
    }
  };

  const handleRemoveTag = (tagToRemove: string) => {
    setTags(tags.filter(tag => tag !== tagToRemove));
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      e.preventDefault();
      handleAddTag();
    }
  };

  const handleSave = () => {
    const updates: Partial<UserDocument> = {
      title: title.trim(),
      description: description.trim() || undefined,
      category: category.trim(),
      tags: tags.length > 0 ? tags : undefined
    };

    onSave(document.id, updates);
  };

  const hasChanges = 
    title !== document.title ||
    description !== (document.description || '') ||
    category !== (document.category || 'General') ||
    JSON.stringify(tags) !== JSON.stringify(document.tags || []);

  if (!isOpen) return null;

  return (
    <AnimatePresence>
      <div className="fixed inset-0 z-50 flex items-center justify-center">
        {/* Backdrop */}
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          exit={{ opacity: 0 }}
          className="absolute inset-0 bg-black/50 backdrop-blur-sm"
          onClick={onClose}
        />

        {/* Modal */}
        <motion.div
          initial={{ opacity: 0, scale: 0.9, y: 20 }}
          animate={{ opacity: 1, scale: 1, y: 0 }}
          exit={{ opacity: 0, scale: 0.9, y: 20 }}
          transition={{ type: "spring", damping: 20, stiffness: 300 }}
          className="relative w-full max-w-2xl max-h-[90vh] bg-white rounded-xl shadow-2xl overflow-hidden"
          onClick={(e) => e.stopPropagation()}
        >
          {/* Header */}
          <div className="flex items-center justify-between p-6 border-b bg-gradient-to-r from-blue-50 to-indigo-50">
            <div className="flex items-center gap-3">
              <div className="p-2 bg-blue-100 rounded-lg">
                <Edit3 className="w-5 h-5 text-blue-600" />
              </div>
              <div>
                <h2 className="text-xl font-semibold text-gray-900">
                  Edit Document
                </h2>
                <p className="text-sm text-gray-500">
                  Update document metadata and organization
                </p>
              </div>
            </div>
            <Button
              variant="ghost"
              size="sm"
              onClick={onClose}
              className="rounded-full w-8 h-8 p-0"
            >
              <X className="w-4 h-4" />
            </Button>
          </div>

          {/* Content */}
          <div className="p-6 space-y-6 max-h-[calc(90vh-140px)] overflow-y-auto">
            {/* File Info */}
            <div className="p-4 bg-gray-50 rounded-lg border">
              <div className="flex items-center gap-3 mb-2">
                <FileText className="w-5 h-5 text-gray-500" />
                <span className="font-medium text-gray-900">File Information</span>
              </div>
              <div className="space-y-1 text-sm text-gray-600">
                <p><span className="font-medium">Filename:</span> {document.fileName}</p>
                <p><span className="font-medium">Type:</span> {document.fileType}</p>
                <p><span className="font-medium">Size:</span> {(document.fileSize / 1024).toFixed(1)} KB</p>
              </div>
            </div>

            {/* Title */}
            <div className="space-y-2">
              <Label htmlFor="title" className="text-sm font-medium">
                Document Title
              </Label>
              <Input
                id="title"
                value={title}
                onChange={(e) => setTitle(e.target.value)}
                placeholder="Enter document title"
                className="w-full"
              />
            </div>

            {/* Description */}
            <div className="space-y-2">
              <Label htmlFor="description" className="text-sm font-medium">
                Description
              </Label>
              <Textarea
                id="description"
                value={description}
                onChange={(e) => setDescription(e.target.value)}
                placeholder="Enter document description (optional)"
                className="w-full min-h-[100px] resize-none"
              />
            </div>

            {/* Category */}
            <div className="space-y-2">
              <Label htmlFor="category" className="text-sm font-medium flex items-center gap-2">
                <Folder className="w-4 h-4" />
                Category
              </Label>
              <Input
                id="category"
                value={category}
                onChange={(e) => setCategory(e.target.value)}
                placeholder="Enter category (e.g., Contracts, Reports)"
                className="w-full"
              />
            </div>

            {/* Tags */}
            <div className="space-y-2">
              <Label className="text-sm font-medium flex items-center gap-2">
                <Tag className="w-4 h-4" />
                Tags
              </Label>
              
              {/* Existing Tags */}
              {tags.length > 0 && (
                <div className="flex flex-wrap gap-2 mb-3">
                  {tags.map((tag, index) => (
                    <Badge
                      key={index}
                      variant="secondary"
                      className="px-3 py-1 bg-blue-100 text-blue-800 hover:bg-blue-200 cursor-pointer"
                      onClick={() => handleRemoveTag(tag)}
                    >
                      {tag}
                      <X className="w-3 h-3 ml-1" />
                    </Badge>
                  ))}
                </div>
              )}
              
              {/* Add New Tag */}
              <div className="flex gap-2">
                <Input
                  value={newTag}
                  onChange={(e) => setNewTag(e.target.value)}
                  onKeyPress={handleKeyPress}
                  placeholder="Add a tag and press Enter"
                  className="flex-1"
                />
                <Button
                  type="button"
                  variant="outline"
                  onClick={handleAddTag}
                  disabled={!newTag.trim() || tags.includes(newTag.trim())}
                >
                  Add
                </Button>
              </div>
            </div>
          </div>

          {/* Footer */}
          <div className="flex items-center justify-between p-6 border-t bg-gray-50">
            <div className="text-xs text-gray-500">
              {hasChanges ? 'You have unsaved changes' : 'No changes made'}
            </div>
            <div className="flex gap-3">
              <Button
                variant="outline"
                onClick={onClose}
                disabled={isSaving}
              >
                Cancel
              </Button>
              <Button
                onClick={handleSave}
                disabled={!hasChanges || isSaving}
                className="bg-blue-600 hover:bg-blue-700"
              >
                {isSaving ? (
                  <>
                    <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                    Saving...
                  </>
                ) : (
                  <>
                    <Save className="w-4 h-4 mr-2" />
                    Save Changes
                  </>
                )}
              </Button>
            </div>
          </div>
        </motion.div>
      </div>
    </AnimatePresence>
  );
}

================
File: client/src/components/documents/UserDocumentList.tsx
================
import { useState } from 'react';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { UserDocument } from '@/types';
import { formatDistanceToNow } from 'date-fns';
import { FileText, Eye, Download, Trash2, AlertTriangle, Search } from 'lucide-react';
import { Skeleton } from '@/components/ui/skeleton';
import { Input } from '@/components/ui/input';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';
import { Label } from '@/components/ui/label';
import { useToast } from '@/hooks/use-toast';

interface UserDocumentListProps {
  documents: UserDocument[];
  isLoading: boolean;
  error?: string;
  onDelete: (document: UserDocument) => Promise<void>;
  onView: (document: UserDocument) => void;
}

export default function UserDocumentList({ 
  documents, 
  isLoading, 
  error, 
  onDelete,
  onView 
}: UserDocumentListProps) {
  const [searchQuery, setSearchQuery] = useState('');
  const [documentToDelete, setDocumentToDelete] = useState<UserDocument | null>(null);
  const [isDeleting, setIsDeleting] = useState(false);
  const { toast } = useToast();

  // Filter documents by search query (title, description, and tags)
  const filteredDocuments = documents.filter(doc => {
    const query = searchQuery.toLowerCase();
    const matchesTitle = doc.title.toLowerCase().includes(query);
    const matchesDescription = doc.description?.toLowerCase().includes(query) || false;
    const matchesTags = doc.tags?.some(tag => tag.toLowerCase().includes(query)) || false;
    
    return matchesTitle || matchesDescription || matchesTags;
  });

  const handleSearchChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(e.target.value);
  };

  const handleDeleteClick = (document: UserDocument) => {
    setDocumentToDelete(document);
  };

  const confirmDelete = async () => {
    if (!documentToDelete) return;
    
    setIsDeleting(true);
    try {
      await onDelete(documentToDelete);
      toast({
        title: 'Document Deleted',
        description: `"${documentToDelete.title}" has been deleted successfully.`,
      });
    } catch (error) {
      toast({
        title: 'Delete Failed',
        description: 'There was an error deleting the document. Please try again.',
        variant: 'destructive'
      });
    } finally {
      setIsDeleting(false);
      setDocumentToDelete(null);
    }
  };

  const cancelDelete = () => {
    setDocumentToDelete(null);
  };

  const handleDownload = (doc: UserDocument) => {
    // Use the same approach as working file downloads to preserve authentication
    const link = window.document.createElement('a');
    link.href = doc.fileUrl; // This is already the full API path: /api/user-documents/:id/download
    link.setAttribute('download', doc.fileName);
    link.style.display = 'none';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  };

  if (isLoading) {
    return (
      <div className="space-y-4">
        <div className="relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400" size={16} />
          <Skeleton className="h-10 w-full rounded-md" />
        </div>
        
        {[...Array(4)].map((_, index) => (
          <Card key={index} className="overflow-hidden">
            <CardContent className="p-0">
              <div className="p-4 flex items-center">
                <Skeleton className="h-10 w-10 rounded-md mr-4" />
                <div className="space-y-2 flex-1">
                  <Skeleton className="h-5 w-1/3" />
                  <Skeleton className="h-4 w-1/4" />
                </div>
                <div className="flex space-x-2">
                  <Skeleton className="h-8 w-8 rounded-md" />
                  <Skeleton className="h-8 w-8 rounded-md" />
                  <Skeleton className="h-8 w-8 rounded-md" />
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    );
  }

  if (error) {
    return (
      <div className="p-8 text-center">
        <AlertTriangle className="mx-auto h-12 w-12 text-error-500 mb-4" />
        <h3 className="text-lg font-medium mb-2">Error loading documents</h3>
        <p className="text-slate-600 mb-4">{error}</p>
        <Button onClick={() => window.location.reload()}>
          Try Again
        </Button>
      </div>
    );
  }

  return (
    <div className="space-y-4">
      <div className="relative">
        <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-400" size={16} />
        <Input
          placeholder="Search documents..."
          value={searchQuery}
          onChange={handleSearchChange}
          className="pl-10"
        />
      </div>
      
      {filteredDocuments.length === 0 ? (
        <div className="text-center p-12 border rounded-lg bg-white">
          <FileText className="mx-auto h-12 w-12 text-slate-400 mb-4" />
          <h3 className="text-lg font-medium mb-2">No documents found</h3>
          {searchQuery ? (
            <p className="text-slate-600 mb-6">No documents match your search query.</p>
          ) : (
            <p className="text-slate-600 mb-6">Upload documents to see them here.</p>
          )}
        </div>
      ) : (
        <div className="space-y-4">
          {filteredDocuments.map((document) => (
            <Card 
              key={document.id} 
              className="overflow-hidden hover:shadow-md transition-shadow"
            >
              <CardContent className="p-0">
                <div className="p-4">
                  <div className="flex items-center justify-between">
                    <div className="flex items-center">
                      <div className="h-10 w-10 rounded-md bg-primary-50 text-primary-600 flex items-center justify-center mr-4">
                        <FileText size={20} />
                      </div>
                      <div>
                        <h3 className="font-medium">{document.title}</h3>
                        {document.description && (
                          <p className="text-sm text-slate-500 mt-1">{document.description}</p>
                        )}
                        <div className="flex items-center flex-wrap mt-2">
                          <span className="text-xs text-slate-500 mr-4">
                            {document.fileType.split('/')[1]?.toUpperCase() || document.fileType} 
                            {' • '}
                            {(document.fileSize / 1024 / 1024).toFixed(2)} MB
                          </span>
                          <span className="text-xs text-slate-500">
                            Uploaded {formatDistanceToNow(new Date(document.createdAt), { addSuffix: true })}
                          </span>
                          
                          {document.tags && document.tags.length > 0 && (
                            <div className="flex flex-wrap gap-1 mt-1">
                              {document.tags.map((tag, index) => (
                                <Badge key={index} variant="outline" className="text-xs">
                                  {tag}
                                </Badge>
                              ))}
                            </div>
                          )}
                        </div>
                      </div>
                    </div>
                    
                    <div className="flex items-center space-x-2">
                      <Button 
                        variant="ghost" 
                        size="sm" 
                        className="h-8 w-8 p-0"
                        onClick={() => onView(document)}
                      >
                        <Eye className="h-4 w-4" />
                        <span className="sr-only">View</span>
                      </Button>
                      <Button 
                        variant="ghost" 
                        size="sm" 
                        className="h-8 w-8 p-0"
                        onClick={() => handleDownload(document)}
                      >
                        <Download className="h-4 w-4" />
                        <span className="sr-only">Download</span>
                      </Button>
                      <Button
                        variant="ghost"
                        size="sm"
                        className="h-8 w-8 p-0 text-error-500 hover:text-error-600 hover:bg-error-50"
                        onClick={() => handleDeleteClick(document)}
                      >
                        <Trash2 className="h-4 w-4" />
                        <span className="sr-only">Delete</span>
                      </Button>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      )}
      
      {/* Delete confirmation dialog */}
      <Dialog open={!!documentToDelete} onOpenChange={open => !open && cancelDelete()}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>Delete Document</DialogTitle>
          </DialogHeader>
          <div className="py-4">
            <p className="text-slate-600">
              Are you sure you want to delete "{documentToDelete?.title}"? This action cannot be undone.
            </p>
          </div>
          <DialogFooter>
            <Button
              variant="outline"
              onClick={cancelDelete}
              disabled={isDeleting}
            >
              Cancel
            </Button>
            <Button
              variant="destructive"
              onClick={confirmDelete}
              disabled={isDeleting}
            >
              {isDeleting ? 'Deleting...' : 'Delete'}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  );
}

================
File: client/src/components/layouts/DashboardLayout.tsx
================
import { ReactNode, useState } from "react";
import Sidebar from "@/components/common/Sidebar";
import Header from "@/components/common/Header";

type DashboardLayoutProps = {
  children: ReactNode;
  pageTitle: string;
  onSearch?: (query: string) => void;
  notificationCount?: number;
};

export default function DashboardLayout({
  children,
  pageTitle,
  onSearch,
  notificationCount = 0,
}: DashboardLayoutProps) {
  const [isMobileSidebarOpen, setIsMobileSidebarOpen] = useState(false);

  const toggleMobileSidebar = () => {
    setIsMobileSidebarOpen(!isMobileSidebarOpen);
  };

  return (
    <div className="min-h-screen flex flex-col md:flex-row bg-slate-50">
      <Sidebar />
      
      <main className="flex-1 flex flex-col min-h-screen w-full">
        <Header 
          pageTitle={pageTitle} 
          onSearchChange={onSearch}
          notificationCount={notificationCount}
          toggleMobileSidebar={toggleMobileSidebar}
        />
        
        <div className="flex-1 p-4 md:p-6 overflow-y-auto">
          {children}
        </div>
      </main>
    </div>
  );
}

================
File: client/src/components/templates/TemplateList.tsx
================
import { useState } from 'react';
import { useLocation } from 'wouter';
import { Card, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Template } from '@/types';
import { formatDistanceToNow } from 'date-fns';
import { FileText, User, Calendar, Eye, Copy, X } from 'lucide-react';
import { Skeleton } from '@/components/ui/skeleton';
import { useToast } from '@/hooks/use-toast';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogClose } from '@/components/ui/dialog';
import ReactMarkdown from 'react-markdown';

interface TemplateListProps {
  templates: Template[];
  isLoading: boolean;
  error?: string;
}

export default function TemplateList({ templates, isLoading, error }: TemplateListProps) {
  const [, navigate] = useLocation();
  const { toast } = useToast();
  const [previewTemplate, setPreviewTemplate] = useState<Template | null>(null);

  const handleUseTemplate = (template: Template) => {
    // In a real app, this would navigate to document creation with template pre-selected
    toast({
      title: 'Template selected',
      description: `Selected template: ${template.name}`
    });
  };

  const handlePreviewTemplate = (template: Template) => {
    setPreviewTemplate(template);
  };

  if (isLoading) {
    return (
      <div className="space-y-4">
        {[...Array(5)].map((_, index) => (
          <Card key={index} className="overflow-hidden">
            <CardContent className="p-0">
              <div className="p-4 flex items-center">
                <Skeleton className="h-10 w-10 rounded-md mr-4" />
                <div className="space-y-2 flex-1">
                  <Skeleton className="h-5 w-1/3" />
                  <Skeleton className="h-4 w-1/4" />
                </div>
                <Skeleton className="h-8 w-24 mr-2" />
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    );
  }

  if (error) {
    return (
      <div className="text-center p-12 border rounded-lg bg-white">
        <div className="mx-auto h-12 w-12 text-red-500 mb-4">
          <FileText />
        </div>
        <h3 className="text-lg font-medium mb-2">Error loading templates</h3>
        <p className="text-slate-600 mb-4">{error}</p>
        <Button onClick={() => window.location.reload()}>
          Try Again
        </Button>
      </div>
    );
  }

  if (templates.length === 0) {
    return (
      <div className="text-center p-12 border rounded-lg bg-white">
        <FileText className="mx-auto h-12 w-12 text-slate-400 mb-4" />
        <h3 className="text-lg font-medium mb-2">No templates found</h3>
        <p className="text-slate-600 mb-6">Create your first template to get started.</p>
      </div>
    );
  }

  return (
    <>
      <div className="space-y-4">
        {templates.map((template) => (
          <Card 
            key={template.id} 
            className="overflow-hidden hover:shadow-md transition-shadow"
          >
            <CardContent className="p-0">
              <div className="p-4">
                <div className="flex items-center justify-between">
                  <div className="flex items-center">
                    <div className="h-10 w-10 rounded-md bg-primary-50 text-primary-600 flex items-center justify-center mr-4">
                      <FileText size={20} />
                    </div>
                    <div>
                      <div className="flex items-center">
                        <h3 className="font-medium">{template.name}</h3>
                        {template.isDefault && (
                          <Badge className="ml-2 bg-slate-100 text-slate-800 hover:bg-slate-100">Default</Badge>
                        )}
                        {template.category && (
                          <Badge variant="outline" className="ml-2">{template.category}</Badge>
                        )}
                      </div>
                      <div className="flex items-center text-sm text-slate-500 mt-1">
                        <span className="flex items-center">
                          <User className="h-3.5 w-3.5 mr-1" />
                          Created by User ID: {template.createdById}
                        </span>
                        
                        <span className="flex items-center ml-4">
                          <Calendar className="h-3.5 w-3.5 mr-1" />
                          {formatDistanceToNow(new Date(template.createdAt), { addSuffix: true })}
                        </span>
                      </div>
                    </div>
                  </div>
                  
                  <div className="flex items-center space-x-2">
                    <Button 
                      variant="outline" 
                      size="sm"
                      onClick={() => handlePreviewTemplate(template)}
                    >
                      <Eye className="h-4 w-4 mr-1" />
                      Preview
                    </Button>
                    <Button 
                      size="sm"
                      onClick={() => handleUseTemplate(template)}
                    >
                      <Copy className="h-4 w-4 mr-1" />
                      Use Template
                    </Button>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      {/* Template Preview Modal */}
      <Dialog open={previewTemplate !== null} onOpenChange={(open) => !open && setPreviewTemplate(null)}>
        <DialogContent className="sm:max-w-[95vw] md:max-w-[90vw] lg:max-w-[80vw] xl:max-w-[70vw] h-[90vh] max-h-[90vh] p-0">
          <DialogHeader className="p-6 pb-2">
            <DialogTitle className="flex items-center justify-between">
              <span>Template Preview: {previewTemplate?.name}</span>
              <DialogClose asChild>
                <Button variant="ghost" size="icon">
                  <X className="h-4 w-4" />
                </Button>
              </DialogClose>
            </DialogTitle>
            <p className="text-sm text-muted-foreground mt-1">
              Previewing document template in markdown format
            </p>
          </DialogHeader>
          <div className="px-6 pb-6 overflow-y-auto flex-grow" style={{ maxHeight: "calc(90vh - 100px)" }}>
            <div className="p-4 border rounded-md bg-white">
              <div className="prose max-w-none prose-slate prose-headings:font-semibold prose-h1:text-3xl prose-h2:text-2xl prose-h3:text-xl prose-p:text-base prose-a:text-primary-600">
                {previewTemplate && <ReactMarkdown>{previewTemplate.content}</ReactMarkdown>}
              </div>
            </div>
          </div>
        </DialogContent>
      </Dialog>
    </>
  );
}

================
File: client/src/components/ui/accordion.tsx
================
import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDown className="h-4 w-4 shrink-0 transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))

AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }

================
File: client/src/components/ui/alert-dialog.tsx
================
import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}

================
File: client/src/components/ui/alert.tsx
================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const alertVariants = cva(
  "relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground",
  {
    variants: {
      variant: {
        default: "bg-background text-foreground",
        destructive:
          "border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Alert = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>
>(({ className, variant, ...props }, ref) => (
  <div
    ref={ref}
    role="alert"
    className={cn(alertVariants({ variant }), className)}
    {...props}
  />
))
Alert.displayName = "Alert"

const AlertTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h5
    ref={ref}
    className={cn("mb-1 font-medium leading-none tracking-tight", className)}
    {...props}
  />
))
AlertTitle.displayName = "AlertTitle"

const AlertDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm [&_p]:leading-relaxed", className)}
    {...props}
  />
))
AlertDescription.displayName = "AlertDescription"

export { Alert, AlertTitle, AlertDescription }

================
File: client/src/components/ui/aspect-ratio.tsx
================
import * as AspectRatioPrimitive from "@radix-ui/react-aspect-ratio"

const AspectRatio = AspectRatioPrimitive.Root

export { AspectRatio }

================
File: client/src/components/ui/avatar.tsx
================
import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }

================
File: client/src/components/ui/badge.tsx
================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }

================
File: client/src/components/ui/breadcrumb.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"

const Breadcrumb = React.forwardRef<
  HTMLElement,
  React.ComponentPropsWithoutRef<"nav"> & {
    separator?: React.ReactNode
  }
>(({ ...props }, ref) => <nav ref={ref} aria-label="breadcrumb" {...props} />)
Breadcrumb.displayName = "Breadcrumb"

const BreadcrumbList = React.forwardRef<
  HTMLOListElement,
  React.ComponentPropsWithoutRef<"ol">
>(({ className, ...props }, ref) => (
  <ol
    ref={ref}
    className={cn(
      "flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5",
      className
    )}
    {...props}
  />
))
BreadcrumbList.displayName = "BreadcrumbList"

const BreadcrumbItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentPropsWithoutRef<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    className={cn("inline-flex items-center gap-1.5", className)}
    {...props}
  />
))
BreadcrumbItem.displayName = "BreadcrumbItem"

const BreadcrumbLink = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentPropsWithoutRef<"a"> & {
    asChild?: boolean
  }
>(({ asChild, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      className={cn("transition-colors hover:text-foreground", className)}
      {...props}
    />
  )
})
BreadcrumbLink.displayName = "BreadcrumbLink"

const BreadcrumbPage = React.forwardRef<
  HTMLSpanElement,
  React.ComponentPropsWithoutRef<"span">
>(({ className, ...props }, ref) => (
  <span
    ref={ref}
    role="link"
    aria-disabled="true"
    aria-current="page"
    className={cn("font-normal text-foreground", className)}
    {...props}
  />
))
BreadcrumbPage.displayName = "BreadcrumbPage"

const BreadcrumbSeparator = ({
  children,
  className,
  ...props
}: React.ComponentProps<"li">) => (
  <li
    role="presentation"
    aria-hidden="true"
    className={cn("[&>svg]:w-3.5 [&>svg]:h-3.5", className)}
    {...props}
  >
    {children ?? <ChevronRight />}
  </li>
)
BreadcrumbSeparator.displayName = "BreadcrumbSeparator"

const BreadcrumbEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    role="presentation"
    aria-hidden="true"
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More</span>
  </span>
)
BreadcrumbEllipsis.displayName = "BreadcrumbElipssis"

export {
  Breadcrumb,
  BreadcrumbList,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbPage,
  BreadcrumbSeparator,
  BreadcrumbEllipsis,
}

================
File: client/src/components/ui/button.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: client/src/components/ui/calendar.tsx
================
import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: "h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20",
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-9 w-9 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground opacity-50 aria-selected:bg-accent/50 aria-selected:text-muted-foreground aria-selected:opacity-30",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ ...props }) => <ChevronLeft className="h-4 w-4" />,
        IconRight: ({ ...props }) => <ChevronRight className="h-4 w-4" />,
      }}
      {...props}
    />
  )
}
Calendar.displayName = "Calendar"

export { Calendar }

================
File: client/src/components/ui/card.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-lg border bg-card text-card-foreground shadow-sm",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      "text-2xl font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: client/src/components/ui/carousel.tsx
================
import * as React from "react"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"
import { ArrowLeft, ArrowRight } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}

================
File: client/src/components/ui/chart.tsx
================
import * as React from "react"
import * as RechartsPrimitive from "recharts"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}

================
File: client/src/components/ui/checkbox.tsx
================
import * as React from "react"
import * as CheckboxPrimitive from "@radix-ui/react-checkbox"
import { Check } from "lucide-react"

import { cn } from "@/lib/utils"

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      "peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground",
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn("flex items-center justify-center text-current")}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }

================
File: client/src/components/ui/collapsible.tsx
================
import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }

================
File: client/src/components/ui/command.tsx
================
import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

interface CommandDialogProps extends DialogProps {}

const CommandDialog = ({ children, ...props }: CommandDialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}

================
File: client/src/components/ui/context-menu.tsx
================
import * as React from "react"
import * as ContextMenuPrimitive from "@radix-ui/react-context-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const ContextMenu = ContextMenuPrimitive.Root

const ContextMenuTrigger = ContextMenuPrimitive.Trigger

const ContextMenuGroup = ContextMenuPrimitive.Group

const ContextMenuPortal = ContextMenuPrimitive.Portal

const ContextMenuSub = ContextMenuPrimitive.Sub

const ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup

const ContextMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <ContextMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </ContextMenuPrimitive.SubTrigger>
))
ContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName

const ContextMenuSubContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
ContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName

const ContextMenuContent = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Portal>
    <ContextMenuPrimitive.Content
      ref={ref}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </ContextMenuPrimitive.Portal>
))
ContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName

const ContextMenuItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName

const ContextMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <ContextMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.CheckboxItem>
))
ContextMenuCheckboxItem.displayName =
  ContextMenuPrimitive.CheckboxItem.displayName

const ContextMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <ContextMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <ContextMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </ContextMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </ContextMenuPrimitive.RadioItem>
))
ContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName

const ContextMenuLabel = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <ContextMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold text-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
ContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName

const ContextMenuSeparator = React.forwardRef<
  React.ElementRef<typeof ContextMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <ContextMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-border", className)}
    {...props}
  />
))
ContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName

const ContextMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
ContextMenuShortcut.displayName = "ContextMenuShortcut"

export {
  ContextMenu,
  ContextMenuTrigger,
  ContextMenuContent,
  ContextMenuItem,
  ContextMenuCheckboxItem,
  ContextMenuRadioItem,
  ContextMenuLabel,
  ContextMenuSeparator,
  ContextMenuShortcut,
  ContextMenuGroup,
  ContextMenuPortal,
  ContextMenuSub,
  ContextMenuSubContent,
  ContextMenuSubTrigger,
  ContextMenuRadioGroup,
}

================
File: client/src/components/ui/dialog.tsx
================
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

================
File: client/src/components/ui/drawer.tsx
================
import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}

================
File: client/src/components/ui/dropdown-menu.tsx
================
import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}

================
File: client/src/components/ui/form.tsx
================
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-sm text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-sm font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}

================
File: client/src/components/ui/hover-card.tsx
================
import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }

================
File: client/src/components/ui/input-otp.tsx
================
import * as React from "react"
import { OTPInput, OTPInputContext } from "input-otp"
import { Dot } from "lucide-react"

import { cn } from "@/lib/utils"

const InputOTP = React.forwardRef<
  React.ElementRef<typeof OTPInput>,
  React.ComponentPropsWithoutRef<typeof OTPInput>
>(({ className, containerClassName, ...props }, ref) => (
  <OTPInput
    ref={ref}
    containerClassName={cn(
      "flex items-center gap-2 has-[:disabled]:opacity-50",
      containerClassName
    )}
    className={cn("disabled:cursor-not-allowed", className)}
    {...props}
  />
))
InputOTP.displayName = "InputOTP"

const InputOTPGroup = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("flex items-center", className)} {...props} />
))
InputOTPGroup.displayName = "InputOTPGroup"

const InputOTPSlot = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div"> & { index: number }
>(({ index, className, ...props }, ref) => {
  const inputOTPContext = React.useContext(OTPInputContext)
  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]

  return (
    <div
      ref={ref}
      className={cn(
        "relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md",
        isActive && "z-10 ring-2 ring-ring ring-offset-background",
        className
      )}
      {...props}
    >
      {char}
      {hasFakeCaret && (
        <div className="pointer-events-none absolute inset-0 flex items-center justify-center">
          <div className="h-4 w-px animate-caret-blink bg-foreground duration-1000" />
        </div>
      )}
    </div>
  )
})
InputOTPSlot.displayName = "InputOTPSlot"

const InputOTPSeparator = React.forwardRef<
  React.ElementRef<"div">,
  React.ComponentPropsWithoutRef<"div">
>(({ ...props }, ref) => (
  <div ref={ref} role="separator" {...props}>
    <Dot />
  </div>
))
InputOTPSeparator.displayName = "InputOTPSeparator"

export { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }

================
File: client/src/components/ui/input.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

================
File: client/src/components/ui/label.tsx
================
import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

================
File: client/src/components/ui/menubar.tsx
================
import * as React from "react"
import * as MenubarPrimitive from "@radix-ui/react-menubar"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const MenubarMenu = MenubarPrimitive.Menu

const MenubarGroup = MenubarPrimitive.Group

const MenubarPortal = MenubarPrimitive.Portal

const MenubarSub = MenubarPrimitive.Sub

const MenubarRadioGroup = MenubarPrimitive.RadioGroup

const Menubar = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Root
    ref={ref}
    className={cn(
      "flex h-10 items-center space-x-1 rounded-md border bg-background p-1",
      className
    )}
    {...props}
  />
))
Menubar.displayName = MenubarPrimitive.Root.displayName

const MenubarTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      className
    )}
    {...props}
  />
))
MenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName

const MenubarSubTrigger = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <MenubarPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </MenubarPrimitive.SubTrigger>
))
MenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName

const MenubarSubContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
MenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName

const MenubarContent = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>
>(
  (
    { className, align = "start", alignOffset = -4, sideOffset = 8, ...props },
    ref
  ) => (
    <MenubarPrimitive.Portal>
      <MenubarPrimitive.Content
        ref={ref}
        align={align}
        alignOffset={alignOffset}
        sideOffset={sideOffset}
        className={cn(
          "z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
          className
        )}
        {...props}
      />
    </MenubarPrimitive.Portal>
  )
)
MenubarContent.displayName = MenubarPrimitive.Content.displayName

const MenubarItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarItem.displayName = MenubarPrimitive.Item.displayName

const MenubarCheckboxItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <MenubarPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.CheckboxItem>
))
MenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName

const MenubarRadioItem = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <MenubarPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <MenubarPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </MenubarPrimitive.ItemIndicator>
    </span>
    {children}
  </MenubarPrimitive.RadioItem>
))
MenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName

const MenubarLabel = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <MenubarPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
MenubarLabel.displayName = MenubarPrimitive.Label.displayName

const MenubarSeparator = React.forwardRef<
  React.ElementRef<typeof MenubarPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <MenubarPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
MenubarSeparator.displayName = MenubarPrimitive.Separator.displayName

const MenubarShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
MenubarShortcut.displayname = "MenubarShortcut"

export {
  Menubar,
  MenubarMenu,
  MenubarTrigger,
  MenubarContent,
  MenubarItem,
  MenubarSeparator,
  MenubarLabel,
  MenubarCheckboxItem,
  MenubarRadioGroup,
  MenubarRadioItem,
  MenubarPortal,
  MenubarSubContent,
  MenubarSubTrigger,
  MenubarGroup,
  MenubarSub,
  MenubarShortcut,
}

================
File: client/src/components/ui/navigation-menu.tsx
================
import * as React from "react"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"
import { ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDown
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}

================
File: client/src/components/ui/pagination.tsx
================
import * as React from "react"
import { ChevronLeft, ChevronRight, MoreHorizontal } from "lucide-react"

import { cn } from "@/lib/utils"
import { ButtonProps, buttonVariants } from "@/components/ui/button"

const Pagination = ({ className, ...props }: React.ComponentProps<"nav">) => (
  <nav
    role="navigation"
    aria-label="pagination"
    className={cn("mx-auto flex w-full justify-center", className)}
    {...props}
  />
)
Pagination.displayName = "Pagination"

const PaginationContent = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    className={cn("flex flex-row items-center gap-1", className)}
    {...props}
  />
))
PaginationContent.displayName = "PaginationContent"

const PaginationItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li ref={ref} className={cn("", className)} {...props} />
))
PaginationItem.displayName = "PaginationItem"

type PaginationLinkProps = {
  isActive?: boolean
} & Pick<ButtonProps, "size"> &
  React.ComponentProps<"a">

const PaginationLink = ({
  className,
  isActive,
  size = "icon",
  ...props
}: PaginationLinkProps) => (
  <a
    aria-current={isActive ? "page" : undefined}
    className={cn(
      buttonVariants({
        variant: isActive ? "outline" : "ghost",
        size,
      }),
      className
    )}
    {...props}
  />
)
PaginationLink.displayName = "PaginationLink"

const PaginationPrevious = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to previous page"
    size="default"
    className={cn("gap-1 pl-2.5", className)}
    {...props}
  >
    <ChevronLeft className="h-4 w-4" />
    <span>Previous</span>
  </PaginationLink>
)
PaginationPrevious.displayName = "PaginationPrevious"

const PaginationNext = ({
  className,
  ...props
}: React.ComponentProps<typeof PaginationLink>) => (
  <PaginationLink
    aria-label="Go to next page"
    size="default"
    className={cn("gap-1 pr-2.5", className)}
    {...props}
  >
    <span>Next</span>
    <ChevronRight className="h-4 w-4" />
  </PaginationLink>
)
PaginationNext.displayName = "PaginationNext"

const PaginationEllipsis = ({
  className,
  ...props
}: React.ComponentProps<"span">) => (
  <span
    aria-hidden
    className={cn("flex h-9 w-9 items-center justify-center", className)}
    {...props}
  >
    <MoreHorizontal className="h-4 w-4" />
    <span className="sr-only">More pages</span>
  </span>
)
PaginationEllipsis.displayName = "PaginationEllipsis"

export {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
}

================
File: client/src/components/ui/popover.tsx
================
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }

================
File: client/src/components/ui/progress.tsx
================
import * as React from "react"
import * as ProgressPrimitive from "@radix-ui/react-progress"

import { cn } from "@/lib/utils"

const Progress = React.forwardRef<
  React.ElementRef<typeof ProgressPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>
>(({ className, value, ...props }, ref) => (
  <ProgressPrimitive.Root
    ref={ref}
    className={cn(
      "relative h-4 w-full overflow-hidden rounded-full bg-secondary",
      className
    )}
    {...props}
  >
    <ProgressPrimitive.Indicator
      className="h-full w-full flex-1 bg-primary transition-all"
      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}
    />
  </ProgressPrimitive.Root>
))
Progress.displayName = ProgressPrimitive.Root.displayName

export { Progress }

================
File: client/src/components/ui/radio-group.tsx
================
import * as React from "react"
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group"
import { Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const RadioGroup = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Root
      className={cn("grid gap-2", className)}
      {...props}
      ref={ref}
    />
  )
})
RadioGroup.displayName = RadioGroupPrimitive.Root.displayName

const RadioGroupItem = React.forwardRef<
  React.ElementRef<typeof RadioGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>
>(({ className, ...props }, ref) => {
  return (
    <RadioGroupPrimitive.Item
      ref={ref}
      className={cn(
        "aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    >
      <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
        <Circle className="h-2.5 w-2.5 fill-current text-current" />
      </RadioGroupPrimitive.Indicator>
    </RadioGroupPrimitive.Item>
  )
})
RadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName

export { RadioGroup, RadioGroupItem }

================
File: client/src/components/ui/resizable.tsx
================
import { GripVertical } from "lucide-react"
import * as ResizablePrimitive from "react-resizable-panels"

import { cn } from "@/lib/utils"

const ResizablePanelGroup = ({
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (
  <ResizablePrimitive.PanelGroup
    className={cn(
      "flex h-full w-full data-[panel-group-direction=vertical]:flex-col",
      className
    )}
    {...props}
  />
)

const ResizablePanel = ResizablePrimitive.Panel

const ResizableHandle = ({
  withHandle,
  className,
  ...props
}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {
  withHandle?: boolean
}) => (
  <ResizablePrimitive.PanelResizeHandle
    className={cn(
      "relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90",
      className
    )}
    {...props}
  >
    {withHandle && (
      <div className="z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border">
        <GripVertical className="h-2.5 w-2.5" />
      </div>
    )}
  </ResizablePrimitive.PanelResizeHandle>
)

export { ResizablePanelGroup, ResizablePanel, ResizableHandle }

================
File: client/src/components/ui/scroll-area.tsx
================
import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }

================
File: client/src/components/ui/select.tsx
================
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}

================
File: client/src/components/ui/separator.tsx
================
import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }

================
File: client/src/components/ui/sheet.tsx
================
import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}

================
File: client/src/components/ui/sidebar.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { VariantProps, cva } from "class-variance-authority"
import { PanelLeft } from "lucide-react"

import { useIsMobile } from "@/hooks/use-mobile"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Separator } from "@/components/ui/separator"
import { Sheet, SheetContent } from "@/components/ui/sheet"
import { Skeleton } from "@/components/ui/skeleton"
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip"

const SIDEBAR_COOKIE_NAME = "sidebar:state"
const SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7
const SIDEBAR_WIDTH = "16rem"
const SIDEBAR_WIDTH_MOBILE = "18rem"
const SIDEBAR_WIDTH_ICON = "3rem"
const SIDEBAR_KEYBOARD_SHORTCUT = "b"

type SidebarContext = {
  state: "expanded" | "collapsed"
  open: boolean
  setOpen: (open: boolean) => void
  openMobile: boolean
  setOpenMobile: (open: boolean) => void
  isMobile: boolean
  toggleSidebar: () => void
}

const SidebarContext = React.createContext<SidebarContext | null>(null)

function useSidebar() {
  const context = React.useContext(SidebarContext)
  if (!context) {
    throw new Error("useSidebar must be used within a SidebarProvider.")
  }

  return context
}

const SidebarProvider = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    defaultOpen?: boolean
    open?: boolean
    onOpenChange?: (open: boolean) => void
  }
>(
  (
    {
      defaultOpen = true,
      open: openProp,
      onOpenChange: setOpenProp,
      className,
      style,
      children,
      ...props
    },
    ref
  ) => {
    const isMobile = useIsMobile()
    const [openMobile, setOpenMobile] = React.useState(false)

    // This is the internal state of the sidebar.
    // We use openProp and setOpenProp for control from outside the component.
    const [_open, _setOpen] = React.useState(defaultOpen)
    const open = openProp ?? _open
    const setOpen = React.useCallback(
      (value: boolean | ((value: boolean) => boolean)) => {
        if (setOpenProp) {
          return setOpenProp?.(
            typeof value === "function" ? value(open) : value
          )
        }

        _setOpen(value)

        // This sets the cookie to keep the sidebar state.
        document.cookie = `${SIDEBAR_COOKIE_NAME}=${open}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
      },
      [setOpenProp, open]
    )

    // Helper to toggle the sidebar.
    const toggleSidebar = React.useCallback(() => {
      return isMobile
        ? setOpenMobile((open) => !open)
        : setOpen((open) => !open)
    }, [isMobile, setOpen, setOpenMobile])

    // Adds a keyboard shortcut to toggle the sidebar.
    React.useEffect(() => {
      const handleKeyDown = (event: KeyboardEvent) => {
        if (
          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&
          (event.metaKey || event.ctrlKey)
        ) {
          event.preventDefault()
          toggleSidebar()
        }
      }

      window.addEventListener("keydown", handleKeyDown)
      return () => window.removeEventListener("keydown", handleKeyDown)
    }, [toggleSidebar])

    // We add a state so that we can do data-state="expanded" or "collapsed".
    // This makes it easier to style the sidebar with Tailwind classes.
    const state = open ? "expanded" : "collapsed"

    const contextValue = React.useMemo<SidebarContext>(
      () => ({
        state,
        open,
        setOpen,
        isMobile,
        openMobile,
        setOpenMobile,
        toggleSidebar,
      }),
      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]
    )

    return (
      <SidebarContext.Provider value={contextValue}>
        <TooltipProvider delayDuration={0}>
          <div
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH,
                "--sidebar-width-icon": SIDEBAR_WIDTH_ICON,
                ...style,
              } as React.CSSProperties
            }
            className={cn(
              "group/sidebar-wrapper flex min-h-svh w-full text-sidebar-foreground has-[[data-variant=inset]]:bg-sidebar",
              className
            )}
            ref={ref}
            {...props}
          >
            {children}
          </div>
        </TooltipProvider>
      </SidebarContext.Provider>
    )
  }
)
SidebarProvider.displayName = "SidebarProvider"

const Sidebar = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    side?: "left" | "right"
    variant?: "sidebar" | "floating" | "inset"
    collapsible?: "offcanvas" | "icon" | "none"
  }
>(
  (
    {
      side = "left",
      variant = "sidebar",
      collapsible = "offcanvas",
      className,
      children,
      ...props
    },
    ref
  ) => {
    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()

    if (collapsible === "none") {
      return (
        <div
          className={cn(
            "flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground",
            className
          )}
          ref={ref}
          {...props}
        >
          {children}
        </div>
      )
    }

    if (isMobile) {
      return (
        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>
          <SheetContent
            data-sidebar="sidebar"
            data-mobile="true"
            className="w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden"
            style={
              {
                "--sidebar-width": SIDEBAR_WIDTH_MOBILE,
              } as React.CSSProperties
            }
            side={side}
          >
            <div className="flex h-full w-full flex-col">{children}</div>
          </SheetContent>
        </Sheet>
      )
    }

    return (
      <div
        ref={ref}
        className="group peer hidden md:block"
        data-state={state}
        data-collapsible={state === "collapsed" ? collapsible : ""}
        data-variant={variant}
        data-side={side}
      >
        {/* This is what handles the sidebar gap on desktop */}
        <div
          className={cn(
            "duration-200 relative h-svh w-[--sidebar-width] bg-transparent transition-[width] ease-linear",
            "group-data-[collapsible=offcanvas]:w-0",
            "group-data-[side=right]:rotate-180",
            variant === "floating" || variant === "inset"
              ? "group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon]"
          )}
        />
        <div
          className={cn(
            "duration-200 fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] ease-linear md:flex",
            side === "left"
              ? "left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]"
              : "right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]",
            // Adjust the padding for floating and inset variants.
            variant === "floating" || variant === "inset"
              ? "p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]"
              : "group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l",
            className
          )}
          {...props}
        >
          <div
            data-sidebar="sidebar"
            className="flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow"
          >
            {children}
          </div>
        </div>
      </div>
    )
  }
)
Sidebar.displayName = "Sidebar"

const SidebarTrigger = React.forwardRef<
  React.ElementRef<typeof Button>,
  React.ComponentProps<typeof Button>
>(({ className, onClick, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <Button
      ref={ref}
      data-sidebar="trigger"
      variant="ghost"
      size="icon"
      className={cn("h-7 w-7", className)}
      onClick={(event) => {
        onClick?.(event)
        toggleSidebar()
      }}
      {...props}
    >
      <PanelLeft />
      <span className="sr-only">Toggle Sidebar</span>
    </Button>
  )
})
SidebarTrigger.displayName = "SidebarTrigger"

const SidebarRail = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button">
>(({ className, ...props }, ref) => {
  const { toggleSidebar } = useSidebar()

  return (
    <button
      ref={ref}
      data-sidebar="rail"
      aria-label="Toggle Sidebar"
      tabIndex={-1}
      onClick={toggleSidebar}
      title="Toggle Sidebar"
      className={cn(
        "absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex",
        "[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize",
        "[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize",
        "group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar",
        "[[data-side=left][data-collapsible=offcanvas]_&]:-right-2",
        "[[data-side=right][data-collapsible=offcanvas]_&]:-left-2",
        className
      )}
      {...props}
    />
  )
})
SidebarRail.displayName = "SidebarRail"

const SidebarInset = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"main">
>(({ className, ...props }, ref) => {
  return (
    <main
      ref={ref}
      className={cn(
        "relative flex min-h-svh flex-1 flex-col bg-background",
        "peer-data-[variant=inset]:min-h-[calc(100svh-theme(spacing.4))] md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow",
        className
      )}
      {...props}
    />
  )
})
SidebarInset.displayName = "SidebarInset"

const SidebarInput = React.forwardRef<
  React.ElementRef<typeof Input>,
  React.ComponentProps<typeof Input>
>(({ className, ...props }, ref) => {
  return (
    <Input
      ref={ref}
      data-sidebar="input"
      className={cn(
        "h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring",
        className
      )}
      {...props}
    />
  )
})
SidebarInput.displayName = "SidebarInput"

const SidebarHeader = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="header"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarHeader.displayName = "SidebarHeader"

const SidebarFooter = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="footer"
      className={cn("flex flex-col gap-2 p-2", className)}
      {...props}
    />
  )
})
SidebarFooter.displayName = "SidebarFooter"

const SidebarSeparator = React.forwardRef<
  React.ElementRef<typeof Separator>,
  React.ComponentProps<typeof Separator>
>(({ className, ...props }, ref) => {
  return (
    <Separator
      ref={ref}
      data-sidebar="separator"
      className={cn("mx-2 w-auto bg-sidebar-border", className)}
      {...props}
    />
  )
})
SidebarSeparator.displayName = "SidebarSeparator"

const SidebarContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="content"
      className={cn(
        "flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarContent.displayName = "SidebarContent"

const SidebarGroup = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => {
  return (
    <div
      ref={ref}
      data-sidebar="group"
      className={cn("relative flex w-full min-w-0 flex-col p-2", className)}
      {...props}
    />
  )
})
SidebarGroup.displayName = "SidebarGroup"

const SidebarGroupLabel = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "div"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-label"
      className={cn(
        "duration-200 flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opa] ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        "group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupLabel.displayName = "SidebarGroupLabel"

const SidebarGroupAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & { asChild?: boolean }
>(({ className, asChild = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="group-action"
      className={cn(
        "absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarGroupAction.displayName = "SidebarGroupAction"

const SidebarGroupContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="group-content"
    className={cn("w-full text-sm", className)}
    {...props}
  />
))
SidebarGroupContent.displayName = "SidebarGroupContent"

const SidebarMenu = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu"
    className={cn("flex w-full min-w-0 flex-col gap-1", className)}
    {...props}
  />
))
SidebarMenu.displayName = "SidebarMenu"

const SidebarMenuItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ className, ...props }, ref) => (
  <li
    ref={ref}
    data-sidebar="menu-item"
    className={cn("group/menu-item relative", className)}
    {...props}
  />
))
SidebarMenuItem.displayName = "SidebarMenuItem"

const sidebarMenuButtonVariants = cva(
  "peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "hover:bg-sidebar-accent hover:text-sidebar-accent-foreground",
        outline:
          "bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]",
      },
      size: {
        default: "h-8 text-sm",
        sm: "h-7 text-xs",
        lg: "h-12 text-sm group-data-[collapsible=icon]:!p-0",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const SidebarMenuButton = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    isActive?: boolean
    tooltip?: string | React.ComponentProps<typeof TooltipContent>
  } & VariantProps<typeof sidebarMenuButtonVariants>
>(
  (
    {
      asChild = false,
      isActive = false,
      variant = "default",
      size = "default",
      tooltip,
      className,
      ...props
    },
    ref
  ) => {
    const Comp = asChild ? Slot : "button"
    const { isMobile, state } = useSidebar()

    const button = (
      <Comp
        ref={ref}
        data-sidebar="menu-button"
        data-size={size}
        data-active={isActive}
        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}
        {...props}
      />
    )

    if (!tooltip) {
      return button
    }

    if (typeof tooltip === "string") {
      tooltip = {
        children: tooltip,
      }
    }

    return (
      <Tooltip>
        <TooltipTrigger asChild>{button}</TooltipTrigger>
        <TooltipContent
          side="right"
          align="center"
          hidden={state !== "collapsed" || isMobile}
          {...tooltip}
        />
      </Tooltip>
    )
  }
)
SidebarMenuButton.displayName = "SidebarMenuButton"

const SidebarMenuAction = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<"button"> & {
    asChild?: boolean
    showOnHover?: boolean
  }
>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {
  const Comp = asChild ? Slot : "button"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-action"
      className={cn(
        "absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0",
        // Increases the hit area of the button on mobile.
        "after:absolute after:-inset-2 after:md:hidden",
        "peer-data-[size=sm]/menu-button:top-1",
        "peer-data-[size=default]/menu-button:top-1.5",
        "peer-data-[size=lg]/menu-button:top-2.5",
        "group-data-[collapsible=icon]:hidden",
        showOnHover &&
          "group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuAction.displayName = "SidebarMenuAction"

const SidebarMenuBadge = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div">
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    data-sidebar="menu-badge"
    className={cn(
      "absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground select-none pointer-events-none",
      "peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground",
      "peer-data-[size=sm]/menu-button:top-1",
      "peer-data-[size=default]/menu-button:top-1.5",
      "peer-data-[size=lg]/menu-button:top-2.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuBadge.displayName = "SidebarMenuBadge"

const SidebarMenuSkeleton = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    showIcon?: boolean
  }
>(({ className, showIcon = false, ...props }, ref) => {
  // Random width between 50 to 90%.
  const width = React.useMemo(() => {
    return `${Math.floor(Math.random() * 40) + 50}%`
  }, [])

  return (
    <div
      ref={ref}
      data-sidebar="menu-skeleton"
      className={cn("rounded-md h-8 flex gap-2 px-2 items-center", className)}
      {...props}
    >
      {showIcon && (
        <Skeleton
          className="size-4 rounded-md"
          data-sidebar="menu-skeleton-icon"
        />
      )}
      <Skeleton
        className="h-4 flex-1 max-w-[--skeleton-width]"
        data-sidebar="menu-skeleton-text"
        style={
          {
            "--skeleton-width": width,
          } as React.CSSProperties
        }
      />
    </div>
  )
})
SidebarMenuSkeleton.displayName = "SidebarMenuSkeleton"

const SidebarMenuSub = React.forwardRef<
  HTMLUListElement,
  React.ComponentProps<"ul">
>(({ className, ...props }, ref) => (
  <ul
    ref={ref}
    data-sidebar="menu-sub"
    className={cn(
      "mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5",
      "group-data-[collapsible=icon]:hidden",
      className
    )}
    {...props}
  />
))
SidebarMenuSub.displayName = "SidebarMenuSub"

const SidebarMenuSubItem = React.forwardRef<
  HTMLLIElement,
  React.ComponentProps<"li">
>(({ ...props }, ref) => <li ref={ref} {...props} />)
SidebarMenuSubItem.displayName = "SidebarMenuSubItem"

const SidebarMenuSubButton = React.forwardRef<
  HTMLAnchorElement,
  React.ComponentProps<"a"> & {
    asChild?: boolean
    size?: "sm" | "md"
    isActive?: boolean
  }
>(({ asChild = false, size = "md", isActive, className, ...props }, ref) => {
  const Comp = asChild ? Slot : "a"

  return (
    <Comp
      ref={ref}
      data-sidebar="menu-sub-button"
      data-size={size}
      data-active={isActive}
      className={cn(
        "flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground",
        "data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground",
        size === "sm" && "text-xs",
        size === "md" && "text-sm",
        "group-data-[collapsible=icon]:hidden",
        className
      )}
      {...props}
    />
  )
})
SidebarMenuSubButton.displayName = "SidebarMenuSubButton"

export {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarGroupAction,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarHeader,
  SidebarInput,
  SidebarInset,
  SidebarMenu,
  SidebarMenuAction,
  SidebarMenuBadge,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSkeleton,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
  SidebarProvider,
  SidebarRail,
  SidebarSeparator,
  SidebarTrigger,
  useSidebar,
}

================
File: client/src/components/ui/skeleton.tsx
================
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-muted", className)}
      {...props}
    />
  )
}

export { Skeleton }

================
File: client/src/components/ui/slider.tsx
================
import * as React from "react"
import * as SliderPrimitive from "@radix-ui/react-slider"

import { cn } from "@/lib/utils"

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex w-full touch-none select-none items-center",
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }

================
File: client/src/components/ui/switch.tsx
================
import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }

================
File: client/src/components/ui/table.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn("p-4 align-middle [&:has([role=checkbox])]:pr-0", className)}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}

================
File: client/src/components/ui/tabs.tsx
================
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }

================
File: client/src/components/ui/textarea.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }

================
File: client/src/components/ui/toast.tsx
================
import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}

================
File: client/src/components/ui/toaster.tsx
================
import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}

================
File: client/src/components/ui/toggle-group.tsx
================
import * as React from "react"
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group"
import { type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"
import { toggleVariants } from "@/components/ui/toggle"

const ToggleGroupContext = React.createContext<
  VariantProps<typeof toggleVariants>
>({
  size: "default",
  variant: "default",
})

const ToggleGroup = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Root
    ref={ref}
    className={cn("flex items-center justify-center gap-1", className)}
    {...props}
  >
    <ToggleGroupContext.Provider value={{ variant, size }}>
      {children}
    </ToggleGroupContext.Provider>
  </ToggleGroupPrimitive.Root>
))

ToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &
    VariantProps<typeof toggleVariants>
>(({ className, children, variant, size, ...props }, ref) => {
  const context = React.useContext(ToggleGroupContext)

  return (
    <ToggleGroupPrimitive.Item
      ref={ref}
      className={cn(
        toggleVariants({
          variant: context.variant || variant,
          size: context.size || size,
        }),
        className
      )}
      {...props}
    >
      {children}
    </ToggleGroupPrimitive.Item>
  )
})

ToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName

export { ToggleGroup, ToggleGroupItem }

================
File: client/src/components/ui/toggle.tsx
================
import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-10 px-3",
        sm: "h-9 px-2.5",
        lg: "h-11 px-5",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }

================
File: client/src/components/ui/tooltip.tsx
================
import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

================
File: client/src/components/users/UserList.tsx
================
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Skeleton } from '@/components/ui/skeleton';
import { useToast } from '@/hooks/use-toast';
import { apiRequest, queryClient } from '@/lib/queryClient';
import { User } from '@/types';
import { zodResolver } from '@hookform/resolvers/zod';
import { format } from 'date-fns';
import { Edit, Mail, Shield, Trash2, User as UserIcon, UserCog, Users } from 'lucide-react';
import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { z } from 'zod';

interface UserListProps {
  users: User[];
  isLoading: boolean;
  error?: string;
}

const userEditSchema = z.object({
  name: z.string().min(2, 'Name must be at least 2 characters'),
  email: z.string().email('Invalid email address'),
  role: z.enum(['admin', 'compliance_officer', 'employee'])
});

type UserEditValues = z.infer<typeof userEditSchema>;

export default function UserList({ users, isLoading, error }: UserListProps) {
  const [editingUser, setEditingUser] = useState<User | null>(null);
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);
  const [userToDelete, setUserToDelete] = useState<User | null>(null);
  const { toast } = useToast();

  const form = useForm<UserEditValues>({
    resolver: zodResolver(userEditSchema),
    defaultValues: {
      name: '',
      email: '',
      role: 'employee'
    }
  });

  const handleEditUser = (user: User) => {
    setEditingUser(user);
    form.reset({
      name: user.name,
      email: user.email,
      role: user.role
    });
  };

  const handleDeleteUser = (user: User) => {
    setUserToDelete(user);
    setIsDeleteDialogOpen(true);
  };

  const closeEditDialog = () => {
    setEditingUser(null);
  };

  const closeDeleteDialog = () => {
    setIsDeleteDialogOpen(false);
    setUserToDelete(null);
  };

  const onSubmitEdit = async (data: UserEditValues) => {
    if (!editingUser) return;

    try {
      await apiRequest('PUT', `/api/users/${editingUser.id}`, data);
      queryClient.invalidateQueries({ queryKey: ['/api/users'] });
      toast({
        title: 'User updated',
        description: 'User information has been updated successfully',
      });
      closeEditDialog();
    } catch (error: any) {
      toast({
        title: 'Error updating user',
        description: error.message || 'Failed to update user',
        variant: 'destructive',
      });
    }
  };

  const confirmDelete = async () => {
    if (!userToDelete) return;

    try {
      await apiRequest('DELETE', `/api/users/${userToDelete.id}`);
      queryClient.invalidateQueries({ queryKey: ['/api/users'] });
      toast({
        title: 'User deleted',
        description: 'User has been deleted successfully',
      });
      closeDeleteDialog();
    } catch (error: any) {
      toast({
        title: 'Error deleting user',
        description: error.message || 'Failed to delete user',
        variant: 'destructive',
      });
    }
  };

  const getRoleBadge = (role: string) => {
    switch (role) {
      case 'admin':
        return <Badge className="bg-primary-100 text-primary-800 hover:bg-primary-100">Administrator</Badge>;
      case 'compliance_officer':
        return <Badge className="bg-warning-100 text-warning-800 hover:bg-warning-100">Compliance Officer</Badge>;
      case 'employee':
        return <Badge className="bg-slate-100 text-slate-800 hover:bg-slate-100">Employee</Badge>;
      default:
        return <Badge>{role}</Badge>;
    }
  };

  if (isLoading) {
    return (
      <div className="space-y-4">
        {[...Array(5)].map((_, index) => (
          <Card key={index} className="overflow-hidden">
            <CardContent className="p-0">
              <div className="p-4 flex items-center">
                <Skeleton className="h-10 w-10 rounded-full mr-4" />
                <div className="space-y-2 flex-1">
                  <Skeleton className="h-5 w-1/3" />
                  <Skeleton className="h-4 w-1/4" />
                </div>
                <Skeleton className="h-8 w-24 mr-2" />
              </div>
            </CardContent>
          </Card>
        ))}
      </div>
    );
  }

  if (error) {
    return (
      <div className="text-center p-12 border rounded-lg bg-white">
        <div className="mx-auto h-12 w-12 text-red-500 mb-4">
          <Users size={48} />
        </div>
        <h3 className="text-lg font-medium mb-2">Error loading users</h3>
        <p className="text-slate-600 mb-4">{error}</p>
        <Button onClick={() => window.location.reload()}>
          Try Again
        </Button>
      </div>
    );
  }

  if (users.length === 0) {
    return (
      <div className="text-center p-12 border rounded-lg bg-white">
        <Users className="mx-auto h-12 w-12 text-slate-400 mb-4" />
        <h3 className="text-lg font-medium mb-2">No users found</h3>
        <p className="text-slate-600 mb-6">No users match your search criteria.</p>
      </div>
    );
  }

  return (
    <>
      <div className="space-y-4">
        {users.map((user) => (
          <Card 
            key={user.id} 
            className="overflow-hidden hover:shadow-md transition-shadow"
          >
            <CardContent className="p-0">
              <div className="p-4">
                <div className="flex items-center justify-between">
                  <div className="flex items-center">
                    <div className="h-10 w-10 rounded-full bg-primary-100 text-primary-600 flex items-center justify-center mr-4">
                      <UserIcon size={20} />
                    </div>
                    <div>
                      <h3 className="font-medium">{user.name}</h3>
                      <div className="flex items-center text-sm text-slate-500 mt-1">
                        <Mail className="h-3.5 w-3.5 mr-1" />
                        {user.email}
                        <span className="mx-2">•</span>
                        <UserIcon className="h-3.5 w-3.5 mr-1" />
                        @{user.username}
                      </div>
                    </div>
                  </div>
                  
                  <div className="flex items-center space-x-3">
                    {getRoleBadge(user.role)}
                    <Button 
                      variant="ghost" 
                      size="sm"
                      className="h-8 w-8 p-0"
                      onClick={() => handleEditUser(user)}
                    >
                      <Edit className="h-4 w-4" />
                      <span className="sr-only">Edit</span>
                    </Button>
                    <Button 
                      variant="ghost" 
                      size="sm"
                      className="h-8 w-8 p-0 text-red-500 hover:text-red-700 hover:bg-red-50"
                      onClick={() => handleDeleteUser(user)}
                    >
                      <Trash2 className="h-4 w-4" />
                      <span className="sr-only">Delete</span>
                    </Button>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      {/* Edit User Dialog */}
      {editingUser && (
        <Dialog open={!!editingUser} onOpenChange={closeEditDialog}>
          <DialogContent className="sm:max-w-lg">
            <DialogHeader>
              <DialogTitle>Edit User</DialogTitle>
            </DialogHeader>
            
            <Form {...form}>
              <form onSubmit={form.handleSubmit(onSubmitEdit)} className="space-y-4">
                <FormField
                  control={form.control}
                  name="name"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Full Name</FormLabel>
                      <FormControl>
                        <Input 
                          {...field}
                          placeholder="Enter full name"
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="email"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Email</FormLabel>
                      <FormControl>
                        <Input 
                          {...field}
                          type="email"
                          placeholder="Enter email address"
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <FormField
                  control={form.control}
                  name="role"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Role</FormLabel>
                      <Select 
                        onValueChange={field.onChange} 
                        defaultValue={field.value}
                      >
                        <FormControl>
                          <SelectTrigger>
                            <SelectValue placeholder="Select user role" />
                          </SelectTrigger>
                        </FormControl>
                        <SelectContent>
                          <SelectItem value="employee">Employee</SelectItem>
                          <SelectItem value="compliance_officer">Compliance Officer</SelectItem>
                          <SelectItem value="admin">Administrator</SelectItem>
                        </SelectContent>
                      </Select>
                      <FormMessage />
                    </FormItem>
                  )}
                />
                
                <DialogFooter>
                  <Button 
                    type="button" 
                    variant="outline" 
                    onClick={closeEditDialog}
                  >
                    Cancel
                  </Button>
                  <Button type="submit">
                    Save Changes
                  </Button>
                </DialogFooter>
              </form>
            </Form>
          </DialogContent>
        </Dialog>
      )}

      {/* Delete User Confirmation Dialog */}
      <Dialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>
        <DialogContent className="sm:max-w-md">
          <DialogHeader>
            <DialogTitle>Confirm Delete User</DialogTitle>
          </DialogHeader>
          
          <div className="py-4">
            <p className="text-slate-600 mb-2">
              Are you sure you want to delete the following user?
            </p>
            {userToDelete && (
              <div className="p-3 bg-slate-50 rounded-md">
                <p className="font-medium">{userToDelete.name}</p>
                <p className="text-sm text-slate-500">{userToDelete.email}</p>
                <div className="mt-1">{getRoleBadge(userToDelete.role)}</div>
              </div>
            )}
            <p className="mt-4 text-sm text-red-500">
              This action cannot be undone. All data associated with this user will be permanently deleted.
            </p>
          </div>
          
          <DialogFooter>
            <Button 
              type="button" 
              variant="outline" 
              onClick={closeDeleteDialog}
            >
              Cancel
            </Button>
            <Button 
              type="button" 
              variant="destructive"
              onClick={confirmDelete}
            >
              Delete User
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </>
  );
}

================
File: client/src/hooks/use-auth.tsx
================
import { createContext, ReactNode, useContext } from "react";
import {
  useQuery,
  useMutation,
  UseMutationResult,
} from "@tanstack/react-query";
import { getQueryFn, apiRequest, queryClient } from "@/lib/queryClient";
import { useToast } from "@/hooks/use-toast";
import { User } from "@/types";

type AuthContextType = {
  user: User | null;
  isLoading: boolean;
  error: Error | null;
  loginMutation: UseMutationResult<User, Error, LoginData>;
  logoutMutation: UseMutationResult<void, Error, void>;
  registerMutation: UseMutationResult<User, Error, RegisterData>;
};

export type LoginData = {
  username: string;
  password: string;
};

export type RegisterData = {
  username: string;
  password: string;
  name: string;
  email: string;
  role?: "admin" | "compliance_officer" | "employee";
};

export const AuthContext = createContext<AuthContextType | null>(null);

export function AuthProvider({ children }: { children: ReactNode }) {
  const { toast } = useToast();
  const {
    data: user,
    error,
    isLoading,
  } = useQuery<User | null, Error>({
    queryKey: ["/api/user"],
    queryFn: getQueryFn({ on401: "returnNull" }),
  });

  const loginMutation = useMutation({
    mutationFn: async (credentials: LoginData) => {
      const res = await apiRequest("POST", "/api/login", credentials);
      return await res.json();
    },
    onSuccess: (user: User) => {
      queryClient.setQueryData(["/api/user"], user);
      toast({
        title: "Login successful",
        description: `Welcome back, ${user.name}!`,
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Login failed",
        description: error.message || "Invalid username or password",
        variant: "destructive",
      });
    },
  });

  const registerMutation = useMutation({
    mutationFn: async (userData: RegisterData) => {
      const res = await apiRequest("POST", "/api/register", userData);
      return await res.json();
    },
    onSuccess: (user: User) => {
      queryClient.setQueryData(["/api/user"], user);
      toast({
        title: "Registration successful",
        description: `Welcome, ${user.name}!`,
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Registration failed",
        description: error.message || "Could not create account",
        variant: "destructive",
      });
    },
  });

  const logoutMutation = useMutation({
    mutationFn: async () => {
      await apiRequest("POST", "/api/logout");
    },
    onSuccess: () => {
      queryClient.setQueryData(["/api/user"], null);
      toast({
        title: "Logged out",
        description: "You have been logged out successfully",
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Logout failed",
        description: error.message,
        variant: "destructive",
      });
    },
  });

  return (
    <AuthContext.Provider
      value={{
        user: user ?? null,
        isLoading,
        error,
        loginMutation,
        logoutMutation,
        registerMutation,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error("useAuth must be used within an AuthProvider");
  }
  return context;
}

================
File: client/src/hooks/use-mobile.tsx
================
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}

================
File: client/src/hooks/use-toast.ts
================
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

================
File: client/src/index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply font-sans antialiased bg-background text-foreground;
  }
}

================
File: client/src/lib/protected-route.tsx
================
import { useAuth } from "@/hooks/use-auth";
import { Loader2 } from "lucide-react";
import { Redirect, Route } from "wouter";

export function ProtectedRoute({
  path,
  component: Component,
  allowedRoles,
}: {
  path: string;
  component: () => React.JSX.Element;
  allowedRoles?: string[];
}) {
  const { user, isLoading } = useAuth();

  if (isLoading) {
    return (
      <Route path={path}>
        <div className="flex items-center justify-center min-h-screen">
          <Loader2 className="h-8 w-8 animate-spin text-primary-600" />
        </div>
      </Route>
    );
  }

  if (!user) {
    return (
      <Route path={path}>
        <Redirect to="/auth" />
      </Route>
    );
  }

  // Check if the user has the required role
  if (allowedRoles && !allowedRoles.includes(user.role)) {
    return (
      <Route path={path}>
        <div className="flex flex-col items-center justify-center min-h-screen">
          <h1 className="text-2xl font-semibold text-red-600 mb-2">Access Denied</h1>
          <p className="text-slate-600">You don't have permission to access this page.</p>
        </div>
      </Route>
    );
  }

  return <Route path={path} component={Component} />;
}

================
File: client/src/lib/queryClient.ts
================
import { QueryClient, QueryFunction } from "@tanstack/react-query";

async function throwIfResNotOk(res: Response) {
  if (!res.ok) {
    const text = (await res.text()) || res.statusText;
    throw new Error(`${res.status}: ${text}`);
  }
}

export async function apiRequest(
  method: string,
  url: string,
  data?: unknown | undefined,
): Promise<Response> {
  const res = await fetch(url, {
    method,
    headers: data ? { "Content-Type": "application/json" } : {},
    body: data ? JSON.stringify(data) : undefined,
    credentials: "include",
  });

  await throwIfResNotOk(res);
  return res;
}

type UnauthorizedBehavior = "returnNull" | "throw";
export const getQueryFn: <T>(options: {
  on401: UnauthorizedBehavior;
}) => QueryFunction<T> =
  ({ on401: unauthorizedBehavior }) =>
  async ({ queryKey }) => {
    const res = await fetch(queryKey[0] as string, {
      credentials: "include",
    });

    if (unauthorizedBehavior === "returnNull" && res.status === 401) {
      return null;
    }

    await throwIfResNotOk(res);
    return await res.json();
  };

export const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      queryFn: getQueryFn({ on401: "throw" }),
      refetchInterval: false,
      refetchOnWindowFocus: false,
      staleTime: Infinity,
      retry: false,
    },
    mutations: {
      retry: false,
    },
  },
});

================
File: client/src/lib/utils.ts
================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

================
File: client/src/main.tsx
================
import { createRoot } from "react-dom/client";
import App from "./App";
import "./index.css";

createRoot(document.getElementById("root")!).render(<App />);

================
File: client/src/pages/audit-page.tsx
================
import { useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import DashboardLayout from '@/components/layouts/DashboardLayout';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { AuditTrail, Document } from '@/types';
import { 
  CheckSquare, 
  Search, 
  Download, 
  Clock, 
  FileText, 
  Calendar,
  User,
  Filter
} from 'lucide-react';
import { format } from 'date-fns';
import { useLocation } from 'wouter';
import { 
  Select, 
  SelectContent, 
  SelectItem, 
  SelectTrigger, 
  SelectValue 
} from '@/components/ui/select';
import { Skeleton } from '@/components/ui/skeleton';
import { Badge } from '@/components/ui/badge';

export default function AuditPage() {
  const [, navigate] = useLocation();
  const [searchQuery, setSearchQuery] = useState('');
  const [dateFilter, setDateFilter] = useState('all');
  const [actionFilter, setActionFilter] = useState('all');
  
  // Fetch audit trail records
  const { 
    data: auditTrail,
    isLoading,
    error
  } = useQuery<AuditTrail[]>({
    queryKey: ['/api/documents/1/audit'], // In a real app, this would fetch all audit records
  });

  // Fetch documents for linking
  const {
    data: documents,
    isLoading: isLoadingDocuments
  } = useQuery<Document[]>({
    queryKey: ['/api/documents'],
  });

  const handleViewDocument = (documentId: number) => {
    navigate(`/documents/${documentId}?tab=audit`);
  };

  const getActionBadge = (action: string) => {
    switch (action) {
      case 'DOCUMENT_CREATED':
        return <Badge variant="outline" className="bg-primary-100 text-primary-800 border-transparent">Created</Badge>;
      case 'DOCUMENT_UPDATED':
        return <Badge variant="outline" className="bg-slate-100 text-slate-800 border-transparent">Updated</Badge>;
      case 'DOCUMENT_SIGNED':
        return <Badge variant="outline" className="bg-success-100 text-success-800 border-transparent">Signed</Badge>;
      case 'COMPLIANCE_DEADLINE_CREATED':
        return <Badge variant="outline" className="bg-warning-100 text-warning-800 border-transparent">Deadline Created</Badge>;
      case 'COMPLIANCE_DEADLINE_UPDATED':
        return <Badge variant="outline" className="bg-warning-100 text-warning-800 border-transparent">Deadline Updated</Badge>;
      default:
        return <Badge variant="outline">{action.replace(/_/g, ' ').toLowerCase()}</Badge>;
    }
  };

  // Filter audit trail based on search and filters
  const filteredAuditTrail = auditTrail
    ?.filter(entry => {
      // Search filter
      if (searchQuery && !(
        entry.action.toLowerCase().includes(searchQuery.toLowerCase()) ||
        (entry.details && entry.details.toLowerCase().includes(searchQuery.toLowerCase()))
      )) {
        return false;
      }
      
      // Date filter
      if (dateFilter !== 'all') {
        const entryDate = new Date(entry.timestamp);
        const now = new Date();
        
        if (dateFilter === 'today') {
          if (entryDate.getDate() !== now.getDate() || 
              entryDate.getMonth() !== now.getMonth() || 
              entryDate.getFullYear() !== now.getFullYear()) {
            return false;
          }
        } else if (dateFilter === 'week') {
          const weekAgo = new Date();
          weekAgo.setDate(now.getDate() - 7);
          if (entryDate < weekAgo) {
            return false;
          }
        } else if (dateFilter === 'month') {
          const monthAgo = new Date();
          monthAgo.setMonth(now.getMonth() - 1);
          if (entryDate < monthAgo) {
            return false;
          }
        }
      }
      
      // Action filter
      if (actionFilter !== 'all' && entry.action !== actionFilter) {
        return false;
      }
      
      return true;
    });

  return (
    <DashboardLayout pageTitle="Audit Trail">
      <div className="mb-6">
        <h1 className="text-2xl font-bold text-slate-800">Audit Trail</h1>
        <p className="text-slate-500">View complete chain of custody and compliance activity</p>
      </div>

      <Card className="mb-6">
        <CardContent className="p-4">
          <div className="flex flex-col md:flex-row space-y-2 md:space-y-0 md:space-x-2">
            <div className="relative flex-grow">
              <Search className="absolute left-3 top-2.5 h-4 w-4 text-slate-400" />
              <Input
                placeholder="Search audit records..."
                className="pl-10"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
              />
            </div>
            
            <div className="flex space-x-2">
              <Select value={dateFilter} onValueChange={setDateFilter}>
                <SelectTrigger className="w-36">
                  <Calendar className="h-4 w-4 mr-2" />
                  <SelectValue placeholder="Date Filter" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All dates</SelectItem>
                  <SelectItem value="today">Today</SelectItem>
                  <SelectItem value="week">Last 7 days</SelectItem>
                  <SelectItem value="month">Last 30 days</SelectItem>
                </SelectContent>
              </Select>
              
              <Select value={actionFilter} onValueChange={setActionFilter}>
                <SelectTrigger className="w-36">
                  <Filter className="h-4 w-4 mr-2" />
                  <SelectValue placeholder="Action Filter" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All actions</SelectItem>
                  <SelectItem value="DOCUMENT_CREATED">Created</SelectItem>
                  <SelectItem value="DOCUMENT_UPDATED">Updated</SelectItem>
                  <SelectItem value="DOCUMENT_SIGNED">Signed</SelectItem>
                </SelectContent>
              </Select>
              
              <Button variant="outline">
                <Download className="h-4 w-4 mr-2" />
                Export
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>

      <Card>
        <CardHeader>
          <CardTitle className="flex items-center text-base">
            <CheckSquare className="mr-2 h-5 w-5" />
            Compliance Audit Records
          </CardTitle>
        </CardHeader>
        <CardContent>
          {isLoading ? (
            <div className="space-y-4">
              {[...Array(5)].map((_, i) => (
                <div key={i} className="flex items-center">
                  <Skeleton className="h-8 w-8 rounded-full mr-2" />
                  <Skeleton className="h-5 w-2/3" />
                  <Skeleton className="h-5 w-1/6 ml-auto" />
                </div>
              ))}
            </div>
          ) : error ? (
            <div className="text-center p-6">
              <div className="mx-auto h-12 w-12 text-red-500 mb-4">
                <CheckSquare size={48} />
              </div>
              <h3 className="text-lg font-medium mb-2">Error loading audit trail</h3>
              <p className="text-slate-500 mb-4">{error.message || "Failed to load audit data"}</p>
              <Button onClick={() => window.location.reload()}>Try Again</Button>
            </div>
          ) : filteredAuditTrail && filteredAuditTrail.length > 0 ? (
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Date & Time</TableHead>
                  <TableHead>User</TableHead>
                  <TableHead>Document</TableHead>
                  <TableHead>Action</TableHead>
                  <TableHead>Details</TableHead>
                  <TableHead className="text-right">View</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {filteredAuditTrail.map((entry) => (
                  <TableRow key={entry.id}>
                    <TableCell className="whitespace-nowrap">
                      <div className="flex items-center">
                        <Clock className="h-3.5 w-3.5 text-slate-400 mr-1" />
                        {format(new Date(entry.timestamp), 'MMM d, yyyy h:mm a')}
                      </div>
                    </TableCell>
                    <TableCell>
                      <div className="flex items-center">
                        <User className="h-3.5 w-3.5 text-slate-400 mr-1" />
                        User ID: {entry.userId}
                      </div>
                    </TableCell>
                    <TableCell>
                      {entry.documentId ? (
                        <div className="flex items-center">
                          <FileText className="h-3.5 w-3.5 text-slate-400 mr-1" />
                          Document ID: {entry.documentId}
                        </div>
                      ) : (
                        <span className="text-slate-500">N/A</span>
                      )}
                    </TableCell>
                    <TableCell>
                      {getActionBadge(entry.action)}
                    </TableCell>
                    <TableCell className="max-w-xs truncate">
                      {entry.details || 'No details provided'}
                    </TableCell>
                    <TableCell className="text-right">
                      {entry.documentId && (
                        <Button 
                          variant="ghost" 
                          size="sm"
                          onClick={() => handleViewDocument(entry.documentId as number)}
                        >
                          View
                        </Button>
                      )}
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          ) : (
            <div className="text-center p-6">
              <CheckSquare className="mx-auto h-12 w-12 text-slate-400 mb-4" />
              <h3 className="text-lg font-medium mb-2">No audit records found</h3>
              <p className="text-slate-500">
                {searchQuery || dateFilter !== 'all' || actionFilter !== 'all' 
                  ? 'Try adjusting your filters to see more results.' 
                  : 'No activity has been recorded yet.'}
              </p>
            </div>
          )}
        </CardContent>
      </Card>
    </DashboardLayout>
  );
}

================
File: client/src/pages/auth-page.tsx
================
import { useEffect, useState } from 'react';
import { useLocation } from 'wouter';
import { useAuth } from '@/hooks/use-auth';
import LoginForm from '@/components/auth/LoginForm';
import RegisterForm from '@/components/auth/RegisterForm';
import { CheckCircle } from 'lucide-react';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';

export default function AuthPage() {
  const [activeTab, setActiveTab] = useState<string>('login');
  const { user, isLoading } = useAuth();
  const [, navigate] = useLocation();

  // Redirect to dashboard if already logged in
  useEffect(() => {
    if (user && !isLoading) {
      navigate('/');
    }
  }, [user, isLoading, navigate]);

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="w-8 h-8 border-4 border-primary-600 border-t-transparent rounded-full animate-spin"></div>
      </div>
    );
  }

  return (
    <div className="min-h-screen flex flex-col md:flex-row">
      {/* Left Side - Authentication Forms */}
      <div className="w-full md:w-1/2 p-8 flex items-center justify-center">
        <div className="w-full max-w-md">
          <div className="mb-8 text-center md:text-left">
            <div className="flex items-center justify-center md:justify-start mb-2">
              <div className="h-10 w-10 rounded-md bg-primary-600 flex items-center justify-center mr-2">
                <CheckCircle className="text-white" size={24} />
              </div>
              <h1 className="text-2xl font-bold">ComplianceAI</h1>
            </div>
            <p className="text-slate-600 max-w-sm">
              Streamline your regulatory compliance with AI-powered document management
            </p>
          </div>

          <Tabs value={activeTab} onValueChange={setActiveTab}>
            <TabsList className="grid w-full grid-cols-2 mb-8">
              <TabsTrigger value="login">Login</TabsTrigger>
              <TabsTrigger value="register">Register</TabsTrigger>
            </TabsList>
            <TabsContent value="login">
              <LoginForm />
            </TabsContent>
            <TabsContent value="register">
              <RegisterForm />
            </TabsContent>
          </Tabs>
        </div>
      </div>

      {/* Right Side - Hero Section */}
      <div className="w-full md:w-1/2 bg-slate-800 text-white p-8 hidden md:flex flex-col justify-center">
        <div className="max-w-lg mx-auto">
          <h2 className="text-3xl font-bold mb-6">Simplify Compliance Management</h2>
          <div className="space-y-6">
            <div className="flex items-start">
              <div className="h-8 w-8 rounded-full bg-primary-700 flex items-center justify-center mr-4 mt-1">
                <CheckCircle className="h-5 w-5" />
              </div>
              <div>
                <h3 className="font-semibold text-lg mb-1">Intelligent Document Creation</h3>
                <p className="text-slate-300">
                  Generate compliance documents using AI with customizable templates
                </p>
              </div>
            </div>
            
            <div className="flex items-start">
              <div className="h-8 w-8 rounded-full bg-primary-700 flex items-center justify-center mr-4 mt-1">
                <CheckCircle className="h-5 w-5" />
              </div>
              <div>
                <h3 className="font-semibold text-lg mb-1">Secure Digital Signatures</h3>
                <p className="text-slate-300">
                  Sign and verify documents with built-in digital signature system
                </p>
              </div>
            </div>
            
            <div className="flex items-start">
              <div className="h-8 w-8 rounded-full bg-primary-700 flex items-center justify-center mr-4 mt-1">
                <CheckCircle className="h-5 w-5" />
              </div>
              <div>
                <h3 className="font-semibold text-lg mb-1">Comprehensive Audit Trails</h3>
                <p className="text-slate-300">
                  Maintain complete chain of custody for all compliance documents
                </p>
              </div>
            </div>
            
            <div className="flex items-start">
              <div className="h-8 w-8 rounded-full bg-primary-700 flex items-center justify-center mr-4 mt-1">
                <CheckCircle className="h-5 w-5" />
              </div>
              <div>
                <h3 className="font-semibold text-lg mb-1">Automated Compliance Alerts</h3>
                <p className="text-slate-300">
                  Stay on top of deadlines with intelligent reminders and notifications
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

================
File: client/src/pages/compliance-deadline-page.tsx
================
import { useState, useEffect } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { useParams, useLocation } from 'wouter';
import { format } from 'date-fns';
import { CalendarIcon, Clock, FileText, Edit, AlertTriangle, CheckCircle, ArrowLeft, User as UserIcon } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import DashboardLayout from '@/components/layouts/DashboardLayout';
import EditDeadlineModal from '@/components/compliance/EditDeadlineModal';
import { ComplianceDeadline, User } from '@/types';
import { useToast } from '@/hooks/use-toast';

const statusColors = {
  not_started: 'bg-slate-100 text-slate-800',
  in_progress: 'bg-blue-100 text-blue-800',
  completed: 'bg-green-100 text-green-800',
  overdue: 'bg-red-100 text-red-800'
};

const statusIcons = {
  not_started: <Clock className="h-4 w-4" />,
  in_progress: <FileText className="h-4 w-4" />,
  completed: <CheckCircle className="h-4 w-4" />,
  overdue: <AlertTriangle className="h-4 w-4" />
};

export default function ComplianceDeadlinePage() {
  const { id } = useParams<{ id: string }>();
  const [, navigate] = useLocation();
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [isEditModalOpen, setIsEditModalOpen] = useState(false);
  
  // Ensure ID is a valid number
  const parsedId = id ? parseInt(id, 10) : null;
  
  const {
    data: deadline,
    isLoading,
    error
  } = useQuery<ComplianceDeadline>({
    queryKey: ['/api/compliance-deadlines', parsedId],
    enabled: !!parsedId && !isNaN(parsedId),
  });
  
  // Create a validated deadline object with guaranteed ID
  const validatedDeadline = deadline ? {
    ...deadline,
    id: parsedId as number // Ensure ID is always the parsed number
  } : null;
  
  // Fetch users data to display assignee name
  const { data: users } = useQuery<User[]>({
    queryKey: ['/api/users'],
    staleTime: 5 * 60 * 1000, // 5 minutes
    enabled: !!deadline?.assigneeId, // Only fetch users if there's an assignee
  });
  
  // Find the assignee user if it exists
  const assignee = users?.find(user => user.id === deadline?.assigneeId);
  
  const updateStatusMutation = useMutation({
    mutationFn: async (newStatus: string) => {
      if (!parsedId || isNaN(parsedId)) {
        throw new Error('Invalid deadline ID');
      }
      
      const response = await fetch(`/api/compliance-deadlines/${parsedId}`, {
        method: 'PUT',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ status: newStatus }),
        credentials: 'include',
      });
      
      if (!response.ok) {
        throw new Error('Failed to update status');
      }
      
      return await response.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/compliance-deadlines', parsedId] });
      toast({
        title: 'Status updated',
        description: 'The deadline status has been updated successfully.',
      });
    },
    onError: (error) => {
      toast({
        title: 'Error',
        description: `Failed to update status: ${error.message}`,
        variant: 'destructive',
      });
    },
  });
  
  const handleMarkInProgress = () => {
    updateStatusMutation.mutate('in_progress');
  };
  
  const handleMarkComplete = () => {
    updateStatusMutation.mutate('completed');
  };
  
  const handleEdit = () => {
    // Only open edit modal if we have a valid deadline with ID
    if (validatedDeadline && typeof validatedDeadline.id === 'number') {
      setIsEditModalOpen(true);
    } else {
      toast({
        title: 'Error',
        description: 'Cannot edit this deadline: invalid ID',
        variant: 'destructive',
      });
    }
  };
  
  const handleCloseEditModal = () => {
    setIsEditModalOpen(false);
  };
  
  const handleGoBack = () => {
    navigate('/dashboard');
  };
  
  if (isLoading) {
    return (
      <DashboardLayout pageTitle="Compliance Deadline">
        <div className="flex items-center justify-center py-16">
          <div className="animate-pulse h-4 w-32 bg-slate-200 rounded"></div>
        </div>
      </DashboardLayout>
    );
  }
  
  if (error || !validatedDeadline) {
    return (
      <DashboardLayout pageTitle="Compliance Deadline">
        <div className="flex flex-col items-center justify-center py-16">
          <h2 className="text-xl font-semibold text-red-600 mb-2">Error Loading Deadline</h2>
          <p className="text-slate-600 mb-4">Unable to load the deadline details.</p>
          <Button variant="outline" onClick={handleGoBack}>
            <ArrowLeft className="mr-2 h-4 w-4" /> Return to Dashboard
          </Button>
        </div>
      </DashboardLayout>
    );
  }
  
  const deadlineDate = new Date(validatedDeadline.deadline);
  const isPastDeadline = deadlineDate < new Date();
  const statusClass = statusColors[validatedDeadline.status as keyof typeof statusColors] || statusColors.not_started;
  const StatusIcon = statusIcons[validatedDeadline.status as keyof typeof statusIcons] || statusIcons.not_started;
  
  return (
    <DashboardLayout pageTitle="Compliance Deadline">
      <div className="mb-6 flex justify-between items-center">
        <h1 className="text-2xl font-bold text-slate-800">Compliance Deadline Details</h1>
        <Button variant="outline" onClick={handleGoBack}>
          <ArrowLeft className="mr-2 h-4 w-4" /> Back
        </Button>
      </div>
      
      <div className="max-w-3xl mx-auto">
        <Card className="shadow-md">
          <CardHeader>
            <div className="flex justify-between items-start">
              <div>
                <CardTitle className="text-2xl">{validatedDeadline.title}</CardTitle>
                <CardDescription className="mt-2 flex items-center">
                  <CalendarIcon className="h-4 w-4 mr-1" />
                  {format(deadlineDate, "MMMM d, yyyy")}
                  {isPastDeadline && validatedDeadline.status !== 'completed' && (
                    <Badge variant="destructive" className="ml-2">Past Due</Badge>
                  )}
                </CardDescription>
              </div>
              <Badge className={`${statusClass} flex items-center gap-1 px-2 py-1`}>
                {StatusIcon}
                {validatedDeadline.status === 'not_started' && 'Not Started'}
                {validatedDeadline.status === 'in_progress' && 'In Progress'}
                {validatedDeadline.status === 'completed' && 'Completed'}
                {validatedDeadline.status === 'overdue' && 'Overdue'}
              </Badge>
            </div>
          </CardHeader>
          
          <CardContent className="space-y-6">
            <div>
              <h3 className="text-sm font-medium text-slate-500 mb-1">Type</h3>
              <p className="capitalize">{validatedDeadline.type}</p>
            </div>
            
            {validatedDeadline.description && (
              <div>
                <h3 className="text-sm font-medium text-slate-500 mb-1">Description</h3>
                <p>{validatedDeadline.description}</p>
              </div>
            )}
            
            {validatedDeadline.assigneeId && (
              <div>
                <h3 className="text-sm font-medium text-slate-500 mb-1">Assignee</h3>
                <div className="flex items-center">
                  <div className="h-8 w-8 rounded-full bg-primary-100 text-primary-800 flex items-center justify-center text-sm font-medium">
                    <UserIcon className="h-4 w-4" />
                  </div>
                  <span className="ml-2">{assignee?.name || `User ID: ${validatedDeadline.assigneeId}`}</span>
                </div>
              </div>
            )}
            
            {validatedDeadline.documentId && (
              <div>
                <h3 className="text-sm font-medium text-slate-500 mb-1">Related Document</h3>
                <Button 
                  variant="link" 
                  className="px-0"
                  onClick={() => navigate(`/documents/${validatedDeadline.documentId}`)}
                >
                  View Document
                </Button>
              </div>
            )}
          </CardContent>
          
          <CardFooter className="flex justify-between border-t pt-6">
            <div>
              <Button
                variant="outline"
                onClick={handleEdit}
              >
                <Edit className="mr-2 h-4 w-4" /> Edit
              </Button>
            </div>
            <div className="space-x-2">
              {validatedDeadline.status !== 'completed' && (
                <Button 
                  variant="outline" 
                  onClick={handleMarkInProgress}
                  disabled={validatedDeadline.status === 'in_progress' || updateStatusMutation.isPending}
                >
                  Mark In Progress
                </Button>
              )}
              {validatedDeadline.status !== 'completed' && (
                <Button 
                  onClick={handleMarkComplete}
                  disabled={updateStatusMutation.isPending}
                >
                  Mark Complete
                </Button>
              )}
            </div>
          </CardFooter>
        </Card>
      </div>
      
      {isEditModalOpen && validatedDeadline && (
        <EditDeadlineModal
          isOpen={isEditModalOpen}
          onClose={handleCloseEditModal}
          deadline={validatedDeadline}
        />
      )}
    </DashboardLayout>
  );
}

================
File: client/src/pages/dashboard-page.tsx
================
import { useState, useEffect } from 'react';
import { useQuery } from '@tanstack/react-query';
import { useLocation } from 'wouter';
import DashboardLayout from '@/components/layouts/DashboardLayout';
import DashboardOverview from '@/components/dashboard/DashboardOverview';
import DocumentsSection from '@/components/dashboard/DocumentsSection';
import ComplianceCalendar from '@/components/dashboard/ComplianceCalendar';
import AIAssistant from '@/components/dashboard/AIAssistant';
import CreateDocumentModal from '@/components/documents/CreateDocumentModal';
import EditDeadlineModal from '@/components/compliance/EditDeadlineModal';
import AddDeadlineModal from '@/components/compliance/AddDeadlineModal';
import { DashboardStats, PendingDocumentItem, RecentDocumentItem, ComplianceCalendarItem, Template, ComplianceDeadline, User } from '@/types';
import { Plus, AlertCircle } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { useToast } from '@/hooks/use-toast';

export default function DashboardPage() {
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
  const [isEditDeadlineModalOpen, setIsEditDeadlineModalOpen] = useState(false);
  const [isAddDeadlineModalOpen, setIsAddDeadlineModalOpen] = useState(false);
  const [selectedDeadlineId, setSelectedDeadlineId] = useState<number | null>(null);
  const [, navigate] = useLocation();
  const { toast } = useToast();
  
  // Fetch dashboard stats
  const { 
    data: dashboardStats,
    isLoading: isLoadingStats
  } = useQuery<DashboardStats>({
    queryKey: ['/api/dashboard/stats'],
  });

  // Fetch documents that need action
  const {
    data: pendingDocuments,
    isLoading: isLoadingPending
  } = useQuery<PendingDocumentItem[]>({
    queryKey: ['/api/documents', { status: 'pending_approval' }],
    select: (data) => data.map(doc => ({
      id: doc.id,
      title: doc.title,
      deadline: doc.deadline || undefined,
      status: doc.status,
      actionType: doc.status === 'pending_approval' ? 'approve' : 
                 doc.status === 'active' ? 'review' : 'sign'
    })),
  });

  // Fetch recent documents
  const {
    data: recentDocuments,
    isLoading: isLoadingRecent
  } = useQuery<RecentDocumentItem[]>({
    queryKey: ['/api/documents'],
    select: (data) => data.slice(0, 5).map(doc => ({
      id: doc.id,
      title: doc.title,
      updatedAt: doc.updatedAt,
      status: doc.status
    })),
  });

  // Fetch compliance deadlines
  const {
    data: complianceDeadlines,
    isLoading: isLoadingDeadlines
  } = useQuery<ComplianceCalendarItem[]>({
    queryKey: ['/api/compliance-deadlines', { upcoming: true }],
    select: (data: any[]) => data.map(deadline => {
      // Find the assignee user if available
      const assigneeUser = users?.find(user => user.id === deadline.assigneeId);
      
      return {
        id: deadline.id,
        title: deadline.title,
        deadline: deadline.deadline,
        type: deadline.type,
        assignee: {
          id: assigneeUser?.id || 0,
          name: assigneeUser?.name || 'Unassigned',
          initials: assigneeUser?.name?.slice(0, 2)?.toUpperCase() || 'UN'
        },
        status: deadline.status
      };
    }),
  });

  // Fetch users for assignee information
  const { data: users } = useQuery<User[]>({
    queryKey: ['/api/users'],
    staleTime: 5 * 60 * 1000, // 5 minutes
  });

  // Fetch templates for create document modal
  const {
    data: templates,
    isLoading: isLoadingTemplates
  } = useQuery<Template[]>({
    queryKey: ['/api/templates'],
    enabled: isCreateModalOpen, // Only fetch when modal is open
  });

  // Fetch deadline details when editing
  const {
    data: selectedDeadline,
    isLoading: isLoadingSelectedDeadline
  } = useQuery<ComplianceDeadline>({
    queryKey: ['/api/compliance-deadlines', selectedDeadlineId],
    enabled: isEditDeadlineModalOpen && selectedDeadlineId !== null,
  });

  // Create a validated deadline object to ensure ID is properly set
  const validatedSelectedDeadline = selectedDeadline && selectedDeadlineId ? {
    ...selectedDeadline,
    id: selectedDeadlineId
  } : null;

  const handleCreateDocument = () => {
    setIsCreateModalOpen(true);
  };

  const handleCloseModal = () => {
    setIsCreateModalOpen(false);
  };

  const handleViewDeadline = (id: number) => {
    navigate(`/compliance/deadlines/${id}`);
  };

  const handleEditDeadline = (id: number) => {
    if (!id || isNaN(id)) {
      toast({
        title: 'Error',
        description: 'Cannot edit deadline: Invalid ID',
        variant: 'destructive',
      });
      return;
    }
    setSelectedDeadlineId(id);
    setIsEditDeadlineModalOpen(true);
  };

  const handleCloseEditDeadlineModal = () => {
    setIsEditDeadlineModalOpen(false);
    setSelectedDeadlineId(null);
  };

  const handleAddDeadline = () => {
    setIsAddDeadlineModalOpen(true);
  };

  const handleCloseAddDeadlineModal = () => {
    setIsAddDeadlineModalOpen(false);
  };

  return (
    <DashboardLayout 
      pageTitle="Dashboard" 
      notificationCount={dashboardStats?.pending || 0}
    >
      <div className="mb-6 flex justify-between items-center">
        <div>
          <h1 className="text-2xl font-bold text-slate-800">Welcome to ComplianceAI</h1>
          <p className="text-slate-500">Manage your compliance documents efficiently</p>
        </div>
        <Button onClick={handleCreateDocument}>
          <Plus className="mr-1 h-4 w-4" /> 
          Create Document
        </Button>
      </div>

      <DashboardOverview 
        stats={dashboardStats || {
          documents: 0,
          pending: 0,
          complianceRate: 0,
          expiringCount: 0,
          docsCreatedLastMonth: 0,
          urgentCount: 0,
          lastMonthComplianceChange: "+0%"
        }} 
        isLoading={isLoadingStats}
      />

      <DocumentsSection 
        pendingDocuments={pendingDocuments || []} 
        recentDocuments={recentDocuments || []}
        isLoading={isLoadingPending || isLoadingRecent}
      />

      <ComplianceCalendar 
        calendarItems={complianceDeadlines || []}
        isLoading={isLoadingDeadlines}
        onViewItem={handleViewDeadline}
        onEditItem={handleEditDeadline}
        onAddItem={handleAddDeadline}
      />

      <AIAssistant />

      {isCreateModalOpen && (
        <CreateDocumentModal
          isOpen={isCreateModalOpen}
          onClose={handleCloseModal}
          templates={templates || []}
          isLoadingTemplates={isLoadingTemplates}
        />
      )}

      {isEditDeadlineModalOpen && validatedSelectedDeadline && (
        <EditDeadlineModal
          isOpen={isEditDeadlineModalOpen}
          onClose={handleCloseEditDeadlineModal}
          deadline={validatedSelectedDeadline}
          isLoading={isLoadingSelectedDeadline}
        />
      )}

      {isAddDeadlineModalOpen && (
        <AddDeadlineModal
          isOpen={isAddDeadlineModalOpen}
          onClose={handleCloseAddDeadlineModal}
        />
      )}
    </DashboardLayout>
  );
}

================
File: client/src/pages/document-dashboard-page.tsx
================
// client/src/pages/document-dashboard-page.tsx
import { useState, useMemo } from 'react';
import { useQuery, useMutation } from '@tanstack/react-query';
import { useLocation, useRoute } from 'wouter';
import DashboardLayout from '@/components/layouts/DashboardLayout';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent } from '@/components/ui/card';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';
import { Table, TableHeader, TableBody, TableRow, TableHead, TableCell } from '@/components/ui/table';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Document } from '@/types';
import { FileText, Download, Trash2, Upload, Search, Filter, Eye, Edit, Plus, FilePlus } from 'lucide-react';
import { formatDistanceToNow } from 'date-fns';
import { queryClient } from '@/lib/queryClient';
import { useToast } from '@/hooks/use-toast';

interface FileItem {
  name: string;
  key: string;
  documentId?: number;
}

export default function DocumentDashboardPage() {
  const [, navigate] = useLocation();
  const { toast } = useToast();
  const [searchQuery, setSearchQuery] = useState('');
  const [statusFilter, setStatusFilter] = useState<string>('all');
  const [isUploadDialogOpen, setIsUploadDialogOpen] = useState(false);
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [documentName, setDocumentName] = useState('');
  const [selectedDocument, setSelectedDocument] = useState<Document | null>(null);
  const [selectedDocumentFiles, setSelectedDocumentFiles] = useState<FileItem[]>([]);
  const [isDeleteConfirmOpen, setIsDeleteConfirmOpen] = useState(false);
  const [fileToDelete, setFileToDelete] = useState<FileItem | null>(null);

  // Fetch all documents
  const { data: documents = [], isLoading } = useQuery<Document[]>({
    queryKey: ['/api/documents', { status: statusFilter !== 'all' ? statusFilter : undefined }],
    queryFn: async () => {
      const query = statusFilter !== 'all' ? `?status=${statusFilter}` : '';
      const res = await fetch(`/api/documents${query}`, { credentials: 'include' });
      if (!res.ok) throw new Error('Failed to fetch documents');
      return res.json();
    },
  });

  // Fetch all files for all documents
  const { data: allFiles = [], isLoading: isLoadingFiles } = useQuery<FileItem[]>({
    queryKey: ['/api/documents/files'],
    queryFn: async () => {
      const res = await fetch('/api/documents/files', { credentials: 'include' });
      if (!res.ok) throw new Error('Failed to fetch all document files');
      return res.json();
    },
  });

  // Create new document mutation
  const createDocumentMutation = useMutation({
    mutationFn: async ({ title, file }: { title: string; file: File }) => {
      // First create the document
      try {
        const docRes = await fetch('/api/documents', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ 
            title, 
            content: '', 
            status: 'draft',
            // Don't send createdById - the server will set this from the authenticated user
          }),
          credentials: 'include',
        });
        
        // If the response is not OK, attempt to parse error details
        if (!docRes.ok) {
          const errorData = await docRes.json().catch(() => ({ message: 'Failed to parse error' }));
          console.error('Document creation failed:', errorData);
          throw new Error(errorData.message || `Failed to create document: ${docRes.status} ${docRes.statusText}`);
        }
        
        const document = await docRes.json();
        console.log('Document created successfully:', document);
        
        // Then upload the file to the document
        if (file) {
          console.log('Uploading file for document:', document.id);
          const formData = new FormData();
          formData.append('file', file);
          
          const fileRes = await fetch(`/api/documents/${document.id}/files`, {
            method: 'POST',
            body: formData,
            credentials: 'include',
          });
          
          if (!fileRes.ok) {
            // If file upload fails, log it but don't fail the whole operation
            console.error('File upload failed for document:', document.id, await fileRes.text().catch(() => 'Could not read error details'));
          } else {
            console.log('File uploaded successfully for document:', document.id);
          }
        }
        
        return document;
      } catch (error) {
        console.error('Error in document creation process:', error);
        throw error;
      }
    },
    onSuccess: (data) => {
      queryClient.invalidateQueries({ queryKey: ['/api/documents'] });
      setIsUploadDialogOpen(false);
      setDocumentName('');
      setSelectedFile(null);
      toast({
        title: 'Success',
        description: `Document "${data.title}" created successfully`,
      });
    },
    onError: (error) => {
      toast({
        title: 'Error',
        description: error instanceof Error ? error.message : 'Failed to create document',
        variant: 'destructive',
      });
    },
  });

  // Delete file mutation
  const deleteFileMutation = useMutation({
    mutationFn: async (file: FileItem) => {
      const res = await fetch(`/api/documents/${file.documentId}/files/${file.name}`, {
        method: 'DELETE',
        credentials: 'include',
      });
      
      if (!res.ok) throw new Error('Failed to delete file');
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/documents/files'] });
      if (selectedDocument) {
        queryClient.invalidateQueries({ 
          queryKey: [`/api/documents/${selectedDocument.id}/files`] 
        });
      }
      setIsDeleteConfirmOpen(false);
      setFileToDelete(null);
      toast({
        title: 'Success',
        description: 'File deleted successfully',
      });
    },
    onError: (error) => {
      toast({
        title: 'Error',
        description: error instanceof Error ? error.message : 'Failed to delete file',
        variant: 'destructive',
      });
    },
  });

  // Filter documents based on search query
  const filteredDocuments = useMemo(() => {
    if (!searchQuery.trim()) return documents;
    
    return documents.filter(doc => 
      doc.title.toLowerCase().includes(searchQuery.toLowerCase())
    );
  }, [documents, searchQuery]);

  // Handle file selection
  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    if (e.target.files && e.target.files.length > 0) {
      setSelectedFile(e.target.files[0]);
    }
  };

  // Handle document upload
  const handleUpload = () => {
    if (!documentName.trim()) {
      toast({
        title: 'Validation Error',
        description: 'Please provide a document name',
        variant: 'destructive',
      });
      return;
    }

    if (!selectedFile) {
      toast({
        title: 'Validation Error',
        description: 'Please select a file to upload',
        variant: 'destructive',
      });
      return;
    }

    createDocumentMutation.mutate({ 
      title: documentName, 
      file: selectedFile 
    });
  };

  // View document details
  const handleViewDocument = (documentId: number) => {
    navigate(`/documents/${documentId}`);
  };

  // Open file preview modal
  const handleViewFiles = (document: Document) => {
    setSelectedDocument(document);
    // Fetch files for the selected document
    fetch(`/api/documents/${document.id}/files`, { credentials: 'include' })
      .then(res => res.json())
      .then(files => setSelectedDocumentFiles(files))
      .catch(error => {
        console.error('Error fetching document files:', error);
        toast({
          title: 'Error',
          description: 'Failed to fetch document files',
          variant: 'destructive',
        });
      });
  };

  // Close file preview modal
  const handleCloseFilePreview = () => {
    setSelectedDocument(null);
    setSelectedDocumentFiles([]);
  };

  // Delete file confirmation
  const handleDeleteFile = (file: FileItem) => {
    setFileToDelete(file);
    setIsDeleteConfirmOpen(true);
  };

  // Execute file deletion
  const confirmDeleteFile = () => {
    if (fileToDelete) {
      deleteFileMutation.mutate(fileToDelete);
    }
  };

  // Get status badge based on document status
  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'draft':
        return <Badge variant="outline" className="bg-slate-100 text-slate-800">Draft</Badge>;
      case 'pending_approval':
        return <Badge variant="outline" className="bg-warning-100 text-warning-800">Pending Approval</Badge>;
      case 'active':
        return <Badge variant="outline" className="bg-success-100 text-success-800">Active</Badge>;
      case 'expired':
        return <Badge variant="outline" className="bg-error-100 text-error-800">Expired</Badge>;
      case 'archived':
        return <Badge variant="outline" className="bg-slate-200 text-slate-800">Archived</Badge>;
      default:
        return <Badge variant="outline">{status}</Badge>;
    }
  };

  // Download a file
  const handleDownloadFile = (file: FileItem) => {
    window.open(`/api/documents/${file.documentId}/files/${file.name}`, '_blank');
  };

  return (
    <DashboardLayout pageTitle="Document Dashboard">
      <div className="space-y-6">
        {/* Header with actions */}
        <div className="flex justify-between items-center">
          <h1 className="text-2xl font-bold">Document Dashboard</h1>
          <Button onClick={() => setIsUploadDialogOpen(true)}>
            <FilePlus className="mr-2 h-4 w-4" />
            Upload New Document
          </Button>
        </div>

        {/* Search and filter */}
        <div className="flex space-x-4">
          <div className="relative flex-1">
            <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
            <Input
              placeholder="Search documents..."
              className="pl-8"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
          </div>
          <Select value={statusFilter} onValueChange={setStatusFilter}>
            <SelectTrigger className="w-[180px]">
              <Filter className="mr-2 h-4 w-4" />
              <SelectValue placeholder="Filter by status" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Documents</SelectItem>
              <SelectItem value="draft">Draft</SelectItem>
              <SelectItem value="pending_approval">Pending Approval</SelectItem>
              <SelectItem value="active">Active</SelectItem>
              <SelectItem value="expired">Expired</SelectItem>
              <SelectItem value="archived">Archived</SelectItem>
            </SelectContent>
          </Select>
        </div>

        {/* Documents table */}
        {isLoading ? (
          <div className="space-y-3">
            <div className="h-10 bg-slate-200 animate-pulse rounded"></div>
            <div className="h-20 bg-slate-200 animate-pulse rounded"></div>
            <div className="h-20 bg-slate-200 animate-pulse rounded"></div>
            <div className="h-20 bg-slate-200 animate-pulse rounded"></div>
          </div>
        ) : (
          <Card>
            <CardContent className="p-0">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Title</TableHead>
                    <TableHead>Status</TableHead>
                    <TableHead>Created</TableHead>
                    <TableHead>Last Updated</TableHead>
                    <TableHead>Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {filteredDocuments.length === 0 ? (
                    <TableRow>
                      <TableCell colSpan={5} className="text-center py-8">
                        <div className="flex flex-col items-center justify-center space-y-3">
                          <FileText className="h-12 w-12 text-slate-300" />
                          <p className="text-slate-500">No documents found</p>
                          <Button variant="outline" size="sm" onClick={() => setIsUploadDialogOpen(true)}>
                            <Plus className="mr-2 h-4 w-4" />
                            Upload New Document
                          </Button>
                        </div>
                      </TableCell>
                    </TableRow>
                  ) : (
                    filteredDocuments.map((doc) => (
                      <TableRow key={doc.id}>
                        <TableCell className="font-medium">{doc.title}</TableCell>
                        <TableCell>{getStatusBadge(doc.status)}</TableCell>
                        <TableCell>{formatDistanceToNow(new Date(doc.createdAt), { addSuffix: true })}</TableCell>
                        <TableCell>{formatDistanceToNow(new Date(doc.updatedAt), { addSuffix: true })}</TableCell>
                        <TableCell>
                          <div className="flex space-x-2">
                            <Button variant="outline" size="sm" onClick={() => handleViewDocument(doc.id)}>
                              <Eye className="h-4 w-4" />
                            </Button>
                            <Button variant="outline" size="sm" onClick={() => handleViewFiles(doc)}>
                              <FileText className="h-4 w-4" />
                            </Button>
                            <Button variant="outline" size="sm" onClick={() => navigate(`/documents/${doc.id}?action=edit`)}>
                              <Edit className="h-4 w-4" />
                            </Button>
                          </div>
                        </TableCell>
                      </TableRow>
                    ))
                  )}
                </TableBody>
              </Table>
            </CardContent>
          </Card>
        )}
      </div>

      {/* Upload new document dialog */}
      <Dialog open={isUploadDialogOpen} onOpenChange={setIsUploadDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Upload New Document</DialogTitle>
          </DialogHeader>
          <div className="space-y-4 py-4">
            <div className="space-y-2">
              <label htmlFor="document-name" className="text-sm font-medium">
                Document Name
              </label>
              <Input
                id="document-name"
                value={documentName}
                onChange={(e) => setDocumentName(e.target.value)}
                placeholder="Enter document name"
              />
            </div>
            <div className="space-y-2">
              <label htmlFor="document-file" className="text-sm font-medium">
                File
              </label>
              <Input
                id="document-file"
                type="file"
                onChange={handleFileChange}
                className="cursor-pointer"
              />
              {selectedFile && (
                <p className="text-sm text-slate-500">Selected: {selectedFile.name}</p>
              )}
            </div>
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsUploadDialogOpen(false)}>
              Cancel
            </Button>
            <Button 
              onClick={handleUpload} 
              disabled={createDocumentMutation.status === 'pending'}
            >
              {createDocumentMutation.status === 'pending' ? 'Uploading...' : 'Upload'}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>

      {/* File preview dialog */}
      <Dialog open={!!selectedDocument} onOpenChange={handleCloseFilePreview}>
        <DialogContent className="max-w-3xl">
          <DialogHeader>
            <DialogTitle>
              Files for {selectedDocument?.title}
            </DialogTitle>
          </DialogHeader>
          <div className="space-y-4 py-4">
            {selectedDocumentFiles.length === 0 ? (
              <div className="text-center py-8">
                <FileText className="h-12 w-12 text-slate-300 mx-auto mb-3" />
                <p className="text-slate-500">No files found for this document</p>
              </div>
            ) : (
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>File Name</TableHead>
                    <TableHead className="text-right">Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {selectedDocumentFiles.map((file) => (
                    <TableRow key={file.key}>
                      <TableCell>{file.name}</TableCell>
                      <TableCell className="text-right">
                        <div className="flex justify-end space-x-2">
                          <Button variant="outline" size="sm" onClick={() => handleDownloadFile(file)}>
                            <Download className="h-4 w-4" />
                          </Button>
                          <Button variant="destructive" size="sm" onClick={() => handleDeleteFile(file)}>
                            <Trash2 className="h-4 w-4" />
                          </Button>
                        </div>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            )}
          </div>
        </DialogContent>
      </Dialog>

      {/* Delete confirmation dialog */}
      <Dialog open={isDeleteConfirmOpen} onOpenChange={setIsDeleteConfirmOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Confirm Deletion</DialogTitle>
          </DialogHeader>
          <p>Are you sure you want to delete this file? This action cannot be undone.</p>
          {fileToDelete && <p className="font-medium">{fileToDelete.name}</p>}
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsDeleteConfirmOpen(false)}>
              Cancel
            </Button>
            <Button 
              variant="destructive" 
              onClick={confirmDeleteFile}
              disabled={deleteFileMutation.status === 'pending'}
            >
              {deleteFileMutation.status === 'pending' ? 'Deleting...' : 'Delete'}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </DashboardLayout>
  );
}

================
File: client/src/pages/document-detail-page.tsx
================
import { useState, useEffect } from 'react';
import { useParams, useLocation } from 'wouter';
import { useQuery, useMutation } from '@tanstack/react-query';
import DashboardLayout from '@/components/layouts/DashboardLayout';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent } from '@/components/ui/card';
import { Document, DocumentVersion, Signature, AuditTrail } from '@/types';
import { ArrowLeft, Clock, User, FileText, PenTool, History, CheckSquare } from 'lucide-react';
import { formatDistanceToNow, format } from 'date-fns';
import DocumentDetail from '@/components/document/DocumentDetail';
import SignaturePanel from '@/components/document/SignaturePanel';
import DocumentVersionHistory from '@/components/document/DocumentVersionHistory';
import AuditTrailTable from '@/components/document/AuditTrailTable';
import FileManagerPanel from '@/components/document/FileManagerPanel';
import DocumentEditor from '@/components/document/DocumentEditor';
import { useToast } from '@/hooks/use-toast';
import { useAuth } from '@/hooks/use-auth';
import { apiRequest, queryClient } from '@/lib/queryClient';

export default function DocumentDetailPage() {
  const { id } = useParams<{ id: string }>();
  const [location, navigate] = useLocation();
  const [activeTab, setActiveTab] = useState('details');
  const { toast } = useToast();
  const { user } = useAuth();
  const [isEditing, setIsEditing] = useState(false);
  
  // Get action parameter from URL if present
  const urlParams = new URLSearchParams(location.split('?')[1] || '');
  const actionParam = urlParams.get('action');
  
  // Set active tab based on URL action
  useEffect(() => {
    if (actionParam === 'sign') {
      setActiveTab('signatures');
    } else if (actionParam === 'review' || actionParam === 'approve') {
      setActiveTab('details');
    }
  }, [actionParam]);

  // Fetch document details
  const { 
    data: document,
    isLoading: isLoadingDocument,
    error: documentError
  } = useQuery<Document>({
    queryKey: [`/api/documents/${id}`],
    enabled: !!id,
  });

  // Fetch document versions
  const {
    data: versions,
    isLoading: isLoadingVersions
  } = useQuery<DocumentVersion[]>({
    queryKey: [`/api/documents/${id}/versions`],
    enabled: !!id && activeTab === 'versions',
  });

  // Fetch document signatures
  const {
    data: signatures,
    isLoading: isLoadingSignatures
  } = useQuery<Signature[]>({
    queryKey: [`/api/documents/${id}/signatures`],
    enabled: !!id && activeTab === 'signatures',
  });

  // Fetch document audit trail
  const {
    data: auditTrail,
    isLoading: isLoadingAudit
  } = useQuery<AuditTrail[]>({
    queryKey: [`/api/documents/${id}/audit`],
    enabled: !!id && activeTab === 'audit',
  });

  // Update document mutation
  const updateDocumentMutation = useMutation({
    mutationFn: async ({ content, status }: { content?: string, status?: string }) => {
      return await apiRequest(
        'PUT', 
        `/api/documents/${id}`,
        { content, status, createdById: user?.id }
      );
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: [`/api/documents/${id}`] });
      queryClient.invalidateQueries({ queryKey: [`/api/documents/${id}/versions`] });
      queryClient.invalidateQueries({ queryKey: [`/api/documents/${id}/audit`] });
      
      toast({
        title: 'Document updated',
        description: 'The document has been updated successfully',
      });
      
      setIsEditing(false);
    },
    onError: (error) => {
      toast({
        title: 'Update failed',
        description: error.message || 'Failed to update document',
        variant: 'destructive',
      });
    }
  });

  const handleBack = () => {
    navigate('/document-repository');
  };

  const handleEdit = () => {
    setIsEditing(true);
  };

  const handleCancelEdit = () => {
    setIsEditing(false);
  };

  const handleSaveEdit = (content: string) => {
    updateDocumentMutation.mutate({ content });
  };

  const handleApprove = () => {
    updateDocumentMutation.mutate({ status: 'active' });
  };

  const handleSubmitForSignature = () => {
    updateDocumentMutation.mutate({ status: 'pending_approval' });
  };

  // Display error if document couldn't be loaded
  if (documentError) {
    return (
      <DashboardLayout pageTitle="Document Details">
        <div className="p-8 text-center">
          <div className="h-12 w-12 rounded-full bg-error-100 text-error-600 flex items-center justify-center mx-auto mb-4">
            <FileText size={24} />
          </div>
          <h3 className="text-lg font-medium mb-2">Error loading document</h3>
          <p className="text-slate-600 mb-4">{documentError.message || 'Failed to load document'}</p>
          <Button onClick={handleBack}>
            Back to Document Repository
          </Button>
        </div>
      </DashboardLayout>
    );
  }

  // Display loading state
  if (isLoadingDocument || !document) {
    return (
      <DashboardLayout pageTitle="Document Details">
        <div className="animate-pulse space-y-4">
          <div className="h-6 bg-slate-200 rounded w-1/4"></div>
          <div className="h-10 bg-slate-200 rounded w-1/2"></div>
          <div className="h-64 bg-slate-200 rounded w-full"></div>
        </div>
      </DashboardLayout>
    );
  }

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'draft':
        return <Badge variant="outline" className="bg-slate-100 text-slate-800">Draft</Badge>;
      case 'pending_approval':
        return <Badge variant="outline" className="bg-warning-100 text-warning-800">Pending Approval</Badge>;
      case 'active':
        return <Badge variant="outline" className="bg-success-100 text-success-800">Active</Badge>;
      case 'expired':
        return <Badge variant="outline" className="bg-error-100 text-error-800">Expired</Badge>;
      case 'archived':
        return <Badge variant="outline" className="bg-slate-200 text-slate-800">Archived</Badge>;
      default:
        return <Badge variant="outline">{status}</Badge>;
    }
  };

  return (
    <DashboardLayout pageTitle="Document Details">
      <div className="flex items-center space-x-4 mb-6">
        <Button variant="outline" size="sm" onClick={handleBack}>
          <ArrowLeft className="h-4 w-4 mr-1" />
          Back
        </Button>
        <h1 className="text-2xl font-bold text-slate-800">{document.title}</h1>
        {getStatusBadge(document.status)}
      </div>

      <div className="mb-6 grid grid-cols-1 md:grid-cols-4 gap-4">
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center">
              <Clock className="h-5 w-5 text-slate-400 mr-2" />
              <div>
                <p className="text-sm text-slate-500">Last Updated</p>
                <p className="font-medium">{formatDistanceToNow(new Date(document.updatedAt), { addSuffix: true })}</p>
              </div>
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center">
              <User className="h-5 w-5 text-slate-400 mr-2" />
              <div>
                <p className="text-sm text-slate-500">Created By</p>
                <p className="font-medium">User ID: {document.createdById}</p>
              </div>
            </div>
          </CardContent>
        </Card>
        
        <Card>
          <CardContent className="p-4">
            <div className="flex items-center">
              <FileText className="h-5 w-5 text-slate-400 mr-2" />
              <div>
                <p className="text-sm text-slate-500">Version</p>
                <p className="font-medium">{document.version}</p>
              </div>
            </div>
          </CardContent>
        </Card>
        
        {document.expiresAt && (
          <Card>
            <CardContent className="p-4">
              <div className="flex items-center">
                <Clock className="h-5 w-5 text-slate-400 mr-2" />
                <div>
                  <p className="text-sm text-slate-500">Expires</p>
                  <p className="font-medium">{format(new Date(document.expiresAt), 'MMM d, yyyy')}</p>
                </div>
              </div>
            </CardContent>
          </Card>
        )}
      </div>

      <div className="mb-4 flex justify-between items-center">
        <Tabs value={activeTab} onValueChange={setActiveTab} className="w-full">
          <TabsList>
            <TabsTrigger value="details">
              <FileText className="h-4 w-4 mr-2" />
              Details
            </TabsTrigger>
            <TabsTrigger value="signatures">
              <PenTool className="h-4 w-4 mr-2" />
              Signatures
            </TabsTrigger>
            <TabsTrigger value="versions">
              <History className="h-4 w-4 mr-2" />
              Versions
            </TabsTrigger>
            <TabsTrigger value="audit">
              <CheckSquare className="h-4 w-4 mr-2" />
              Audit Trail
            </TabsTrigger>
            <TabsTrigger value="files">
              <FileText className="h-4 w-4 mr-2" />
              Files
            </TabsTrigger>
          </TabsList>
          
          <div className="mt-6">
            <TabsContent value="details">
              {isEditing ? (
                <DocumentEditor 
                  content={document.content} 
                  onSave={handleSaveEdit}
                  onCancel={handleCancelEdit}
                  isSaving={updateDocumentMutation.isPending}
                />
              ) : (
                <div className="space-y-4">
                  <div className="flex justify-end space-x-2">
                    {document.status === 'draft' && (
                      <Button onClick={handleSubmitForSignature} disabled={updateDocumentMutation.isPending}>
                        Submit for Signature
                      </Button>
                    )}
                    {document.status === 'pending_approval' && (user?.role === 'admin' || user?.role === 'compliance_officer') && (
                      <Button onClick={handleApprove} disabled={updateDocumentMutation.isPending}>
                        Approve Document
                      </Button>
                    )}
                    <Button 
                      variant="outline" 
                      onClick={handleEdit}
                      disabled={document.status === 'active' || document.status === 'expired' || document.status === 'archived'}
                    >
                      Edit Document
                    </Button>
                  </div>
                  <DocumentDetail content={document.content} />
                </div>
              )}
            </TabsContent>
            
            <TabsContent value="signatures">
              <SignaturePanel 
                documentId={document.id} 
                signatures={signatures || []} 
                isLoading={isLoadingSignatures}
                documentStatus={document.status}
              />
            </TabsContent>
            
            <TabsContent value="versions">
              <DocumentVersionHistory 
                versions={versions || []} 
                isLoading={isLoadingVersions}
              />
            </TabsContent>
            
            <TabsContent value="audit">
              <AuditTrailTable 
                auditTrail={auditTrail || []} 
                isLoading={isLoadingAudit}
              />
            </TabsContent>
            
            <TabsContent value="files">
              <FileManagerPanel documentId={document.id} />
            </TabsContent>
          </div>
        </Tabs>
      </div>
    </DashboardLayout>
  );
}

================
File: client/src/pages/document-repository-page.tsx
================
import { useState, useEffect } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { useLocation } from 'wouter';
import DashboardLayout from '@/components/layouts/DashboardLayout';
import ComplianceWorkspace from '@/components/documents/ComplianceWorkspace';

export default function DocumentRepositoryPage() {
  return (
    <DashboardLayout pageTitle="Document Workspace">
      <ComplianceWorkspace />
    </DashboardLayout>
  );
}

================
File: client/src/pages/documents-page.tsx
================
import { useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import { useLocation } from 'wouter';
import DashboardLayout from '@/components/layouts/DashboardLayout';
import { Button } from '@/components/ui/button';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import DocumentList from '@/components/document/DocumentList';
import CreateDocumentModal from '@/components/documents/CreateDocumentModal';
import { Document, Template } from '@/types';
import { Plus, Filter } from 'lucide-react';

export default function DocumentsPage() {
  const [searchQuery, setSearchQuery] = useState('');
  const [activeTab, setActiveTab] = useState('all');
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
  const [location] = useLocation();

  // Get filter from URL if present
  const urlParams = new URLSearchParams(location.split('?')[1] || '');
  const filterParam = urlParams.get('filter');
  
  // Set active tab based on URL filter
  useState(() => {
    if (filterParam) {
      setActiveTab(filterParam);
    }
  });

  // Fetch documents with selected filter
  const { 
    data: documents,
    isLoading,
    error
  } = useQuery<Document[]>({
    queryKey: ['/api/documents', { status: activeTab !== 'all' ? activeTab : undefined }],
  });

  // Fetch templates for create document modal
  const {
    data: templates,
    isLoading: isLoadingTemplates
  } = useQuery<Template[]>({
    queryKey: ['/api/templates'],
    enabled: isCreateModalOpen, // Only fetch when modal is open
  });

  // Filter documents by search query
  const filteredDocuments = documents?.filter(doc => 
    doc.title.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const handleSearch = (query: string) => {
    setSearchQuery(query);
  };

  const handleCreateDocument = () => {
    setIsCreateModalOpen(true);
  };

  return (
    <DashboardLayout 
      pageTitle="Documents" 
      onSearch={handleSearch}
    >
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold text-slate-800">Documents</h1>
        <Button onClick={handleCreateDocument}>
          <Plus className="mr-1 h-4 w-4" /> 
          Create Document
        </Button>
      </div>

      <Tabs value={activeTab} onValueChange={setActiveTab} className="mb-6">
        <div className="flex items-center justify-between mb-4">
          <TabsList>
            <TabsTrigger value="all">All Documents</TabsTrigger>
            <TabsTrigger value="draft">Drafts</TabsTrigger>
            <TabsTrigger value="pending_approval">Pending</TabsTrigger>
            <TabsTrigger value="active">Active</TabsTrigger>
            <TabsTrigger value="expired">Expired</TabsTrigger>
          </TabsList>
          <Button variant="outline" size="sm">
            <Filter className="h-4 w-4 mr-1" />
            Advanced Filter
          </Button>
        </div>

        <TabsContent value="all">
          <DocumentList 
            documents={filteredDocuments || []} 
            isLoading={isLoading} 
            error={error?.message}
          />
        </TabsContent>
        
        <TabsContent value="draft">
          <DocumentList 
            documents={filteredDocuments || []} 
            isLoading={isLoading} 
            error={error?.message}
          />
        </TabsContent>
        
        <TabsContent value="pending_approval">
          <DocumentList 
            documents={filteredDocuments || []} 
            isLoading={isLoading} 
            error={error?.message}
          />
        </TabsContent>
        
        <TabsContent value="active">
          <DocumentList 
            documents={filteredDocuments || []} 
            isLoading={isLoading} 
            error={error?.message}
          />
        </TabsContent>
        
        <TabsContent value="expired">
          <DocumentList 
            documents={filteredDocuments || []} 
            isLoading={isLoading} 
            error={error?.message}
          />
        </TabsContent>
      </Tabs>

      {isCreateModalOpen && (
        <CreateDocumentModal
          isOpen={isCreateModalOpen}
          onClose={() => setIsCreateModalOpen(false)}
          templates={templates || [] as Template[]}
          isLoadingTemplates={isLoadingTemplates}
        />
      )}
    </DashboardLayout>
  );
}

================
File: client/src/pages/not-found.tsx
================
import { Card, CardContent } from "@/components/ui/card";
import { AlertCircle } from "lucide-react";

export default function NotFound() {
  return (
    <div className="min-h-screen w-full flex items-center justify-center bg-gray-50">
      <Card className="w-full max-w-md mx-4">
        <CardContent className="pt-6">
          <div className="flex mb-4 gap-2">
            <AlertCircle className="h-8 w-8 text-red-500" />
            <h1 className="text-2xl font-bold text-gray-900">404 Page Not Found</h1>
          </div>

          <p className="mt-4 text-sm text-gray-600">
            Did you forget to add the page to the router?
          </p>
        </CardContent>
      </Card>
    </div>
  );
}

================
File: client/src/pages/settings-page.tsx
================
import { useState } from 'react';
import { useQuery, useMutation } from '@tanstack/react-query';
import DashboardLayout from '@/components/layouts/DashboardLayout';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { Button } from '@/components/ui/button';
import { Switch } from '@/components/ui/switch';
import { Separator } from '@/components/ui/separator';
import { Badge } from '@/components/ui/badge';
import { useAuth } from '@/hooks/use-auth';
import { useToast } from '@/hooks/use-toast';
import { apiRequest, queryClient } from '@/lib/queryClient';
import { zodResolver } from '@hookform/resolvers/zod';
import { useForm } from 'react-hook-form';
import { z } from 'zod';
import { 
  Settings, 
  User, 
  Lock, 
  Bell, 
  Building, 
  Calendar, 
  Shield, 
  Save,
  Info,
  RefreshCw,
  Bot,
  CheckCircle,
  AlertTriangle
} from 'lucide-react';

// Profile settings schema
const profileFormSchema = z.object({
  name: z.string().min(2, { message: 'Name must be at least 2 characters' }),
  email: z.string().email({ message: 'Please enter a valid email address' }),
});

// Password settings schema
const passwordFormSchema = z.object({
  currentPassword: z.string().min(1, { message: 'Current password is required' }),
  newPassword: z.string().min(8, { message: 'Password must be at least 8 characters' }),
  confirmPassword: z.string().min(8, { message: 'Please confirm your password' }),
}).refine((data) => data.newPassword === data.confirmPassword, {
  message: "Passwords don't match",
  path: ['confirmPassword'],
});

// Notification settings schema
const notificationFormSchema = z.object({
  documentUpdates: z.boolean(),
  documentSignatures: z.boolean(),
  complianceDeadlines: z.boolean(),
  systemAnnouncements: z.boolean(),
  emailNotifications: z.boolean(),
});

// Company settings schema
const companyFormSchema = z.object({
  companyName: z.string().min(2, { message: 'Company name is required' }),
  industry: z.string().optional(),
  address: z.string().optional(),
  phone: z.string().optional(),
  website: z.string().optional(),
});

// AI assistant settings schema
const aiSettingsFormSchema = z.object({
  enableAIAssistant: z.boolean(),
  useCompanyData: z.boolean(),
  suggestImprovements: z.boolean(),
  checkCompliance: z.boolean(),
});

type ProfileFormValues = z.infer<typeof profileFormSchema>;
type PasswordFormValues = z.infer<typeof passwordFormSchema>;
type NotificationFormValues = z.infer<typeof notificationFormSchema>;
type CompanyFormValues = z.infer<typeof companyFormSchema>;
type AISettingsFormValues = z.infer<typeof aiSettingsFormSchema>;

export default function SettingsPage() {
  const [activeTab, setActiveTab] = useState('profile');
  const { user } = useAuth();
  const { toast } = useToast();

  // Profile form
  const profileForm = useForm<ProfileFormValues>({
    resolver: zodResolver(profileFormSchema),
    defaultValues: {
      name: user?.name || '',
      email: user?.email || '',
    },
  });

  // Password form
  const passwordForm = useForm<PasswordFormValues>({
    resolver: zodResolver(passwordFormSchema),
    defaultValues: {
      currentPassword: '',
      newPassword: '',
      confirmPassword: '',
    },
  });

  // Notification form
  const notificationForm = useForm<NotificationFormValues>({
    resolver: zodResolver(notificationFormSchema),
    defaultValues: {
      documentUpdates: true,
      documentSignatures: true,
      complianceDeadlines: true,
      systemAnnouncements: false,
      emailNotifications: true,
    },
  });

  // Company form
  const companyForm = useForm<CompanyFormValues>({
    resolver: zodResolver(companyFormSchema),
    defaultValues: {
      companyName: 'Your Company Name',
      industry: '',
      address: '',
      phone: '',
      website: '',
    },
  });

  // AI settings form
  const aiSettingsForm = useForm<AISettingsFormValues>({
    resolver: zodResolver(aiSettingsFormSchema),
    defaultValues: {
      enableAIAssistant: true,
      useCompanyData: true,
      suggestImprovements: true,
      checkCompliance: true,
    },
  });

  // Update profile mutation
  const updateProfileMutation = useMutation({
    mutationFn: async (data: ProfileFormValues) => {
      if (!user) throw new Error('Not authenticated');
      return await apiRequest('PUT', `/api/users/${user.id}`, data);
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/user'] });
      toast({
        title: 'Profile updated',
        description: 'Your profile has been updated successfully',
      });
    },
    onError: (error) => {
      toast({
        title: 'Update failed',
        description: error.message || 'Failed to update profile',
        variant: 'destructive',
      });
    },
  });

  // Change password mutation
  const changePasswordMutation = useMutation({
    mutationFn: async (data: PasswordFormValues) => {
      if (!user) throw new Error('Not authenticated');
      return await apiRequest('POST', '/api/user/change-password', {
        currentPassword: data.currentPassword,
        newPassword: data.newPassword,
      });
    },
    onSuccess: () => {
      passwordForm.reset({
        currentPassword: '',
        newPassword: '',
        confirmPassword: '',
      });
      toast({
        title: 'Password updated',
        description: 'Your password has been changed successfully',
      });
    },
    onError: (error) => {
      toast({
        title: 'Password change failed',
        description: error.message || 'Failed to change password',
        variant: 'destructive',
      });
    },
  });

  // Update notification settings mutation
  const updateNotificationsMutation = useMutation({
    mutationFn: async (data: NotificationFormValues) => {
      if (!user) throw new Error('Not authenticated');
      return await apiRequest('PUT', '/api/user/notifications', data);
    },
    onSuccess: () => {
      toast({
        title: 'Notification settings updated',
        description: 'Your notification preferences have been saved',
      });
    },
    onError: (error) => {
      toast({
        title: 'Update failed',
        description: error.message || 'Failed to update notification settings',
        variant: 'destructive',
      });
    },
  });

  // Update company settings mutation
  const updateCompanyMutation = useMutation({
    mutationFn: async (data: CompanyFormValues) => {
      return await apiRequest('PUT', '/api/settings/company', data);
    },
    onSuccess: () => {
      toast({
        title: 'Company settings updated',
        description: 'Company information has been updated successfully',
      });
    },
    onError: (error) => {
      toast({
        title: 'Update failed',
        description: error.message || 'Failed to update company settings',
        variant: 'destructive',
      });
    },
  });

  // Update AI settings mutation
  const updateAISettingsMutation = useMutation({
    mutationFn: async (data: AISettingsFormValues) => {
      return await apiRequest('PUT', '/api/settings/ai', data);
    },
    onSuccess: () => {
      toast({
        title: 'AI settings updated',
        description: 'AI assistant settings have been updated successfully',
      });
    },
    onError: (error) => {
      toast({
        title: 'Update failed',
        description: error.message || 'Failed to update AI settings',
        variant: 'destructive',
      });
    },
  });

  const onProfileSubmit = (data: ProfileFormValues) => {
    updateProfileMutation.mutate(data);
  };

  const onPasswordSubmit = (data: PasswordFormValues) => {
    changePasswordMutation.mutate(data);
  };

  const onNotificationsSubmit = (data: NotificationFormValues) => {
    updateNotificationsMutation.mutate(data);
  };

  const onCompanySubmit = (data: CompanyFormValues) => {
    updateCompanyMutation.mutate(data);
  };

  const onAISettingsSubmit = (data: AISettingsFormValues) => {
    updateAISettingsMutation.mutate(data);
  };

  return (
    <DashboardLayout pageTitle="Settings">
      <div className="mb-6">
        <h1 className="text-2xl font-bold text-slate-800">Settings</h1>
        <p className="text-slate-500">Manage your account and application preferences</p>
      </div>

      <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-4">
        <TabsList className="grid grid-cols-2 md:grid-cols-5 gap-2">
          <TabsTrigger value="profile" className="flex items-center">
            <User className="h-4 w-4 mr-2" />
            Profile
          </TabsTrigger>
          <TabsTrigger value="security" className="flex items-center">
            <Lock className="h-4 w-4 mr-2" />
            Security
          </TabsTrigger>
          <TabsTrigger value="notifications" className="flex items-center">
            <Bell className="h-4 w-4 mr-2" />
            Notifications
          </TabsTrigger>
          <TabsTrigger value="company" className="flex items-center">
            <Building className="h-4 w-4 mr-2" />
            Company
          </TabsTrigger>
          <TabsTrigger value="ai" className="flex items-center">
            <Bot className="h-4 w-4 mr-2" />
            AI Assistant
          </TabsTrigger>
        </TabsList>

        {/* Profile Settings */}
        <TabsContent value="profile">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <User className="h-5 w-5 mr-2" />
                Profile Settings
              </CardTitle>
              <CardDescription>
                Update your personal information and account details
              </CardDescription>
            </CardHeader>
            <CardContent>
              <Form {...profileForm}>
                <form onSubmit={profileForm.handleSubmit(onProfileSubmit)} className="space-y-6">
                  <FormField
                    control={profileForm.control}
                    name="name"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Full Name</FormLabel>
                        <FormControl>
                          <Input {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <FormField
                    control={profileForm.control}
                    name="email"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Email Address</FormLabel>
                        <FormControl>
                          <Input type="email" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <div>
                    <FormLabel>Username</FormLabel>
                    <Input value={user?.username || ''} disabled className="bg-slate-50" />
                    <p className="text-sm text-slate-500 mt-1">
                      Username cannot be changed
                    </p>
                  </div>

                  <div>
                    <FormLabel>Role</FormLabel>
                    <div className="mt-1">
                      <Badge className={
                        user?.role === 'admin' ? 'bg-primary-100 text-primary-800' :
                        user?.role === 'compliance_officer' ? 'bg-warning-100 text-warning-800' : 
                        'bg-slate-100 text-slate-800'
                      }>
                        {user?.role === 'admin' ? 'Administrator' : 
                         user?.role === 'compliance_officer' ? 'Compliance Officer' : 'Employee'}
                      </Badge>
                    </div>
                    <p className="text-sm text-slate-500 mt-1">
                      Contact an administrator to change your role
                    </p>
                  </div>

                  <Button 
                    type="submit" 
                    className="mt-4"
                    disabled={updateProfileMutation.isPending}
                  >
                    {updateProfileMutation.isPending ? (
                      <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
                    ) : (
                      <Save className="mr-2 h-4 w-4" />
                    )}
                    Save Changes
                  </Button>
                </form>
              </Form>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Security Settings */}
        <TabsContent value="security">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <Lock className="h-5 w-5 mr-2" />
                Security Settings
              </CardTitle>
              <CardDescription>
                Manage your password and security preferences
              </CardDescription>
            </CardHeader>
            <CardContent>
              <Form {...passwordForm}>
                <form onSubmit={passwordForm.handleSubmit(onPasswordSubmit)} className="space-y-6">
                  <FormField
                    control={passwordForm.control}
                    name="currentPassword"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Current Password</FormLabel>
                        <FormControl>
                          <Input type="password" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <FormField
                    control={passwordForm.control}
                    name="newPassword"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>New Password</FormLabel>
                        <FormControl>
                          <Input type="password" {...field} />
                        </FormControl>
                        <FormDescription>
                          Password must be at least 8 characters long
                        </FormDescription>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <FormField
                    control={passwordForm.control}
                    name="confirmPassword"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Confirm New Password</FormLabel>
                        <FormControl>
                          <Input type="password" {...field} />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />

                  <Button 
                    type="submit" 
                    className="mt-4"
                    disabled={changePasswordMutation.isPending}
                  >
                    {changePasswordMutation.isPending ? (
                      <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
                    ) : (
                      <Save className="mr-2 h-4 w-4" />
                    )}
                    Change Password
                  </Button>
                </form>
              </Form>

              <Separator className="my-8" />

              <div>
                <h3 className="text-lg font-medium mb-4">Login Sessions</h3>
                <div className="space-y-4">
                  <div className="p-4 border rounded-md bg-slate-50">
                    <div className="flex justify-between items-start">
                      <div>
                        <h4 className="font-medium">Current Session</h4>
                        <p className="text-sm text-slate-500 mt-1">
                          Last activity: Just now
                        </p>
                        <p className="text-sm text-slate-500">
                          IP Address: 192.168.1.1
                        </p>
                      </div>
                      <Badge className="bg-success-100 text-success-800">
                        Active
                      </Badge>
                    </div>
                  </div>
                </div>
                <Button variant="outline" className="mt-4">
                  Sign Out From All Devices
                </Button>
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Notification Settings */}
        <TabsContent value="notifications">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <Bell className="h-5 w-5 mr-2" />
                Notification Settings
              </CardTitle>
              <CardDescription>
                Manage your notification preferences
              </CardDescription>
            </CardHeader>
            <CardContent>
              <Form {...notificationForm}>
                <form onSubmit={notificationForm.handleSubmit(onNotificationsSubmit)} className="space-y-6">
                  <div className="space-y-4">
                    <h3 className="text-base font-medium">Notification Types</h3>
                    
                    <FormField
                      control={notificationForm.control}
                      name="documentUpdates"
                      render={({ field }) => (
                        <FormItem className="flex flex-row items-center justify-between rounded-lg border p-3">
                          <div className="space-y-0.5">
                            <FormLabel className="text-base">Document Updates</FormLabel>
                            <FormDescription>
                              Receive notifications when documents are created or updated
                            </FormDescription>
                          </div>
                          <FormControl>
                            <Switch
                              checked={field.value}
                              onCheckedChange={field.onChange}
                            />
                          </FormControl>
                        </FormItem>
                      )}
                    />
                    
                    <FormField
                      control={notificationForm.control}
                      name="documentSignatures"
                      render={({ field }) => (
                        <FormItem className="flex flex-row items-center justify-between rounded-lg border p-3">
                          <div className="space-y-0.5">
                            <FormLabel className="text-base">Signature Requests</FormLabel>
                            <FormDescription>
                              Get notified when a document requires your signature
                            </FormDescription>
                          </div>
                          <FormControl>
                            <Switch
                              checked={field.value}
                              onCheckedChange={field.onChange}
                            />
                          </FormControl>
                        </FormItem>
                      )}
                    />
                    
                    <FormField
                      control={notificationForm.control}
                      name="complianceDeadlines"
                      render={({ field }) => (
                        <FormItem className="flex flex-row items-center justify-between rounded-lg border p-3">
                          <div className="space-y-0.5">
                            <FormLabel className="text-base">Compliance Deadlines</FormLabel>
                            <FormDescription>
                              Receive reminders about upcoming compliance deadlines
                            </FormDescription>
                          </div>
                          <FormControl>
                            <Switch
                              checked={field.value}
                              onCheckedChange={field.onChange}
                            />
                          </FormControl>
                        </FormItem>
                      )}
                    />
                    
                    <FormField
                      control={notificationForm.control}
                      name="systemAnnouncements"
                      render={({ field }) => (
                        <FormItem className="flex flex-row items-center justify-between rounded-lg border p-3">
                          <div className="space-y-0.5">
                            <FormLabel className="text-base">System Announcements</FormLabel>
                            <FormDescription>
                              Receive updates about system changes and new features
                            </FormDescription>
                          </div>
                          <FormControl>
                            <Switch
                              checked={field.value}
                              onCheckedChange={field.onChange}
                            />
                          </FormControl>
                        </FormItem>
                      )}
                    />
                  </div>

                  <Separator />

                  <div className="space-y-4">
                    <h3 className="text-base font-medium">Delivery Methods</h3>
                    
                    <FormField
                      control={notificationForm.control}
                      name="emailNotifications"
                      render={({ field }) => (
                        <FormItem className="flex flex-row items-center justify-between rounded-lg border p-3">
                          <div className="space-y-0.5">
                            <FormLabel className="text-base">Email Notifications</FormLabel>
                            <FormDescription>
                              Receive notifications via email in addition to in-app alerts
                            </FormDescription>
                          </div>
                          <FormControl>
                            <Switch
                              checked={field.value}
                              onCheckedChange={field.onChange}
                            />
                          </FormControl>
                        </FormItem>
                      )}
                    />
                  </div>

                  <Button 
                    type="submit" 
                    className="mt-4"
                    disabled={updateNotificationsMutation.isPending}
                  >
                    {updateNotificationsMutation.isPending ? (
                      <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
                    ) : (
                      <Save className="mr-2 h-4 w-4" />
                    )}
                    Save Notification Settings
                  </Button>
                </form>
              </Form>
            </CardContent>
          </Card>
        </TabsContent>

        {/* Company Settings */}
        <TabsContent value="company">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <Building className="h-5 w-5 mr-2" />
                Company Settings
              </CardTitle>
              <CardDescription>
                Manage your company information used in compliance documents
              </CardDescription>
            </CardHeader>
            <CardContent>
              <Form {...companyForm}>
                <form onSubmit={companyForm.handleSubmit(onCompanySubmit)} className="space-y-6">
                  <FormField
                    control={companyForm.control}
                    name="companyName"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Company Name</FormLabel>
                        <FormControl>
                          <Input {...field} />
                        </FormControl>
                        <FormDescription>
                          This will be used in all documents generated by the system
                        </FormDescription>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <FormField
                    control={companyForm.control}
                    name="industry"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Industry</FormLabel>
                        <FormControl>
                          <Input {...field} placeholder="e.g. Healthcare, Finance, Technology" />
                        </FormControl>
                        <FormDescription>
                          Used for AI-assisted compliance recommendations
                        </FormDescription>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <FormField
                    control={companyForm.control}
                    name="address"
                    render={({ field }) => (
                      <FormItem>
                        <FormLabel>Company Address</FormLabel>
                        <FormControl>
                          <Textarea
                            {...field}
                            placeholder="Enter your company's full address"
                            className="resize-none"
                          />
                        </FormControl>
                        <FormMessage />
                      </FormItem>
                    )}
                  />
                  
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <FormField
                      control={companyForm.control}
                      name="phone"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Phone Number</FormLabel>
                          <FormControl>
                            <Input {...field} placeholder="e.g. +1 (555) 123-4567" />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                    
                    <FormField
                      control={companyForm.control}
                      name="website"
                      render={({ field }) => (
                        <FormItem>
                          <FormLabel>Website</FormLabel>
                          <FormControl>
                            <Input {...field} placeholder="e.g. https://example.com" />
                          </FormControl>
                          <FormMessage />
                        </FormItem>
                      )}
                    />
                  </div>

                  {(user?.role === 'admin' || user?.role === 'compliance_officer') ? (
                    <Button 
                      type="submit" 
                      className="mt-4"
                      disabled={updateCompanyMutation.isPending}
                    >
                      {updateCompanyMutation.isPending ? (
                        <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
                      ) : (
                        <Save className="mr-2 h-4 w-4" />
                      )}
                      Save Company Settings
                    </Button>
                  ) : (
                    <div className="mt-4 p-3 bg-slate-50 rounded-md flex items-start">
                      <Info className="h-5 w-5 text-slate-400 mr-2 mt-0.5 flex-shrink-0" />
                      <p className="text-sm text-slate-600">
                        You need administrator or compliance officer privileges to change company settings.
                        Contact your administrator if you need to update this information.
                      </p>
                    </div>
                  )}
                </form>
              </Form>
            </CardContent>
          </Card>
        </TabsContent>

        {/* AI Assistant Settings */}
        <TabsContent value="ai">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <Bot className="h-5 w-5 mr-2" />
                AI Assistant Settings
              </CardTitle>
              <CardDescription>
                Configure how the AI compliance assistant works for you
              </CardDescription>
            </CardHeader>
            <CardContent>
              <Form {...aiSettingsForm}>
                <form onSubmit={aiSettingsForm.handleSubmit(onAISettingsSubmit)} className="space-y-6">
                  <FormField
                    control={aiSettingsForm.control}
                    name="enableAIAssistant"
                    render={({ field }) => (
                      <FormItem className="flex flex-row items-center justify-between rounded-lg border p-3">
                        <div className="space-y-0.5">
                          <FormLabel className="text-base">Enable AI Assistant</FormLabel>
                          <FormDescription>
                            Use AI to help with compliance document creation and management
                          </FormDescription>
                        </div>
                        <FormControl>
                          <Switch
                            checked={field.value}
                            onCheckedChange={field.onChange}
                          />
                        </FormControl>
                      </FormItem>
                    )}
                  />
                  
                  <div className="pl-4 border-l-2 border-slate-200 space-y-4">
                    <FormField
                      control={aiSettingsForm.control}
                      name="useCompanyData"
                      render={({ field }) => (
                        <FormItem className="flex flex-row items-center justify-between rounded-lg border p-3">
                          <div className="space-y-0.5">
                            <FormLabel className="text-base">Use Company Data</FormLabel>
                            <FormDescription>
                              Allow AI to use your company information to personalize documents
                            </FormDescription>
                          </div>
                          <FormControl>
                            <Switch
                              checked={field.value}
                              onCheckedChange={field.onChange}
                              disabled={!aiSettingsForm.watch("enableAIAssistant")}
                            />
                          </FormControl>
                        </FormItem>
                      )}
                    />
                    
                    <FormField
                      control={aiSettingsForm.control}
                      name="suggestImprovements"
                      render={({ field }) => (
                        <FormItem className="flex flex-row items-center justify-between rounded-lg border p-3">
                          <div className="space-y-0.5">
                            <FormLabel className="text-base">Suggest Improvements</FormLabel>
                            <FormDescription>
                              Have AI suggest improvements for your compliance documents
                            </FormDescription>
                          </div>
                          <FormControl>
                            <Switch
                              checked={field.value}
                              onCheckedChange={field.onChange}
                              disabled={!aiSettingsForm.watch("enableAIAssistant")}
                            />
                          </FormControl>
                        </FormItem>
                      )}
                    />
                    
                    <FormField
                      control={aiSettingsForm.control}
                      name="checkCompliance"
                      render={({ field }) => (
                        <FormItem className="flex flex-row items-center justify-between rounded-lg border p-3">
                          <div className="space-y-0.5">
                            <FormLabel className="text-base">Check Compliance</FormLabel>
                            <FormDescription>
                              Automatically check documents for compliance issues
                            </FormDescription>
                          </div>
                          <FormControl>
                            <Switch
                              checked={field.value}
                              onCheckedChange={field.onChange}
                              disabled={!aiSettingsForm.watch("enableAIAssistant")}
                            />
                          </FormControl>
                        </FormItem>
                      )}
                    />
                  </div>

                  <div className="p-4 border rounded-md bg-slate-50 flex items-start">
                    <Info className="h-5 w-5 text-slate-400 mr-2 mt-0.5 flex-shrink-0" />
                    <div className="text-sm text-slate-600">
                      <p className="mb-2">AI processing is performed securely and in compliance with data protection regulations.</p>
                      <p>All information is encrypted during processing and not retained beyond the necessary period.</p>
                    </div>
                  </div>

                  <Button 
                    type="submit" 
                    className="mt-4"
                    disabled={updateAISettingsMutation.isPending}
                  >
                    {updateAISettingsMutation.isPending ? (
                      <RefreshCw className="mr-2 h-4 w-4 animate-spin" />
                    ) : (
                      <Save className="mr-2 h-4 w-4" />
                    )}
                    Save AI Settings
                  </Button>
                </form>
              </Form>

              <Separator className="my-8" />

              <div>
                <h3 className="text-lg font-medium mb-4">AI System Status</h3>
                <div className="space-y-4">
                  <div className="p-4 border rounded-md bg-slate-50">
                    <div className="flex justify-between items-start">
                      <div>
                        <div className="flex items-center">
                          <CheckCircle className="h-4 w-4 text-success-500 mr-1" />
                          <h4 className="font-medium">AI Assistant</h4>
                        </div>
                        <p className="text-sm text-slate-500 mt-1">
                          AI system is operational
                        </p>
                      </div>
                      <Badge className="bg-success-100 text-success-800">
                        Online
                      </Badge>
                    </div>
                  </div>
                  
                  <div className="p-4 border rounded-md bg-slate-50">
                    <div className="flex justify-between items-start">
                      <div>
                        <div className="flex items-center">
                          <CheckCircle className="h-4 w-4 text-success-500 mr-1" />
                          <h4 className="font-medium">Compliance Models</h4>
                        </div>
                        <p className="text-sm text-slate-500 mt-1">
                          Last updated: 2 days ago
                        </p>
                      </div>
                      <Badge className="bg-success-100 text-success-800">
                        Up to Date
                      </Badge>
                    </div>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </DashboardLayout>
  );
}

================
File: client/src/pages/signatures-page.tsx
================
import { useState } from 'react';
import { useQuery } from '@tanstack/react-query';
import DashboardLayout from '@/components/layouts/DashboardLayout';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Button } from '@/components/ui/button';
import { Document, Signature, DocumentVersion } from '@/types';
import { PenTool, Calendar, Clock, Eye, FileText, ExternalLink } from 'lucide-react';
import { format } from 'date-fns';
import { useLocation } from 'wouter';
import { Skeleton } from '@/components/ui/skeleton';

export default function SignaturesPage() {
  const [activeTab, setActiveTab] = useState('signed');
  const [, navigate] = useLocation();
  
  // Fetch documents that need signatures (pending)
  const { 
    data: pendingDocuments,
    isLoading: isLoadingPending
  } = useQuery<Document[]>({
    queryKey: ['/api/documents', { status: 'pending_approval' }],
  });

  // Fetch documents that have been signed by the current user
  const {
    data: signedDocuments,
    isLoading: isLoadingSigned
  } = useQuery<Document[]>({
    queryKey: ['/api/documents', { status: 'active' }],
  });

  // For each signed document, we would fetch signatures but to simplify, we'll assume we have signatures
  
  const handleViewDocument = (documentId: number) => {
    navigate(`/documents/${documentId}`);
  };

  const handleSignDocument = (documentId: number) => {
    navigate(`/documents/${documentId}?action=sign`);
  };

  return (
    <DashboardLayout pageTitle="Signatures">
      <div className="mb-6">
        <h1 className="text-2xl font-bold text-slate-800">Signatures</h1>
        <p className="text-slate-500">Manage document signatures and verification</p>
      </div>

      <Tabs value={activeTab} onValueChange={setActiveTab} className="space-y-4">
        <TabsList>
          <TabsTrigger value="signed">
            <PenTool className="h-4 w-4 mr-2" />
            Documents You've Signed
          </TabsTrigger>
          <TabsTrigger value="pending">
            <Clock className="h-4 w-4 mr-2" />
            Pending Signatures
          </TabsTrigger>
        </TabsList>
        
        <TabsContent value="signed">
          <Card>
            <CardHeader>
              <CardTitle className="text-base font-medium">Signed Documents</CardTitle>
            </CardHeader>
            <CardContent>
              {isLoadingSigned ? (
                <div className="space-y-2">
                  {[...Array(3)].map((_, i) => (
                    <div key={i} className="flex items-center">
                      <Skeleton className="h-8 w-8 rounded-full mr-3" />
                      <Skeleton className="h-5 w-64" />
                      <Skeleton className="h-5 w-32 ml-auto" />
                    </div>
                  ))}
                </div>
              ) : signedDocuments && signedDocuments.length > 0 ? (
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Document</TableHead>
                      <TableHead>Signed Date</TableHead>
                      <TableHead>Status</TableHead>
                      <TableHead className="text-right">Actions</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {signedDocuments.map((document) => (
                      <TableRow key={document.id}>
                        <TableCell>
                          <div className="flex items-center">
                            <FileText className="h-4 w-4 text-slate-400 mr-2" />
                            <span className="font-medium">{document.title}</span>
                          </div>
                        </TableCell>
                        <TableCell>
                          {format(new Date(document.updatedAt), 'MMM d, yyyy')}
                        </TableCell>
                        <TableCell>
                          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-success-100 text-success-800">
                            Signed
                          </span>
                        </TableCell>
                        <TableCell className="text-right">
                          <Button 
                            variant="ghost" 
                            size="sm"
                            onClick={() => handleViewDocument(document.id)}
                          >
                            <Eye className="h-4 w-4 mr-1" />
                            View
                          </Button>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              ) : (
                <div className="text-center p-6">
                  <PenTool className="mx-auto h-12 w-12 text-slate-400 mb-4" />
                  <h3 className="text-lg font-medium mb-2">No signed documents</h3>
                  <p className="text-slate-500">You haven't signed any documents yet.</p>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>
        
        <TabsContent value="pending">
          <Card>
            <CardHeader>
              <CardTitle className="text-base font-medium">Documents Awaiting Your Signature</CardTitle>
            </CardHeader>
            <CardContent>
              {isLoadingPending ? (
                <div className="space-y-2">
                  {[...Array(3)].map((_, i) => (
                    <div key={i} className="flex items-center">
                      <Skeleton className="h-8 w-8 rounded-full mr-3" />
                      <Skeleton className="h-5 w-64" />
                      <Skeleton className="h-5 w-32 ml-auto" />
                    </div>
                  ))}
                </div>
              ) : pendingDocuments && pendingDocuments.length > 0 ? (
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>Document</TableHead>
                      <TableHead>Requested Date</TableHead>
                      <TableHead>Deadline</TableHead>
                      <TableHead className="text-right">Actions</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {pendingDocuments.map((document) => (
                      <TableRow key={document.id}>
                        <TableCell>
                          <div className="flex items-center">
                            <FileText className="h-4 w-4 text-slate-400 mr-2" />
                            <span className="font-medium">{document.title}</span>
                          </div>
                        </TableCell>
                        <TableCell>
                          {format(new Date(document.createdAt), 'MMM d, yyyy')}
                        </TableCell>
                        <TableCell>
                          {document.expiresAt ? (
                            format(new Date(document.expiresAt), 'MMM d, yyyy')
                          ) : (
                            <span className="text-slate-500">No deadline</span>
                          )}
                        </TableCell>
                        <TableCell className="text-right">
                          <div className="flex justify-end space-x-2">
                            <Button 
                              variant="outline" 
                              size="sm"
                              onClick={() => handleViewDocument(document.id)}
                            >
                              <Eye className="h-4 w-4 mr-1" />
                              View
                            </Button>
                            <Button 
                              size="sm"
                              onClick={() => handleSignDocument(document.id)}
                            >
                              <PenTool className="h-4 w-4 mr-1" />
                              Sign
                            </Button>
                          </div>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              ) : (
                <div className="text-center p-6">
                  <Clock className="mx-auto h-12 w-12 text-slate-400 mb-4" />
                  <h3 className="text-lg font-medium mb-2">No pending signatures</h3>
                  <p className="text-slate-500">You don't have any documents awaiting your signature.</p>
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>

      <div className="mt-8">
        <Card>
          <CardHeader>
            <CardTitle className="text-base font-medium">Signature Verification</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="text-center p-6">
              <ExternalLink className="mx-auto h-12 w-12 text-slate-400 mb-4" />
              <h3 className="text-lg font-medium mb-2">Verify Document Signatures</h3>
              <p className="text-slate-500 mb-4">
                Verify the authenticity of signatures on compliance documents
              </p>
              <Button>Verify a Signature</Button>
            </div>
          </CardContent>
        </Card>
      </div>
    </DashboardLayout>
  );
}

================
File: client/src/pages/templates-page.tsx
================
import { useState } from 'react';
import { useQuery, useMutation } from '@tanstack/react-query';
import DashboardLayout from '@/components/layouts/DashboardLayout';
import { Button } from '@/components/ui/button';
import { Plus } from 'lucide-react';
import TemplateList from '@/components/templates/TemplateList';
import { Template } from '@/types';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { useToast } from '@/hooks/use-toast';
import { apiRequest, queryClient } from '@/lib/queryClient';

const templateFormSchema = z.object({
  name: z.string().min(3, 'Template name must be at least 3 characters'),
  content: z.string().min(10, 'Content must be at least 10 characters'),
  category: z.string().optional()
});

type TemplateFormValues = z.infer<typeof templateFormSchema>;

export default function TemplatesPage() {
  const [searchQuery, setSearchQuery] = useState('');
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
  const { toast } = useToast();

  const form = useForm<TemplateFormValues>({
    resolver: zodResolver(templateFormSchema),
    defaultValues: {
      name: '',
      content: '',
      category: ''
    }
  });

  // Fetch templates
  const {
    data: templates,
    isLoading,
    error
  } = useQuery<Template[]>({
    queryKey: ['/api/templates'],
  });

  // Create template mutation
  const createTemplateMutation = useMutation({
    mutationFn: async (data: TemplateFormValues) => {
      return await apiRequest('POST', '/api/templates', data);
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/templates'] });
      setIsCreateModalOpen(false);
      form.reset();
      toast({
        title: 'Template created',
        description: 'The template has been created successfully',
      });
    },
    onError: (error) => {
      toast({
        title: 'Error creating template',
        description: error.message || 'Failed to create template',
        variant: 'destructive',
      });
    }
  });

  // Filter templates by search query
  const filteredTemplates = templates?.filter(template => 
    template.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
    (template.category && template.category.toLowerCase().includes(searchQuery.toLowerCase()))
  );

  const handleSearch = (query: string) => {
    setSearchQuery(query);
  };

  const handleCreateTemplate = () => {
    setIsCreateModalOpen(true);
  };

  const onSubmit = (data: TemplateFormValues) => {
    createTemplateMutation.mutate(data);
  };

  return (
    <DashboardLayout 
      pageTitle="Templates" 
      onSearch={handleSearch}
    >
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold text-slate-800">Document Templates</h1>
        <Button onClick={handleCreateTemplate}>
          <Plus className="mr-1 h-4 w-4" /> 
          Create Template
        </Button>
      </div>

      <TemplateList 
        templates={filteredTemplates || []} 
        isLoading={isLoading} 
        error={error?.message}
      />

      {/* Create Template Modal */}
      <Dialog open={isCreateModalOpen} onOpenChange={setIsCreateModalOpen}>
        <DialogContent className="sm:max-w-lg">
          <DialogHeader>
            <DialogTitle>Create New Template</DialogTitle>
          </DialogHeader>
          
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
              <FormField
                control={form.control}
                name="name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Template Name</FormLabel>
                    <FormControl>
                      <Input 
                        {...field}
                        placeholder="Enter template name"
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={form.control}
                name="category"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Category (Optional)</FormLabel>
                    <FormControl>
                      <Input 
                        {...field}
                        placeholder="E.g. Security, Privacy, Financial"
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={form.control}
                name="content"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Template Content</FormLabel>
                    <FormControl>
                      <Textarea 
                        {...field}
                        placeholder="Enter template content in Markdown format..."
                        className="min-h-[200px] font-mono"
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <DialogFooter>
                <Button 
                  type="button" 
                  variant="outline" 
                  onClick={() => setIsCreateModalOpen(false)}
                  disabled={createTemplateMutation.isPending}
                >
                  Cancel
                </Button>
                <Button 
                  type="submit"
                  disabled={createTemplateMutation.isPending}
                >
                  {createTemplateMutation.isPending ? 'Creating...' : 'Create Template'}
                </Button>
              </DialogFooter>
            </form>
          </Form>
        </DialogContent>
      </Dialog>
    </DashboardLayout>
  );
}

================
File: client/src/pages/users-page.tsx
================
import { useState } from 'react';
import { useQuery, useMutation } from '@tanstack/react-query';
import DashboardLayout from '@/components/layouts/DashboardLayout';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Button } from '@/components/ui/button';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { 
  Select, 
  SelectContent, 
  SelectItem, 
  SelectTrigger, 
  SelectValue 
} from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { User } from '@/types';
import { 
  Users, 
  Search, 
  UserPlus, 
  User as UserIcon, 
  Mail, 
  Clock, 
  Shield,
  Edit,
  Trash2
} from 'lucide-react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { useToast } from '@/hooks/use-toast';
import { apiRequest, queryClient } from '@/lib/queryClient';
import { format } from 'date-fns';
import UserList from '@/components/users/UserList';
import { useAuth } from '@/hooks/use-auth';

const userFormSchema = z.object({
  name: z.string().min(2, 'Name must be at least 2 characters'),
  email: z.string().email('Invalid email address'),
  username: z.string().min(3, 'Username must be at least 3 characters'),
  password: z.string().min(8, 'Password must be at least 8 characters'),
  role: z.enum(['admin', 'compliance_officer', 'employee'])
});

type UserFormValues = z.infer<typeof userFormSchema>;

export default function UsersPage() {
  const [searchQuery, setSearchQuery] = useState('');
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);
  const { toast } = useToast();
  const { user: currentUser } = useAuth();

  // Only admins should be able to access this page
  if (currentUser?.role !== 'admin' && currentUser?.role !== 'compliance_officer') {
    return (
      <DashboardLayout pageTitle="Users">
        <div className="text-center p-12">
          <Shield className="mx-auto h-12 w-12 text-red-500 mb-4" />
          <h3 className="text-xl font-bold mb-2">Access Denied</h3>
          <p className="text-slate-600">You don't have permission to access this page.</p>
        </div>
      </DashboardLayout>
    );
  }

  const form = useForm<UserFormValues>({
    resolver: zodResolver(userFormSchema),
    defaultValues: {
      name: '',
      email: '',
      username: '',
      password: '',
      role: 'employee'
    }
  });

  // Fetch users
  const {
    data: users,
    isLoading,
    error
  } = useQuery<User[]>({
    queryKey: ['/api/users'],
  });

  // Create user mutation
  const createUserMutation = useMutation({
    mutationFn: async (data: UserFormValues) => {
      return await apiRequest('POST', '/api/register', data);
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/users'] });
      setIsCreateModalOpen(false);
      form.reset();
      toast({
        title: 'User created',
        description: 'New user has been created successfully',
      });
    },
    onError: (error) => {
      toast({
        title: 'Error creating user',
        description: error.message || 'Failed to create user',
        variant: 'destructive',
      });
    }
  });

  // Filter users by search query
  const filteredUsers = users?.filter(user => 
    user.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
    user.email.toLowerCase().includes(searchQuery.toLowerCase()) ||
    user.username.toLowerCase().includes(searchQuery.toLowerCase()) ||
    user.role.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const handleSearch = (query: string) => {
    setSearchQuery(query);
  };

  const onSubmit = (data: UserFormValues) => {
    createUserMutation.mutate(data);
  };

  return (
    <DashboardLayout 
      pageTitle="Users" 
      onSearch={handleSearch}
    >
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-2xl font-bold text-slate-800">Users & Permissions</h1>
        <Button onClick={() => setIsCreateModalOpen(true)}>
          <UserPlus className="mr-1 h-4 w-4" /> 
          Add User
        </Button>
      </div>

      <UserList 
        users={filteredUsers || []} 
        isLoading={isLoading} 
        error={error?.message}
      />

      {/* Create User Modal */}
      <Dialog open={isCreateModalOpen} onOpenChange={setIsCreateModalOpen}>
        <DialogContent className="sm:max-w-lg">
          <DialogHeader>
            <DialogTitle>Add New User</DialogTitle>
          </DialogHeader>
          
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
              <FormField
                control={form.control}
                name="name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Full Name</FormLabel>
                    <FormControl>
                      <Input 
                        {...field}
                        placeholder="Enter full name"
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={form.control}
                name="email"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Email</FormLabel>
                    <FormControl>
                      <Input 
                        {...field}
                        type="email"
                        placeholder="Enter email address"
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={form.control}
                name="username"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Username</FormLabel>
                    <FormControl>
                      <Input 
                        {...field}
                        placeholder="Enter username"
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={form.control}
                name="password"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Password</FormLabel>
                    <FormControl>
                      <Input 
                        {...field}
                        type="password"
                        placeholder="Enter password"
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={form.control}
                name="role"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Role</FormLabel>
                    <Select 
                      onValueChange={field.onChange} 
                      defaultValue={field.value}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select user role" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="employee">Employee</SelectItem>
                        <SelectItem value="compliance_officer">Compliance Officer</SelectItem>
                        <SelectItem value="admin">Administrator</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <DialogFooter>
                <Button 
                  type="button" 
                  variant="outline" 
                  onClick={() => setIsCreateModalOpen(false)}
                  disabled={createUserMutation.isPending}
                >
                  Cancel
                </Button>
                <Button 
                  type="submit"
                  disabled={createUserMutation.isPending}
                >
                  {createUserMutation.isPending ? 'Creating...' : 'Create User'}
                </Button>
              </DialogFooter>
            </form>
          </Form>
        </DialogContent>
      </Dialog>
    </DashboardLayout>
  );
}

================
File: client/src/types/index.ts
================
// User related types
export interface User {
  id: number;
  username: string;
  name: string;
  email: string;
  role: "admin" | "compliance_officer" | "employee";
  createdAt: string;
}

// Document related types
export type DocumentStatus = "draft" | "pending_approval" | "active" | "expired" | "archived";

export interface Document {
  id: number;
  title: string;
  content: string;
  status: DocumentStatus;
  templateId?: number;
  version: number;
  createdById: number;
  createdAt: string;
  updatedAt: string;
  expiresAt?: string;
}

export interface DocumentVersion {
  id: number;
  documentId: number;
  version: number;
  content: string;
  createdById: number;
  createdAt: string;
}

// Signature related types
export interface Signature {
  id: number;
  documentId: number;
  userId: number;
  signature: string;
  createdAt: string;
  ipAddress?: string;
  metadata?: Record<string, any>;
}

// Audit trail related types
export interface AuditTrail {
  id: number;
  documentId?: number;
  userId: number;
  action: string;
  details?: string;
  timestamp: string;
  ipAddress?: string;
}

// Compliance deadlines related types
export type DeadlineStatus = "not_started" | "in_progress" | "completed" | "overdue";

export interface ComplianceDeadline {
  id: number;
  title: string;
  description?: string;
  deadline: string;
  documentId?: number;
  assigneeId?: number;
  status: DeadlineStatus;
  type: string;
  createdAt: string;
}

// Template related types
export interface Template {
  id: number;
  name: string;
  content: string;
  category?: string;
  createdById: number;
  createdAt: string;
  updatedAt: string;
  isDefault?: boolean;
}

// Dashboard related types
export interface DashboardStats {
  documents: number;
  pending: number;
  complianceRate: number;
  expiringCount: number;
  docsCreatedLastMonth: number;
  urgentCount: number;
  lastMonthComplianceChange: string;
}

export interface PendingDocumentItem {
  id: number;
  title: string;
  deadline?: string;
  status: DocumentStatus;
  actionType: "sign" | "review" | "approve";
}

export interface RecentDocumentItem {
  id: number;
  title: string;
  updatedAt: string;
  status: DocumentStatus;
}

export interface ComplianceCalendarItem {
  id: number;
  title: string;
  deadline: string;
  type: string;
  assignee: {
    id: number;
    name: string;
    initials: string;
  };
  status: DeadlineStatus;
}

// AI Assistant related types
export interface AIMessage {
  id: string;
  role: "assistant" | "user";
  content: string;
  timestamp: string;
}

export interface AIComplianceIssue {
  issues: string[];
  score: number;
}

export interface AITemplateGeneration {
  templateId: number;
  companyInfo: {
    name: string;
    industry?: string;
    address?: string;
    phone?: string;
    email?: string;
    website?: string;
    [key: string]: any;
  };
}

// User Document related types
export interface UserDocument {
  id: number;
  userId: number;
  title: string;
  description?: string;
  fileName: string;
  fileType: string;
  fileSize: number;
  fileUrl: string;
  tags?: string[];
  category?: string;
  starred?: boolean;
  status?: "draft" | "review" | "approved" | "archived";
  createdAt: string;
  updatedAt: string;
}

================
File: drizzle.config.ts
================
import { defineConfig } from "drizzle-kit";

if (!process.env.DATABASE_URL) {
  throw new Error("DATABASE_URL, ensure the database is provisioned");
}

export default defineConfig({
  out: "./migrations",
  schema: "./shared/schema.ts",
  dialect: "postgresql",
  dbCredentials: {
    url: process.env.DATABASE_URL,
  },
});

================
File: package.json
================
{
  "name": "rest-express",
  "version": "1.0.0",
  "type": "module",
  "license": "MIT",
  "scripts": {
    "dev": "tsx server/index.ts",
    "build": "npm install && vite build && tsc -p tsconfig.server.json && mkdir -p dist/server/public && cp -r client/public dist/server/ 2>/dev/null || true",
    "drizzle:generate": "drizzle-kit generate:pg --schema=shared/schema.ts",
    "drizzle:push": "drizzle-kit push:pg --schema=shared/schema.ts",
    "migrate": "tsx server/run-migrations.ts",
    "start": "NODE_ENV=production node dist/server/index.js",
    "check": "tsc",
    "db:push": "drizzle-kit push"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.9.1",
    "@jridgewell/trace-mapping": "^0.3.25",
    "@neondatabase/serverless": "^0.10.4",
    "@radix-ui/react-accordion": "^1.2.1",
    "@radix-ui/react-alert-dialog": "^1.1.2",
    "@radix-ui/react-aspect-ratio": "^1.1.0",
    "@radix-ui/react-avatar": "^1.1.1",
    "@radix-ui/react-checkbox": "^1.1.2",
    "@radix-ui/react-collapsible": "^1.1.1",
    "@radix-ui/react-context-menu": "^2.2.2",
    "@radix-ui/react-dialog": "^1.1.2",
    "@radix-ui/react-dropdown-menu": "^2.1.2",
    "@radix-ui/react-hover-card": "^1.1.2",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-menubar": "^1.1.2",
    "@radix-ui/react-navigation-menu": "^1.2.1",
    "@radix-ui/react-popover": "^1.1.2",
    "@radix-ui/react-progress": "^1.1.0",
    "@radix-ui/react-radio-group": "^1.2.1",
    "@radix-ui/react-scroll-area": "^1.2.0",
    "@radix-ui/react-select": "^2.1.2",
    "@radix-ui/react-separator": "^1.1.0",
    "@radix-ui/react-slider": "^1.2.1",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-switch": "^1.1.1",
    "@radix-ui/react-tabs": "^1.1.1",
    "@radix-ui/react-toast": "^1.2.2",
    "@radix-ui/react-toggle": "^1.1.0",
    "@radix-ui/react-toggle-group": "^1.1.0",
    "@radix-ui/react-tooltip": "^1.1.3",
    "@replit/object-storage": "^1.0.0",
    "@replit/vite-plugin-shadcn-theme-json": "^0.0.4",
    "@tanstack/react-query": "^5.60.5",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "cmdk": "^1.0.0",
    "connect-pg-simple": "^10.0.0",
    "cors": "^2.8.5",
    "date-fns": "^3.6.0",
    "dotenv": "^16.5.0",
    "drizzle-orm": "^0.39.1",
    "drizzle-zod": "^0.7.0",
    "embla-carousel-react": "^8.3.0",
    "express": "^4.21.2",
    "express-fileupload": "^1.5.1",
    "express-session": "^1.18.1",
    "framer-motion": "^11.13.1",
    "input-otp": "^1.2.4",
    "lucide-react": "^0.453.0",
    "memorystore": "^1.6.7",
    "mime-types": "^3.0.1",
    "multer": "^1.4.5-lts.2",
    "openai": "^4.91.1",
    "passport": "^0.7.0",
    "passport-local": "^1.0.0",
    "react": "^18.3.1",
    "react-day-picker": "^8.10.1",
    "react-dom": "^18.3.1",
    "react-hook-form": "^7.53.1",
    "react-icons": "^5.4.0",
    "react-markdown": "^10.1.0",
    "react-resizable-panels": "^2.1.4",
    "react-signature-canvas": "^1.1.0-alpha.2",
    "recharts": "^2.13.0",
    "tailwind-merge": "^2.5.4",
    "tailwindcss-animate": "^1.0.7",
    "uuid": "^11.1.0",
    "vaul": "^1.1.0",
    "wouter": "^3.7.1",
    "ws": "^8.18.0",
    "zod": "^3.23.8",
    "zod-validation-error": "^3.4.0"
  },
  "devDependencies": {
    "@replit/vite-plugin-cartographer": "^0.0.11",
    "@replit/vite-plugin-runtime-error-modal": "^0.0.3",
    "@tailwindcss/typography": "^0.5.15",
    "@types/connect-pg-simple": "^7.0.3",
    "@types/cors": "^2.8.17",
    "@types/express": "4.17.21",
    "@types/express-fileupload": "^1.5.1",
    "@types/express-session": "^1.18.0",
    "@types/mime-types": "^2.1.4",
    "@types/multer": "^1.4.12",
    "@types/node": "20.16.11",
    "@types/passport": "^1.0.16",
    "@types/passport-local": "^1.0.38",
    "@types/react": "^18.3.11",
    "@types/react-dom": "^18.3.1",
    "@types/uuid": "^10.0.0",
    "@types/ws": "^8.5.13",
    "@vitejs/plugin-react": "^4.3.2",
    "autoprefixer": "^10.4.20",
    "drizzle-kit": "^0.30.4",
    "esbuild": "^0.25.0",
    "postcss": "^8.4.47",
    "tailwindcss": "^3.4.14",
    "tsx": "^4.19.1",
    "typescript": "5.6.3",
    "vite": "^5.4.14"
  },
  "optionalDependencies": {
    "bufferutil": "^4.0.8"
  }
}

================
File: postcss.config.js
================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: replit.md
================
# ComplianceAI - AI-Powered Document Compliance Application

## Overview

ComplianceAI is a comprehensive web application designed to help businesses manage regulatory compliance through AI-powered document creation, storage, digital signatures, and audit trails. The system enables compliance officers and employees to streamline their regulatory requirements with automated workflows and intelligent document management.

## User Preferences

Preferred communication style: Simple, everyday language.

## System Architecture

### Full-Stack TypeScript Application
- **Frontend**: React with TypeScript, Vite build system
- **Backend**: Node.js with Express
- **Database**: PostgreSQL (configured for Neon serverless)
- **ORM**: Drizzle ORM for type-safe database operations
- **UI Framework**: Tailwind CSS with shadcn/ui components
- **Authentication**: Passport.js with local strategy and session management

### Deployment Strategy
- Designed for Replit environment
- Uses Replit Object Storage for file management
- Environment variables for configuration
- Supports both development and production builds

## Key Components

### Authentication System
- **Strategy**: Local authentication with username/password
- **Session Management**: Express sessions with PostgreSQL store
- **Password Security**: Scrypt-based hashing with salt
- **Role-Based Access**: Three roles (admin, compliance_officer, employee)
- **Authorization**: Route-level and component-level access control

### Database Schema
- **Users**: Role-based user management
- **Documents**: Versioned compliance documents with status tracking
- **Templates**: AI-assisted document templates
- **Signatures**: Digital signature system with verification
- **Audit Trail**: Comprehensive activity logging
- **Compliance Deadlines**: Automated deadline tracking
- **User Documents**: Personal document storage separate from compliance docs

### AI Integration
- **Service**: OpenAI GPT-4 integration for document generation
- **Features**: Template-based document creation, content improvement, compliance checking
- **Fallback**: Graceful degradation when AI service unavailable
- **Assistant**: Interactive chat interface for compliance queries

### File Management
- **Storage**: Replit Object Storage for production, local mock for development
- **Upload**: Multi-file upload with validation and metadata
- **Security**: File type validation and size limits
- **Organization**: Folder-based file organization

## Data Flow

### Document Lifecycle
1. Template selection or creation
2. AI-assisted content generation
3. Version control and editing
4. Approval workflow
5. Digital signature collection
6. Audit trail maintenance
7. Compliance deadline tracking

### User Workflow
1. Authentication and role assignment
2. Dashboard with compliance overview
3. Document creation/editing
4. Signature and approval processes
5. Audit trail review
6. Compliance deadline management

### AI Assistant Flow
1. User query processing
2. Context-aware response generation
3. Document template suggestions
4. Compliance recommendations

## External Dependencies

### Core Dependencies
- **Database**: Neon PostgreSQL serverless
- **AI Service**: OpenAI API (GPT-4)
- **File Storage**: Replit Object Storage
- **Session Store**: PostgreSQL-based sessions

### UI/UX Libraries
- **Components**: Radix UI primitives with shadcn/ui
- **Styling**: Tailwind CSS with custom theme
- **Icons**: Lucide React
- **Forms**: React Hook Form with Zod validation
- **Data Fetching**: TanStack Query

### Development Tools
- **Build**: Vite with TypeScript
- **Database**: Drizzle Kit for migrations
- **Type Safety**: Strict TypeScript configuration
- **Path Mapping**: Absolute imports with @ aliases

## Deployment Strategy

### Build Process
1. Frontend build with Vite
2. Backend TypeScript compilation
3. Database migration execution
4. Static file serving configuration

### Environment Configuration
- **Development**: Local development with mock services
- **Production**: Replit deployment with full integrations
- **Database**: Automatic connection pooling and SSL
- **Sessions**: Persistent session storage

### Performance Considerations
- **Connection Pooling**: Optimized database connections
- **File Storage**: Efficient binary storage handling
- **Caching**: React Query for client-side caching
- **Bundle Optimization**: Vite's tree-shaking and code splitting

### Security Features
- **Authentication**: Secure password hashing and session management
- **Authorization**: Role-based access control
- **File Validation**: Strict file type and size validation
- **SQL Injection**: Parameterized queries with Drizzle ORM
- **XSS Protection**: React's built-in protections and input sanitization

================
File: server/ai-service.ts
================
import { Template } from "../shared/schema.js";
import OpenAI from "openai";
import dotenv from "dotenv";

// Load environment variables
dotenv.config();

// Initialize OpenAI client
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export interface AIService {
  generateDocumentFromTemplate(templateContent: string, companyInfo: any): Promise<string>;
  improveDocumentContent(content: string): Promise<string>;
  checkComplianceIssues(content: string): Promise<{ issues: string[], score: number }>;
  suggestComplianceActions(currentCompliance: any): Promise<string[]>;
}

class AIServiceImpl implements AIService {
  async generateDocumentFromTemplate(templateContent: string, companyInfo: any): Promise<string> {
    try {
      const response = await openai.chat.completions.create({
        model: "gpt-4o-mini",
        messages: [
          {
            role: "system",
            content: "You are a legal assistant that specializes in creating compliance documents. Fill in the template with the company information provided. Maintain a professional tone and ensure all relevant placeholders are replaced with specific company details."
          },
          {
            role: "user",
            content: `Please fill in this compliance document template with the company information provided: \n\nTEMPLATE:\n${templateContent}\n\nCOMPANY INFO:\n${JSON.stringify(companyInfo)}`
          }
        ],
        temperature: 0.3,
      });
      
      return response.choices[0]?.message?.content || templateContent;
    } catch (error) {
      console.error("Error generating document from template:", error);
      
      // Fallback to simple replacement of company name if AI fails
      let generatedContent = templateContent;
      if (companyInfo.name) {
        generatedContent = generatedContent.replace(/\[Company Name\]/g, companyInfo.name);
      }
      return generatedContent;
    }
  }
  
  async improveDocumentContent(content: string): Promise<string> {
    try {
      const response = await openai.chat.completions.create({
        model: "gpt-4o-mini",
        messages: [
          {
            role: "system",
            content: "You are a compliance expert who specializes in improving compliance documents. Enhance the document to be more comprehensive, clear, and legally robust while maintaining its original intent. Make specific improvements related to compliance, regulation adherence, and clarity."
          },
          {
            role: "user",
            content: `Please improve this compliance document to be more comprehensive and clear:\n\n${content}`
          }
        ],
        temperature: 0.5,
      });
      
      return response.choices[0]?.message?.content || content;
    } catch (error) {
      console.error("Error improving document content:", error);
      return content + "\n\n[AI-suggested improvement: Consider adding more specific details about data handling procedures.]";
    }
  }
  
  async checkComplianceIssues(content: string): Promise<{ issues: string[], score: number }> {
    try {
      const response = await openai.chat.completions.create({
        model: "gpt-4o-mini",
        messages: [
          {
            role: "system",
            content: "You are a compliance auditor specializing in identifying issues in compliance documents. Analyze the document and identify any compliance issues, missing elements, or areas that need improvement. Provide a compliance score from 0.0 to 1.0 where 1.0 is fully compliant. Return your response in JSON format with 'issues' as an array of strings and 'score' as a number."
          },
          {
            role: "user",
            content: `Please analyze this compliance document for issues:\n\n${content}`
          }
        ],
        temperature: 0.2,
        response_format: { type: "json_object" }
      });
      
      const resultText = response.choices[0]?.message?.content || "";
      try {
        const result = JSON.parse(resultText);
        if (Array.isArray(result.issues) && typeof result.score === 'number') {
          return {
            issues: result.issues,
            score: result.score
          };
        }
      } catch (jsonError) {
        console.error("Error parsing JSON from OpenAI response:", jsonError);
      }
      
      // Fallback
      return {
        issues: [
          "Missing data retention policy specifics",
          "Unclear incident response procedure",
          "No mention of employee training requirements"
        ],
        score: 0.75
      };
    } catch (error) {
      console.error("Error checking compliance issues:", error);
      return {
        issues: [
          "Error analyzing document",
          "Missing data retention policy specifics",
          "Unclear incident response procedure"
        ],
        score: 0.75
      };
    }
  }
  
  async suggestComplianceActions(currentCompliance: any): Promise<string[]> {
    try {
      const response = await openai.chat.completions.create({
        model: "gpt-4o-mini",
        messages: [
          {
            role: "system",
            content: "You are a compliance consultant that recommends specific and actionable steps to improve a company's compliance posture. Based on the current compliance state, suggest 3-5 high-priority actions the company should take. Return your response as a JSON array of strings."
          },
          {
            role: "user",
            content: `Based on this current compliance state, what actions should the company take:\n\n${JSON.stringify(currentCompliance)}`
          }
        ],
        temperature: 0.3,
        response_format: { type: "json_object" }
      });
      
      const resultText = response.choices[0]?.message?.content || "";
      try {
        const result = JSON.parse(resultText);
        if (Array.isArray(result.actions) || Array.isArray(result.suggestions) || Array.isArray(result)) {
          return Array.isArray(result) 
            ? result 
            : (result.actions || result.suggestions || []);
        }
      } catch (jsonError) {
        console.error("Error parsing JSON from OpenAI response:", jsonError);
      }
      
      // Fallback
      return [
        "Update your ISO 27001 documentation",
        "Schedule a security awareness training session",
        "Review vendor agreements for GDPR compliance"
      ];
    } catch (error) {
      console.error("Error suggesting compliance actions:", error);
      return [
        "Update your ISO 27001 documentation",
        "Schedule a security awareness training session",
        "Review vendor agreements for GDPR compliance"
      ];
    }
  }
}

export const aiService = new AIServiceImpl();

================
File: server/auth.ts
================
import passport from "passport";
import { Strategy as LocalStrategy } from "passport-local";
import { Express, Request, Response } from "express";
import session from "express-session";
import { scrypt, randomBytes, timingSafeEqual } from "crypto";
import { promisify } from "util";
import { storage } from "./storage.js";
import { User as SelectUser, User } from "../shared/schema.js";
import dotenv from "dotenv";

dotenv.config();


declare global {
  namespace Express {
    interface User extends SelectUser {}
  }
}

const scryptAsync = promisify(scrypt);

async function hashPassword(password: string) {
  const salt = randomBytes(16).toString("hex");
  const buf = (await scryptAsync(password, salt, 64)) as Buffer;
  return `${buf.toString("hex")}.${salt}`;
}

async function comparePasswords(supplied: string, stored: string) {
  const [hashed, salt] = stored.split(".");
  const hashedBuf = Buffer.from(hashed, "hex");
  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;
  return timingSafeEqual(hashedBuf, suppliedBuf);
}

export function setupAuth(app: Express) {
  const sessionSettings: session.SessionOptions = {
    secret: process.env.SESSION_SECRET || "compliance-ai-secret-key",
    resave: false,
    saveUninitialized: false,
    store: storage.sessionStore,
    cookie: {
      maxAge: 24 * 60 * 60 * 1000, // 24 hours
      httpOnly: true,
      secure: process.env.NODE_ENV === "production",
    }
  };

  app.set("trust proxy", 1);
  app.use(session(sessionSettings));
  app.use(passport.initialize());
  app.use(passport.session());

  passport.use(
    new LocalStrategy(async (username, password, done) => {
      try {
        // Try to find user by username
        let user = await storage.getUserByUsername(username);
        
        // If not found by username, try by email
        if (!user) {
          user = await storage.getUserByEmail(username);
        }
        
        if (!user || !(await comparePasswords(password, user.password))) {
          return done(null, false, { message: "Incorrect username or password" });
        } else {
          return done(null, user);
        }
      } catch (error) {
        return done(error);
      }
    }),
  );

  passport.serializeUser((user, done) => done(null, user.id));
  passport.deserializeUser(async (id: number, done) => {
    try {
      const user = await storage.getUser(id);
      done(null, user);
    } catch (error) {
      done(error, null);
    }
  });

  app.post("/api/register", async (req, res, next) => {
    try {
      // Check if username or email already exists
      const existingByUsername = await storage.getUserByUsername(req.body.username);
      if (existingByUsername) {
        return res.status(400).json({ message: "Username already exists" });
      }
      
      const existingByEmail = await storage.getUserByEmail(req.body.email);
      if (existingByEmail) {
        return res.status(400).json({ message: "Email already exists" });
      }
      
      // Create the user with hashed password
      const user = await storage.createUser({
        ...req.body,
        password: await hashPassword(req.body.password),
      });
      
      // Remove password from response
      const { password, ...userResponse } = user;

      req.login(user, (err) => {
        if (err) return next(err);
        res.status(201).json(userResponse);
      });
    } catch (error) {
      next(error);
    }
  });

  app.post("/api/login", (req, res, next) => {
    passport.authenticate("local", (err: Error | null, user: User, info: any) => {
      if (err) return next(err);
      if (!user) {
        return res.status(401).json({ message: info?.message || "Authentication failed" });
      }
      
      req.login(user, (loginErr) => {
        if (loginErr) return next(loginErr);
        
        // Remove password from response
        const { password, ...userResponse } = user;
        
        res.status(200).json(userResponse);
      });
    })(req, res, next);
  });

  app.post("/api/logout", (req, res, next) => {
    req.logout((err) => {
      if (err) return next(err);
      res.sendStatus(200);
    });
  });

  app.get("/api/user", (req, res) => {
    if (!req.isAuthenticated()) return res.sendStatus(401);
    
    // Remove password from response
    const { password, ...userResponse } = req.user;
    
    res.json(userResponse);
  });
}

// Helper function for route authorization
export function requireRole(role: string | string[]) {
  const roles = Array.isArray(role) ? role : [role];
  
  return (req: Request, res: Response, next: Function) => {
    if (!req.isAuthenticated()) {
      return res.status(401).json({ message: "Unauthorized" });
    }
    
    if (!roles.includes(req.user.role)) {
      return res.status(403).json({ message: "Forbidden" });
    }
    
    next();
  };
}

================
File: server/db.ts
================
import { Pool, neonConfig } from '@neondatabase/serverless';
import { drizzle } from 'drizzle-orm/neon-serverless';
import ws from "ws";
import * as schema from "../shared/schema.js";
import dotenv from "dotenv";

dotenv.config();

neonConfig.webSocketConstructor = ws;

if (!process.env.DATABASE_URL) {
  throw new Error(
    "DATABASE_URL must be set. Did you forget to provision a database?",
  );
}

export const pool = new Pool({ connectionString: process.env.DATABASE_URL });
export const db = drizzle({ client: pool, schema });

================
File: server/index.ts
================
import express, { type Request, Response, NextFunction } from "express";
import { registerRoutes } from "./routes.js";
import { setupVite, serveStatic, log } from "./vite.js";
import cors from "cors";
import dotenv from "dotenv";
import bodyParser from "body-parser";
import fileUpload from "express-fileupload";

const app = express();
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cors());
app.use(bodyParser.json());
app.use(fileUpload({
  limits: { fileSize: 50 * 1024 * 1024 }, // 50MB max file size
  useTempFiles: true,
  tempFileDir: '/tmp/'
}));

app.use((req, res, next) => {
  const start = Date.now();
  const path = req.path;
  let capturedJsonResponse: Record<string, any> | undefined = undefined;

  const originalResJson = res.json;
  res.json = function (bodyJson, ...args) {
    capturedJsonResponse = bodyJson;
    return originalResJson.apply(res, [bodyJson, ...args]);
  };

  res.on("finish", () => {
    const duration = Date.now() - start;
    if (path.startsWith("/api")) {
      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;
      if (capturedJsonResponse) {
        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;
      }

      if (logLine.length > 80) {
        logLine = logLine.slice(0, 79) + "…";
      }

      log(logLine);
    }
  });

  next();
});

app.use((req, res, next) => {
  const start = Date.now();
  const path = req.path;
  
  // Log file upload request details
  if (path === '/api/user-documents/upload' && req.method === 'POST') {
    console.log('📁 File upload request received:');
    console.log('- Content-Type:', req.headers['content-type']);
    console.log('- Content-Length:', req.headers['content-length']);
    console.log('- Has files object:', req.files ? 'Yes' : 'No');
    if (req.files) {
      console.log('- Files keys:', Object.keys(req.files));
    }
  }
  
  let capturedJsonResponse: Record<string, any> | undefined = undefined;

  const originalResJson = res.json;
  res.json = function (bodyJson, ...args) {
    capturedJsonResponse = bodyJson;
    return originalResJson.apply(res, [bodyJson, ...args]);
  };

  res.on("finish", () => {
    const duration = Date.now() - start;
    if (path.startsWith("/api")) {
      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;
      if (capturedJsonResponse) {
        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;
      }

      if (logLine.length > 80) {
        logLine = logLine.slice(0, 79) + "…";
      }

      log(logLine);
      
      // Additional logging for file upload responses
      if (path === '/api/user-documents/upload') {
        console.log(`📁 File upload response: ${res.statusCode}`);
      }
    }
  });

  next();
});

(async () => {
  const server = await registerRoutes(app);

  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {
    const status = err.status || err.statusCode || 500;
    const message = err.message || "Internal Server Error";

    res.status(status).json({ message });
    throw err;
  });

  // importantly only setup vite in development and after
  // setting up all the other routes so the catch-all route
  // doesn't interfere with the other routes
  if (app.get("env") === "development") {
    await setupVite(app, server);
  } else {
    serveStatic(app);
  }

  // ALWAYS serve the app on port 5000
  // this serves both the API and the client.
  // It is the only port that is not firewalled.
  const port = 5000;
  server.listen({
    port,
    host: "0.0.0.0",
    reusePort: true,
  }, () => {
    log(`serving on port ${port}`);
  });
})();

================
File: server/migrations/add-user-documents-fields.ts
================
import { drizzle } from "drizzle-orm/node-postgres";
import { sql } from "drizzle-orm";
import { db } from "../db";

export async function runMigration() {
  console.log("Running migration: Adding category, starred, and status fields to user_documents table");
  
  await db.execute(sql`
    -- Add new columns to user_documents table
    ALTER TABLE user_documents 
    ADD COLUMN IF NOT EXISTS category VARCHAR(100) DEFAULT 'General',
    ADD COLUMN IF NOT EXISTS starred BOOLEAN DEFAULT false,
    ADD COLUMN IF NOT EXISTS status TEXT DEFAULT 'draft';

    -- Add constraint for status field
    ALTER TABLE user_documents 
    ADD CONSTRAINT user_documents_status_check 
    CHECK (status IN ('draft', 'review', 'approved', 'archived'));

    -- Add index for faster filtering by category and status
    CREATE INDEX IF NOT EXISTS idx_user_documents_category ON user_documents(category);
    CREATE INDEX IF NOT EXISTS idx_user_documents_status ON user_documents(status);
    CREATE INDEX IF NOT EXISTS idx_user_documents_starred ON user_documents(starred);

    -- Add comment
    COMMENT ON COLUMN user_documents.category IS 'Document category for organization';
    COMMENT ON COLUMN user_documents.starred IS 'Whether the document is starred/favorited';
    COMMENT ON COLUMN user_documents.status IS 'Document workflow status';
  `);

  console.log("Migration completed: user_documents table updated with new fields");
}

// Run the migration if this file is executed directly
if (require.main === module) {
  runMigration().catch(console.error);
}

================
File: server/migrations/add-user-documents-table.ts
================
import { drizzle } from "drizzle-orm/node-postgres";
import { sql } from "drizzle-orm";
import { db } from "../db.js";

export async function runMigration() {
  console.log("Running migration: Creating user_documents table");
  
  await db.execute(sql`
    CREATE TABLE IF NOT EXISTS user_documents (
      id SERIAL PRIMARY KEY,
      user_id INTEGER NOT NULL REFERENCES users(id) ON DELETE CASCADE,
      title VARCHAR(255) NOT NULL,
      description TEXT,
      file_name VARCHAR(255) NOT NULL,
      file_type VARCHAR(100) NOT NULL,
      file_size INTEGER NOT NULL,
      file_url TEXT NOT NULL,
      tags TEXT[],
      created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
      updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
    );

    -- Add index for faster queries when filtering by user
    CREATE INDEX IF NOT EXISTS idx_user_documents_user_id ON user_documents(user_id);

    -- Add comment
    COMMENT ON TABLE user_documents IS 'Stores user-uploaded documents separate from compliance documents';
  `);

  console.log("Migration completed: user_documents table created");
}

// Run the migration if this file is executed directly
if (require.main === module) {
  runMigration()
    .then(() => process.exit(0))
    .catch((err) => {
      console.error("Migration failed:", err);
      process.exit(1);
    });
}

================
File: server/routes.ts
================
import type { Express, Request, Response } from "express";
import { createServer, type Server } from "http";
import { storage } from "./storage.js";
import { setupAuth, requireRole } from "./auth.js";
import { db } from "./db.js";
import { sql } from "drizzle-orm";
import { 
  insertDocumentSchema, insertSignatureSchema, 
  insertComplianceDeadlineSchema, insertTemplateSchema 
} from "../shared/schema.js";
import { aiService } from "./ai-service.js";
import OpenAI from "openai";
import { Client as ObjectStorageClient } from "@replit/object-storage";
import dotenv from "dotenv";
// @ts-ignore: multer has no types in tsconfig
import multer from 'multer';
// @ts-ignore: object-storage types are present but skipLibCheck may hide them
import { Client } from '@replit/object-storage';
// @ts-ignore: mime-types has no types in tsconfig
import mime from 'mime-types';
import fs from 'fs';
import path from 'path';

// Initialize environment variables
dotenv.config();

// Initialize OpenAI client
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

const upload = multer();

// Environment detection for Replit Object Storage
const isReplitEnvironment = !!process.env.REPL_ID || !!process.env.REPLIT_DB_URL;

// Create appropriate storage client based on environment
let objectClient: any;

if (isReplitEnvironment) {
  // Use real Replit Object Storage in Replit environment
  objectClient = new Client();
} else {
  // Create a development-compatible mock for local development
  console.log("⚠️  Running in development mode - using mock object storage");
  console.log("   Note: File uploads will work but won't persist between restarts");
  
  class DevelopmentObjectClient {
    private storage: Map<string, Buffer> = new Map();
    
    async uploadFromBytes(key: string, data: Buffer): Promise<any> {
      this.storage.set(key, data);
      console.log(`📁 Mock upload: ${key} (${data.length} bytes)`);
      return { ok: true };
    }
    
    async exists(key: string): Promise<any> {
      const exists = this.storage.has(key);
      console.log(`🔍 Mock exists check: ${key} = ${exists}`);
      return { ok: true, value: exists };
    }
    
    async delete(key: string): Promise<any> {
      const existed = this.storage.delete(key);
      console.log(`🗑️ Mock delete: ${key} (existed: ${existed})`);
      return { ok: true };
    }
    
    async list(options: { prefix: string }): Promise<any> {
      const results = Array.from(this.storage.keys())
        .filter(key => key.startsWith(options.prefix))
        .map(name => ({ name }));
      console.log(`📋 Mock list: ${options.prefix}* = ${results.length} files`);
      return { ok: true, value: results };
    }
    
    downloadAsStream(key: string): any {
      const data = this.storage.get(key) || Buffer.from('');
      console.log(`⬇️ Mock download stream: ${key} (${data.length} bytes)`);
      
      const Readable = require('stream').Readable;
      const stream = new Readable();
      stream.push(data);
      stream.push(null);
      return stream;
    }
  }
  
  objectClient = new DevelopmentObjectClient();
}

export async function registerRoutes(app: Express): Promise<Server> {
  // Setup authentication routes
  setupAuth(app);
  
  // Health check endpoint for deployment
  app.get("/api/health", (req: Request, res: Response) => {
    res.status(200).json({ 
      status: "healthy", 
      timestamp: new Date().toISOString(),
      service: "ComplianceAI API"
    });
  });
  
  // Documents API
  app.get("/api/documents", async (req: Request, res: Response) => {
    if (!req.isAuthenticated()) {
      return res.status(401).json({ message: "Unauthorized" });
    }
    
    try {
      const options: any = {};
      
      // Filter by user if not admin or compliance officer
      if (req.user.role === "employee") {
        options.createdById = req.user.id;
      }
      
      if (req.query.status) {
        options.status = req.query.status as string;
      }
      
      if (req.query.limit) {
        options.limit = parseInt(req.query.limit as string);
      }
      
      if (req.query.offset) {
        options.offset = parseInt(req.query.offset as string);
      }
      
      const documents = await storage.listDocuments(options);
      res.json(documents);
    } catch (error: any) {
      res.status(500).json({ message: "Error retrieving documents", error: error.message });
    }
  });
  
  app.get("/api/documents/:id", async (req: Request, res: Response) => {
    if (!req.isAuthenticated()) {
      return res.status(401).json({ message: "Unauthorized" });
    }
    
    try {
      const document = await storage.getDocument(parseInt(req.params.id));
      
      if (!document) {
        return res.status(404).json({ message: "Document not found" });
      }
      
      // Check if user has access to the document
      if (req.user.role === "employee" && document.createdById !== req.user.id) {
        return res.status(403).json({ message: "Forbidden" });
      }
      
      res.json(document);
    } catch (error: any) {
      res.status(500).json({ message: "Error retrieving document", error: error.message });
    }
  });
  
  app.post("/api/documents", async (req: Request, res: Response) => {
    if (!req.isAuthenticated()) {
      return res.status(401).json({ message: "Unauthorized - You must be logged in to create documents" });
    }
    
    try {
      console.log("Document creation request body:", JSON.stringify(req.body));
      console.log("Current user:", req.user ? JSON.stringify({ id: req.user.id, role: req.user.role }) : "No user in session");
      
      // Explicitly set the createdById before validation, so it will be included in the validation
      const documentWithUser = {
        ...req.body,
        createdById: req.user.id
      };
      
      const validation = insertDocumentSchema.safeParse(documentWithUser);
      if (!validation.success) {
        console.error("Document validation failed:", validation.error.format());
        return res.status(400).json({ 
          message: "Invalid document data", 
          errors: validation.error.format(), 
          details: "The document schema validation failed. Make sure all required fields are provided."
        });
      }
      
      // The validation succeeded, we can proceed with the validated data
      const documentData = validation.data;
      
      console.log("Processed document data:", JSON.stringify(documentData));
      
      const document = await storage.createDocument(documentData);
      
      // Create audit trail record
      await storage.createAuditRecord({
        documentId: document.id,
        userId: req.user.id,
        action: "DOCUMENT_CREATED",
        details: `Document "${document.title}" created`,
        ipAddress: req.ip
      });
      
      res.status(201).json(document);
    } catch (error: any) {
      console.error("Error creating document:", error);
      console.error("Error stack:", error.stack);
      res.status(500).json({ 
        message: "Error creating document", 
        error: error.message,
        stack: process.env.NODE_ENV === 'production' ? undefined : error.stack
      });
    }
  });
  
  app.put("/api/documents/:id", async (req: Request, res: Response) => {
    if (!req.isAuthenticated()) {
      return res.status(401).json({ message: "Unauthorized" });
    }
    
    try {
      const document = await storage.getDocument(parseInt(req.params.id));
      
      if (!document) {
        return res.status(404).json({ message: "Document not found" });
      }
      
      // Check permissions
      if (req.user.role === "employee" && document.createdById !== req.user.id) {
        return res.status(403).json({ message: "Forbidden" });
      }
      
      // Include current user as updater
      const updateData = { ...req.body, createdById: req.user.id };
      
      const updatedDocument = await storage.updateDocument(parseInt(req.params.id), updateData);
      
      // Create audit trail record
      await storage.createAuditRecord({
        documentId: document.id,
        userId: req.user.id,
        action: "DOCUMENT_UPDATED",
        details: `Document "${document.title}" updated`,
        ipAddress: req.ip
      });
      
      res.json(updatedDocument);
    } catch (error: any) {
      res.status(500).json({ message: "Error updating document", error: error.message });
    }
  });

  // Update document status only
  app.patch("/api/documents/:id/status", async (req: Request, res: Response) => {
    if (!req.isAuthenticated()) {
      return res.status(401).json({ message: "Unauthorized" });
    }
    
    try {
      const document = await storage.getDocument(parseInt(req.params.id));
      
      if (!document) {
        return res.status(404).json({ message: "Document not found" });
      }
      
      // Check permissions
      if (req.user.role === "employee" && document.createdById !== req.user.id) {
        return res.status(403).json({ message: "Forbidden" });
      }
      
      const { status } = req.body;
      if (!status) {
        return res.status(400).json({ message: "Status is required" });
      }
      
      const updatedDocument = await storage.updateDocument(parseInt(req.params.id), { status });
      
      // Create audit trail record
      await storage.createAuditRecord({
        documentId: document.id,
        userId: req.user.id,
        action: "STATUS_CHANGED",
        details: `Document "${document.title}" status changed to ${status}`,
        ipAddress: req.ip
      });
      
      res.json(updatedDocument);
    } catch (error: any) {
      res.status(500).json({ message: "Error updating document status", error: error.message });
    }
  });

  // Duplicate document
  app.post("/api/documents/:id/duplicate", async (req: Request, res: Response) => {
    if (!req.isAuthenticated()) {
      return res.status(401).json({ message: "Unauthorized" });
    }
    
    try {
      const originalDocument = await storage.getDocument(parseInt(req.params.id));
      
      if (!originalDocument) {
        return res.status(404).json({ message: "Document not found" });
      }
      
      // Check permissions
      if (req.user.role === "employee" && originalDocument.createdById !== req.user.id) {
        return res.status(403).json({ message: "Forbidden" });
      }
      
      // Create duplicate with new title and reset version
      const duplicateData = {
        title: `${originalDocument.title} (Copy)`,
        content: originalDocument.content,
        status: "draft" as const,
        templateId: originalDocument.templateId,
        version: 1,
        createdById: req.user.id
      };
      
      const duplicateDocument = await storage.createDocument(duplicateData);
      
      // Create audit trail record for original document
      await storage.createAuditRecord({
        documentId: originalDocument.id,
        userId: req.user.id,
        action: "DOCUMENT_DUPLICATED",
        details: `Document "${originalDocument.title}" duplicated as "${duplicateDocument.title}"`,
        ipAddress: req.ip
      });
      
      // Create audit trail record for new document
      await storage.createAuditRecord({
        documentId: duplicateDocument.id,
        userId: req.user.id,
        action: "DOCUMENT_CREATED",
        details: `Document "${duplicateDocument.title}" created as duplicate`,
        ipAddress: req.ip
      });
      
      res.json(duplicateDocument);
    } catch (error: any) {
      res.status(500).json({ message: "Error duplicating document", error: error.message });
    }
  });
  
  // Document versions API
  app.get("/api/documents/:id/versions", async (req: Request, res: Response) => {
    if (!req.isAuthenticated()) {
      return res.status(401).json({ message: "Unauthorized" });
    }
    
    try {
      const document = await storage.getDocument(parseInt(req.params.id));
      
      if (!document) {
        return res.status(404).json({ message: "Document not found" });
      }
      
      // Check if user has access to the document
      if (req.user.role === "employee" && document.createdById !== req.user.id) {
        return res.status(403).json({ message: "Forbidden" });
      }
      
      const versions = await storage.getDocumentVersions(parseInt(req.params.id));
      res.json(versions);
    } catch (error: any) {
      res.status(500).json({ message: "Error retrieving document versions", error: error.message });
    }
  });
  
  // Signatures API
  app.post("/api/documents/:id/signatures", async (req: Request, res: Response) => {
    if (!req.isAuthenticated()) {
      return res.status(401).json({ message: "Unauthorized" });
    }
    try {
      const document = await storage.getDocument(parseInt(req.params.id));
      if (!document) {
        return res.status(404).json({ message: "Document not found" });
      }
      const validation = insertSignatureSchema.safeParse({
        ...req.body,
        documentId: parseInt(req.params.id),
      });
      if (!validation.success) {
        return res.status(400).json({ message: "Invalid signature data", errors: validation.error.format() });
      }
      const signature = await storage.createSignature(validation.data);
      await storage.createAuditRecord({
        documentId: signature.documentId,
        userId: signature.userId,
        action: "SIGNATURE_CREATED",
        details: `Signature by user ${signature.userId}`,
        ipAddress: req.ip
      });
      res.status(201).json(signature);
    } catch (error: any) {
      res.status(500).json({ message: "Error creating signature", error: error.message });
    }
  });
  
  app.get("/api/documents/:id/signatures", async (req: Request, res: Response) => {
    if (!req.isAuthenticated()) {
      return res.status(401).json({ message: "Unauthorized" });
    }
    
    try {
      const document = await storage.getDocument(parseInt(req.params.id));
      
      if (!document) {
        return res.status(404).json({ message: "Document not found" });
      }
      
      // Check if user has access to the document
      if (req.user.role === "employee" && document.createdById !== req.user.id) {
        return res.status(403).json({ message: "Forbidden" });
      }
      
      const signatures = await storage.getDocumentSignatures(parseInt(req.params.id));
      res.json(signatures);
    } catch (error: any) {
      res.status(500).json({ message: "Error retrieving signatures", error: error.message });
    }
  });
  
  // Audit trail API
  app.get("/api/documents/:id/audit", async (req: Request, res: Response) => {
    if (!req.isAuthenticated()) {
      return res.status(401).json({ message: "Unauthorized" });
    }
    
    try {
      const document = await storage.getDocument(parseInt(req.params.id));
      
      if (!document) {
        return res.status(404).json({ message: "Document not found" });
      }
      
      // Check if user has access to the document
      if (req.user.role === "employee" && document.createdById !== req.user.id) {
        return res.status(403).json({ message: "Forbidden" });
      }
      
      const auditTrail = await storage.getDocumentAuditTrail(parseInt(req.params.id));
      res.json(auditTrail);
    } catch (error: any) {
      res.status(500).json({ message: "Error retrieving audit trail", error: error.message });
    }
  });

  // Compliance document download API
  app.get("/api/documents/:id/download", async (req: Request, res: Response) => {
    if (!req.isAuthenticated()) {
      return res.status(401).json({ message: "Unauthorized" });
    }
    
    try {
      const document = await storage.getDocument(parseInt(req.params.id));
      
      if (!document) {
        return res.status(404).json({ message: "Document not found" });
      }
      
      // Check if user has access to the document
      if (req.user.role === "employee" && document.createdById !== req.user.id) {
        return res.status(403).json({ message: "Forbidden" });
      }
      
      // Create audit trail record
      await storage.createAuditRecord({
        documentId: document.id,
        userId: req.user.id,
        action: "DOCUMENT_DOWNLOADED",
        details: `Document "${document.title}" downloaded`,
        ipAddress: req.ip
      });
      
      // For compliance documents, we'll export the content as a downloadable text file
      const content = `${document.title}\n\n${document.content}`;
      const fileName = `${document.title.replace(/[^a-zA-Z0-9]/g, '_')}_v${document.version}.txt`;
      
      res.setHeader('Content-Type', 'text/plain');
      res.setHeader('Content-Disposition', `attachment; filename="${fileName}"`);
      res.send(content);
    } catch (error: any) {
      res.status(500).json({ message: "Error downloading document", error: error.message });
    }
  });
  
  // Compliance deadlines API
  app.get("/api/compliance-deadlines", async (req: Request, res: Response) => {
    if (!req.isAuthenticated()) {
      return res.status(401).json({ message: "Unauthorized" });
    }
    
    try {
      const options: any = {};
      
      // Filter by assignee if employee
      if (req.user.role === "employee") {
        options.assigneeId = req.user.id;
      } else if (req.query.assigneeId) {
        const parsedId = parseInt(String(req.query.assigneeId).replace(/[^0-9]/g, ''), 10);
        options.assigneeId = isNaN(parsedId) ? null : parsedId;
      }
      
      if (req.query.status) {
        options.status = req.query.status as string;
      }
      
      if (req.query.upcoming === "true") {
        options.upcoming = true;
      }
      
      if (req.query.limit) {
        const limit = parseInt(String(req.query.limit), 10);
        options.limit = isNaN(limit) ? 10 : limit; // Default to 10 if invalid
      }
      
      if (req.query.offset) {
        const offset = parseInt(String(req.query.offset), 10);
        options.offset = isNaN(offset) ? 0 : offset; // Default to 0 if invalid
      }
      
      console.log("Sanitized compliance deadlines query options:", options);
      
      const deadlines = await storage.listComplianceDeadlines(options);
      res.json(deadlines);
    } catch (error: any) {
      console.error("Error retrieving compliance deadlines:", error);
      res.status(500).json({ message: "Error retrieving compliance deadlines", error: error.message });
    }
  });
  
  app.post("/api/compliance-deadlines", requireRole(["admin", "compliance_officer"]), async (req: Request, res: Response) => {
    try {
      console.log("Original request body:", JSON.stringify(req.body));
      
      // First completely sanitize the entire request to prevent any NaN values
      let safeData = deepSanitizeObject(req.body);
      console.log("After deep sanitization:", JSON.stringify(safeData));
      
      // Process and sanitize the request data - now with safer data
      let requestData: Record<string, any> = {...safeData};
      
      // Handle date conversion
      if (requestData.deadline) {
        requestData.deadline = new Date(requestData.deadline);
      }
      
      // Handle assigneeId with proper type handling - additional safety
      if ('assigneeId' in requestData) {
        // If null, empty string or "none", set to null
        if (requestData.assigneeId === null || 
            requestData.assigneeId === "" || 
            requestData.assigneeId === "none" || 
            requestData.assigneeId === "null") {
          requestData.assigneeId = null;
        } 
        // If it's already a number, verify it's not NaN
        else if (typeof requestData.assigneeId === 'number') {
          requestData.assigneeId = isNaN(requestData.assigneeId) ? null : requestData.assigneeId;
        } 
        // If it's a string that can be parsed as a number
        else if (typeof requestData.assigneeId === 'string') {
          // Remove any non-numeric characters first
          const cleanedValue = requestData.assigneeId.replace(/[^0-9]/g, '');
          if (cleanedValue === '') {
            requestData.assigneeId = null;
          } else {
            const parsedId = parseInt(cleanedValue, 10);
            requestData.assigneeId = isNaN(parsedId) ? null : parsedId;
          }
        } 
        // Anything else becomes null
        else {
          requestData.assigneeId = null;
        }
      }
      
      console.log("Sanitized request data for create:", JSON.stringify(requestData));
      
      // Convert to a clean object to avoid any potential prototype issues
      const cleanedData: Record<string, any> = {};
      
      // Only add properties that exist and have valid values
      for (const [key, value] of Object.entries(requestData)) {
        // Special handling for ID fields to ensure they are valid integers or null
        if (key.toLowerCase().includes('id') && key !== 'documentId') {
          if (value === null) {
            cleanedData[key] = null;
          } else if (typeof value === 'number') {
            cleanedData[key] = isNaN(value) ? null : value;
          } else if (typeof value === 'string') {
            const parsedId = parseInt(value.replace(/[^0-9]/g, ''), 10);
            cleanedData[key] = isNaN(parsedId) ? null : parsedId;
          }
        } 
        // For non-ID fields, just check if defined
        else if (value !== undefined) {
          cleanedData[key] = value;
        }
      }
      
      console.log("Final cleaned data:", JSON.stringify(cleanedData));
      
      try {
        // Validate the data - full validation for creation
        const validation = insertComplianceDeadlineSchema.safeParse(cleanedData);
        if (!validation.success) {
          return res.status(400).json({ message: "Invalid deadline data", errors: validation.error.format() });
        }
        
        // Use the validated data
        const validatedData = validation.data;
        
        const deadline = await storage.createComplianceDeadline(validatedData);
        
        if (deadline.documentId) {
          await storage.createAuditRecord({
            documentId: deadline.documentId,
            userId: req.user!.id,
            action: "COMPLIANCE_DEADLINE_CREATED",
            details: `Compliance deadline "${deadline.title}" created`,
            ipAddress: req.ip
          });
        }
        
        res.status(201).json(deadline);
      } catch (dbError: any) {
        console.error("Database error:", dbError);
        console.error("Error details:", dbError.detail || "No additional details");
        console.error("Error query:", dbError.query || "No query available");
        return res.status(500).json({ 
          message: "Database error while creating compliance deadline", 
          error: dbError.message,
          detail: dbError.detail || null
        });
      }
    } catch (error: any) {
      console.error("Error creating compliance deadline:", error);
      console.error("Error stack:", error.stack);
      res.status(500).json({ message: "Error creating compliance deadline", error: error.message });
    }
  });
  
  /**
   * Sanitizes an object recursively to ensure all number fields are valid integers
   * or nulls, preventing any NaN values from reaching the database
   */
  function deepSanitizeObject(obj: Record<string, any>): Record<string, any> {
    const result: Record<string, any> = {};
    
    for (const [key, value] of Object.entries(obj)) {
      // Handle different data types appropriately
      if (value === null || value === undefined) {
        // Allow nulls/undefined to pass through
        result[key] = value;
      } else if (typeof value === 'object' && !Array.isArray(value) && !(value instanceof Date)) {
        // Recursively sanitize nested objects
        result[key] = deepSanitizeObject(value);
      } else if (typeof value === 'string' && key.toLowerCase().includes('id') && key !== 'documentId') {
        // If field name contains 'id' and is a string, try to parse as integer
        if (value === '' || value === 'none' || value === 'null') {
          result[key] = null;
        } else {
          const parsed = parseInt(value.replace(/[^0-9-]/g, ''), 10);
          result[key] = isNaN(parsed) ? null : parsed;
        }
      } else if (typeof value === 'number' && isNaN(value) && key.toLowerCase().includes('id')) {
        // If it's NaN but in an ID field, convert to null
        result[key] = null;
      } else {
        // Pass all other values through unchanged
        result[key] = value;
      }
    }
    
    return result;
  }

  app.put("/api/compliance-deadlines/:id", requireRole(["admin", "compliance_officer"]), async (req: Request, res: Response) => {
    try {
      console.log("Original request body:", JSON.stringify(req.body));
      
      // First completely sanitize the entire request to prevent any NaN values
      let safeData = deepSanitizeObject(req.body);
      console.log("After deep sanitization:", JSON.stringify(safeData));
      
      // Process and sanitize the request data - now with safer data
      let requestData: Record<string, any> = {...safeData};
      
      // Handle date conversion
      if (requestData.deadline) {
        requestData.deadline = new Date(requestData.deadline);
      }
      
      // Handle assigneeId with proper type handling - additional safety
      if ('assigneeId' in requestData) {
        // If null, empty string or "none", set to null
        if (requestData.assigneeId === null || 
            requestData.assigneeId === "" || 
            requestData.assigneeId === "none" || 
            requestData.assigneeId === "null") {
          requestData.assigneeId = null;
        } 
        // If it's already a number, verify it's not NaN
        else if (typeof requestData.assigneeId === 'number') {
          requestData.assigneeId = isNaN(requestData.assigneeId) ? null : requestData.assigneeId;
        } 
        // If it's a string that can be parsed as a number
        else if (typeof requestData.assigneeId === 'string') {
          // Remove any non-numeric characters first
          const cleanedValue = requestData.assigneeId.replace(/[^0-9]/g, '');
          if (cleanedValue === '') {
            requestData.assigneeId = null;
          } else {
            const parsedId = parseInt(cleanedValue, 10);
            requestData.assigneeId = isNaN(parsedId) ? null : parsedId;
          }
        } 
        // Anything else becomes null
        else {
          requestData.assigneeId = null;
        }
      }
      
      console.log("Sanitized request data for update:", JSON.stringify(requestData));
      
      // Convert to a clean object to avoid any potential prototype issues
      const cleanedData: Record<string, any> = {};
      
      // Only add properties that exist and have valid values
      for (const [key, value] of Object.entries(requestData)) {
        // Special handling for ID fields to ensure they are valid integers or null
        if (key.toLowerCase().includes('id') && key !== 'documentId') {
          if (value === null) {
            cleanedData[key] = null;
          } else if (typeof value === 'number') {
            cleanedData[key] = isNaN(value) ? null : value;
          } else if (typeof value === 'string') {
            const parsedId = parseInt(value.replace(/[^0-9]/g, ''), 10);
            cleanedData[key] = isNaN(parsedId) ? null : parsedId;
          }
        } 
        // For non-ID fields, just check if defined
        else if (value !== undefined) {
          cleanedData[key] = value;
        }
      }
      
      console.log("Final cleaned data:", JSON.stringify(cleanedData));
      
      try {
        // Parse ID correctly and with a fallback
        const id = parseInt(req.params.id, 10);
        if (isNaN(id)) {
          return res.status(400).json({ message: "Invalid ID format" });
        }
        
        const deadline = await storage.updateComplianceDeadline(id, cleanedData);
        
        if (!deadline) {
          return res.status(404).json({ message: "Compliance deadline not found" });
        }
        
        // Create audit trail record if related to a document
        if (deadline.documentId) {
          await storage.createAuditRecord({
            documentId: deadline.documentId,
            userId: req.user!.id,
            action: "COMPLIANCE_DEADLINE_UPDATED",
            details: `Compliance deadline "${deadline.title}" updated`,
            ipAddress: req.ip
          });
        }
        
        res.json(deadline);
      } catch (dbError: any) {
        console.error("Database error:", dbError);
        console.error("Error details:", dbError.detail || "No additional details");
        console.error("Error query:", dbError.query || "No query available");
        return res.status(500).json({ 
          message: "Database error while updating compliance deadline", 
          error: dbError.message,
          detail: dbError.detail || null
        });
      }
    } catch (error: any) {
      console.error("Error updating compliance deadline:", error);
      console.error("Error stack:", error.stack);
      res.status(500).json({ message: "Error updating compliance deadline", error: error.message });
    }
  });
  
  // Add this new route after the existing compliance deadlines API routes
  app.get("/api/compliance-deadlines/:id", async (req: Request, res: Response) => {
    if (!req.isAuthenticated()) {
      return res.status(401).json({ message: "Unauthorized" });
    }
    
    try {
      // Parse and validate the ID
      const rawId = req.params.id;
      const id = parseInt(String(rawId).replace(/[^0-9]/g, ''), 10);
      
      if (isNaN(id)) {
        return res.status(400).json({ message: "Invalid deadline ID format" });
      }
      
      const deadline = await storage.getComplianceDeadline(id);
      
      if (!deadline) {
        return res.status(404).json({ message: "Compliance deadline not found" });
      }
      
      // Check if employee has access to this deadline
      if (req.user.role === "employee" && deadline.assigneeId !== req.user.id) {
        return res.status(403).json({ message: "Forbidden" });
      }
      
      res.json(deadline);
    } catch (error: any) {
      console.error("Error retrieving compliance deadline:", error);
      res.status(500).json({ message: "Error retrieving compliance deadline", error: error.message });
    }
  });
  
  // Templates API
  app.get("/api/templates", async (req: Request, res: Response) => {
    if (!req.isAuthenticated()) {
      return res.status(401).json({ message: "Unauthorized" });
    }
    
    try {
      const templates = await storage.listTemplates();
      res.json(templates);
    } catch (error: any) {
      res.status(500).json({ message: "Error retrieving templates", error: error.message });
    }
  });
  
  app.get("/api/templates/:id", async (req: Request, res: Response) => {
    if (!req.isAuthenticated()) {
      return res.status(401).json({ message: "Unauthorized" });
    }
    
    try {
      const template = await storage.getTemplate(parseInt(req.params.id));
      
      if (!template) {
        return res.status(404).json({ message: "Template not found" });
      }
      
      res.json(template);
    } catch (error: any) {
      res.status(500).json({ message: "Error retrieving template", error: error.message });
    }
  });
  
  app.post("/api/templates", requireRole(["admin", "compliance_officer"]), async (req: Request, res: Response) => {
    try {
      const validation = insertTemplateSchema.safeParse({
        ...req.body,
        createdById: req.user?.id
      });
      
      if (!validation.success) {
        return res.status(400).json({ message: "Invalid template data", errors: validation.error.format() });
      }
      
      const template = await storage.createTemplate({
        ...req.body,
        createdById: req.user?.id
      });
      
      res.status(201).json(template);
    } catch (error: any) {
      res.status(500).json({ message: "Error creating template", error: error.message });
    }
  });
  
  // AI service endpoints
  app.post("/api/ai/generate-from-template", async (req: Request, res: Response) => {
    if (!req.isAuthenticated()) {
      return res.status(401).json({ message: "Unauthorized" });
    }
    
    try {
      const { templateId, companyInfo } = req.body;
      
      if (!templateId || !companyInfo) {
        return res.status(400).json({ message: "Missing required parameters" });
      }
      
      const template = await storage.getTemplate(templateId);
      
      if (!template) {
        return res.status(404).json({ message: "Template not found" });
      }
      
      const generatedContent = await aiService.generateDocumentFromTemplate(
        template.content,
        companyInfo
      );
      
      res.json({ content: generatedContent });
    } catch (error: any) {
      res.status(500).json({ message: "Error generating document", error: error.message });
    }
  });
  
  app.post("/api/ai/improve-document", async (req: Request, res: Response) => {
    if (!req.isAuthenticated()) {
      return res.status(401).json({ message: "Unauthorized" });
    }
    
    try {
      const { content } = req.body;
      
      if (!content) {
        return res.status(400).json({ message: "Missing document content" });
      }
      
      const improvedContent = await aiService.improveDocumentContent(content);
      res.json({ content: improvedContent });
    } catch (error: any) {
      res.status(500).json({ message: "Error improving document", error: error.message });
    }
  });
  
  app.post("/api/ai/check-compliance", async (req: Request, res: Response) => {
    if (!req.isAuthenticated()) {
      return res.status(401).json({ message: "Unauthorized" });
    }
    
    try {
      const { content } = req.body;
      
      if (!content) {
        return res.status(400).json({ message: "Missing document content" });
      }
      
      const complianceCheck = await aiService.checkComplianceIssues(content);
      res.json(complianceCheck);
    } catch (error: any) {
      res.status(500).json({ message: "Error checking compliance", error: error.message });
    }
  });
  
  app.post("/api/ai/suggest-actions", async (req: Request, res: Response) => {
    if (!req.isAuthenticated()) {
      return res.status(401).json({ message: "Unauthorized" });
    }
    
    try {
      const { currentCompliance } = req.body;
      
      if (!currentCompliance) {
        return res.status(400).json({ message: "Missing compliance data" });
      }
      
      const suggestions = await aiService.suggestComplianceActions(currentCompliance);
      res.json({ suggestions });
    } catch (error: any) {
      res.status(500).json({ message: "Error generating suggestions", error: error.message });
    }
  });
  
  // Users API (admin only)
  app.get("/api/users", requireRole("admin"), async (req: Request, res: Response) => {
    try {
      const users = await storage.listUsers();
      
      // Remove passwords from response
      const usersResponse = users.map(user => {
        const { password, ...userWithoutPassword } = user;
        return userWithoutPassword;
      });
      
      res.json(usersResponse);
    } catch (error: any) {
      res.status(500).json({ message: "Error retrieving users", error: error.message });
    }
  });
  
  // Dashboard stats API
  app.get("/api/dashboard/stats", async (req: Request, res: Response) => {
    if (!req.isAuthenticated()) {
      return res.status(401).json({ message: "Unauthorized" });
    }
    
    try {
      // Get documents
      const allDocuments = await storage.listDocuments();
      
      // Filter for user if they're an employee
      const userDocuments = req.user.role === "employee" 
        ? allDocuments.filter(doc => doc.createdById === req.user.id)
        : allDocuments;
      
      // Get pending documents
      const pendingDocuments = userDocuments.filter(doc => 
        doc.status === "pending_approval" || doc.status === "draft"
      );
      
      // Get upcoming compliance deadlines
      const deadlineOptions: any = { upcoming: true };
      if (req.user.role === "employee") {
        deadlineOptions.assigneeId = req.user.id;
      }
      
      const upcomingDeadlines = await storage.listComplianceDeadlines(deadlineOptions);
      
      // Calculate compliance rate - in a real app, this would be more sophisticated
      const activeDocuments = userDocuments.filter(doc => doc.status === "active");
      const expiringDocuments = activeDocuments.filter(doc => {
        if (!doc.expiresAt) return false;
        
        const now = new Date();
        const expiresDate = new Date(doc.expiresAt);
        const sevenDaysFromNow = new Date();
        sevenDaysFromNow.setDate(now.getDate() + 7);
        
        return expiresDate <= sevenDaysFromNow && expiresDate > now;
      });
      
      // Calculate compliance rate based on document statuses
      const totalRelevantDocs = userDocuments.length > 0 ? userDocuments.length : 1; // Avoid div by zero
      const compliantDocs = activeDocuments.length;
      const complianceRate = Math.round((compliantDocs / totalRelevantDocs) * 100);
      
      // Get stats from last month
      const lastMonth = new Date();
      lastMonth.setMonth(lastMonth.getMonth() - 1);
      
      const docsCreatedLastMonth = userDocuments.filter(doc => {
        const createdAt = new Date(doc.createdAt);
        return createdAt >= lastMonth;
      }).length;
      
      // Create stats object
      const stats = {
        documents: userDocuments.length,
        pending: pendingDocuments.length,
        complianceRate: complianceRate,
        expiringCount: expiringDocuments.length,
        docsCreatedLastMonth,
        urgentCount: pendingDocuments.filter(doc => {
          if (!doc.expiresAt) return false;
          
          const now = new Date();
          const expiresDate = new Date(doc.expiresAt);
          const threeDaysFromNow = new Date();
          threeDaysFromNow.setDate(now.getDate() + 3);
          
          return expiresDate <= threeDaysFromNow;
        }).length,
        lastMonthComplianceChange: "+2%" // In a real app, this would be calculated
      };
      
      res.json(stats);
    } catch (error: any) {
      res.status(500).json({ message: "Error retrieving dashboard stats", error: error.message });
    }
  });

  // AI Chat API
  app.post("/api/ai/chat", async (req: Request, res: Response) => {
    if (!req.isAuthenticated()) {
      return res.status(401).json({ message: "Unauthorized" });
    }
    
    try {
      const { messages, model = "gpt-4o-mini", temperature = 0.7, max_tokens = 500, context } = req.body;
      
      if (!messages || !Array.isArray(messages)) {
        return res.status(400).json({ message: "Invalid request. Messages array is required." });
      }
      
      // Format messages for OpenAI
      const formattedMessages = messages.map(msg => ({
        role: msg.role,
        content: msg.content
      }));
      
      // Add system message with context if provided
      if (context) {
        formattedMessages.unshift({
          role: "system",
          content: context
        });
      }
      
      const response = await openai.chat.completions.create({
        model,
        messages: formattedMessages,
        temperature,
        max_tokens,
      });
      
      // Create an audit record for the AI interaction
      await storage.createAuditRecord({
        userId: req.user!.id,
        action: "AI_CHAT_INTERACTION",
        details: `User interaction with AI assistant`,
        ipAddress: req.ip
      });
      
      res.json({
        choices: [
          {
            message: {
              content: response.choices[0]?.message?.content || "I'm sorry, I couldn't process that request."
            }
          }
        ]
      });
    } catch (error: any) {
      console.error("Error in AI chat:", error);
      res.status(500).json({ 
        message: "Error processing AI request", 
        error: error.message 
      });
    }
  });
  // User Document Folders API
  app.get("/api/user-documents/folders", async (req: Request, res: Response) => {
    if (!req.isAuthenticated()) {
      return res.status(401).json({ message: "Unauthorized" });
    }
    
    try {
      // Get all unique categories for the user and count real documents (exclude placeholders)
      const result = await db.execute(sql`
        SELECT 
          COALESCE(category, 'General') as name,
          COUNT(CASE WHEN COALESCE(is_folder_placeholder, false) = false THEN 1 END) as document_count,
          MIN(created_at) as created_at
        FROM user_documents 
        WHERE user_id = ${req.user.id}
        GROUP BY COALESCE(category, 'General')
        ORDER BY name
      `);
      
      const folders = result.rows.map((row: any, index: number) => ({
        id: `folder-${req.user.id}-${row.name.replace(/[^a-zA-Z0-9]/g, '-')}`,
        name: row.name,
        documentCount: parseInt(row.document_count),
        createdAt: row.created_at,
        isDefault: row.name === 'General'
      }));
      
      res.json(folders);
    } catch (error: any) {
      res.status(500).json({ message: "Error retrieving folders", error: error.message });
    }
  });

  app.post("/api/user-documents/folders", async (req: Request, res: Response) => {
    if (!req.isAuthenticated()) {
      return res.status(401).json({ message: "Unauthorized" });
    }
    
    try {
      const { name } = req.body;
      
      if (!name || typeof name !== 'string' || name.trim().length === 0) {
        return res.status(400).json({ message: "Folder name is required" });
      }
      
      const folderName = name.trim();
      
      // Check if folder already exists for this user
      const existingFolder = await db.execute(sql`
        SELECT COUNT(*) as count 
        FROM user_documents 
        WHERE user_id = ${req.user.id} AND category = ${folderName}
      `);
      
      if ((existingFolder.rows[0] as any).count > 0) {
        return res.status(409).json({ message: "Folder already exists" });
      }
      
      // Create a placeholder document to establish the folder in the database
      // This ensures the folder appears in the folder list even when empty
      const insertResult = await db.execute(sql`
        INSERT INTO user_documents (
          user_id, 
          title, 
          description, 
          file_name,
          file_type,
          file_size,
          file_url,
          category, 
          status,
          is_folder_placeholder
        ) VALUES (
          ${req.user.id},
          '__FOLDER_PLACEHOLDER__',
          'Folder placeholder - do not display',
          '__folder_placeholder__',
          'application/folder',
          0,
          '',
          ${folderName},
          'draft',
          true
        )
      `);
      
      const folderId = `folder-${req.user.id}-${folderName.replace(/[^a-zA-Z0-9]/g, '-')}`;
      
      res.status(201).json({
        id: folderId,
        name: folderName,
        documentCount: 0,
        createdAt: new Date().toISOString(),
        isDefault: false
      });
    } catch (error: any) {
      res.status(500).json({ message: "Error creating folder", error: error.message });
    }
  });

  app.delete("/api/user-documents/folders/:folderId", async (req: Request, res: Response) => {
    if (!req.isAuthenticated()) {
      return res.status(401).json({ message: "Unauthorized" });
    }
    
    try {
      const { folderId } = req.params;
      
      // Extract folder name from ID
      const folderName = folderId.replace(`folder-${req.user.id}-`, '').replace(/-/g, ' ');
      
      // Check if folder has real documents (excluding placeholders)
      const documentCount = await db.execute(sql`
        SELECT COUNT(*) as count 
        FROM user_documents 
        WHERE user_id = ${req.user.id} 
          AND category = ${folderName} 
          AND COALESCE(is_folder_placeholder, false) = false
      `);
      
      if ((documentCount.rows[0] as any).count > 0) {
        return res.status(400).json({ message: "Cannot delete folder with documents" });
      }
      
      // Delete all documents in this category (including placeholders)
      await db.execute(sql`
        DELETE FROM user_documents 
        WHERE user_id = ${req.user.id} AND category = ${folderName}
      `);
      
      res.status(200).json({ message: "Folder deleted successfully" });
    } catch (error: any) {
      res.status(500).json({ message: "Error deleting folder", error: error.message });
    }
  });

  // User Document Repository API
  app.get("/api/user-documents", async (req: Request, res: Response) => {
    if (!req.isAuthenticated()) {
      return res.status(401).json({ message: "Unauthorized" });
    }
    
    try {
      const userDocuments = await storage.getUserDocuments(req.user.id);
      
      // Add signed URLs for direct access to documents
      const documentsWithUrls = userDocuments.map(doc => ({
        ...doc,
        // Create a direct download URL for each document
        fileUrl: `/api/user-documents/${doc.id}/download`
      }));
      
      res.json(documentsWithUrls);
    } catch (error: any) {
      res.status(500).json({ message: "Error retrieving user documents", error: error.message });
    }
  });
  
  // Add document download endpoint
  app.get("/api/user-documents/:id/download", async (req: Request, res: Response) => {
    if (!req.isAuthenticated()) {
      return res.status(401).json({ message: "Unauthorized" });
    }
    
    try {
      const documentId = parseInt(req.params.id);
      
      // Get document metadata
      const document = await storage.getUserDocument(documentId);
      
      if (!document) {
        return res.status(404).json({ message: "Document not found" });
      }
      
      // Ensure user can only access their own files
      if (document.userId !== req.user.id) {
        return res.status(403).json({ message: "Forbidden" });
      }
      
      // Use appropriate storage client based on environment
      let storageClient: any;
      
      if (isReplitEnvironment) {
        // Use real ObjectStorageClient in Replit environment
        storageClient = new ObjectStorageClient({
          bucketId: 'replit-objstore-98b6b970-0937-4dd6-9dc9-d33d8ec62826'
        });
      } else {
        // Use the same mock client as document attachments for consistency
        storageClient = objectClient;
      }
      
      // Check if file exists in storage (EXACTLY like the working document files endpoint)
      const existsResult = await storageClient.exists(document.fileUrl);
      if (!existsResult.ok) {
        return res.status(500).json({ message: "Error checking file", error: existsResult.error });
      }
      if (!existsResult.value) {
        return res.status(404).json({ message: "File not found" });
      }
      
      // Create the download stream (EXACTLY like the working endpoint)
      const stream = storageClient.downloadAsStream(document.fileUrl);
      const contentType = mime.lookup(document.fileName) as string || document.fileType || 'application/octet-stream';
      
      // Set headers and pipe (EXACTLY like the working endpoint)
      res.setHeader('Content-Type', contentType);
      res.setHeader('Content-Disposition', `attachment; filename="${document.fileName}"`);
      
      // Pipe the stream directly to response (just like the working endpoint)
      stream.pipe(res);
      
    } catch (error) {
      console.error("Error processing download request:", error);
      if (!res.headersSent) {
        res.status(500).json({ 
          message: "Error processing request", 
          error: error instanceof Error ? error.message : String(error)
        });
      }
    }
  });
  
  app.post("/api/user-documents/upload", async (req: Request & { files?: any, user?: any }, res: Response) => {
    try {
      // Debug logging
      console.log("Upload request received");
      console.log("Request body:", req.body);
      console.log("Files:", req.files);
      console.log("User:", req.user);

      if (!req.isAuthenticated()) {
        return res.status(401).json({ message: "Unauthorized" });
      }
      
      // More detailed file validation
      if (!req.files) {
        console.error("No files object in request");
        return res.status(400).json({ message: "No files were uploaded" });
      }
      
      if (!req.files.file) {
        console.error("No file with key 'file' in request.files");
        return res.status(400).json({ message: "No file found with key 'file'" });
      }
      
      const file = req.files.file;
      
      // Handle both array and single file
      const uploadedFile = Array.isArray(file) ? file[0] : file;
      
      // More validation
      if (!uploadedFile.name || !uploadedFile.mimetype || !uploadedFile.size) {
        console.error("Invalid file object:", uploadedFile);
        return res.status(400).json({ message: "Invalid file object" });
      }
      
      // Parse metadata with better error handling
      let metadata: {
        title?: string;
        description?: string | null;
        tags?: string[];
        folderId?: string;
      } = {};
      
      if (req.body.metadata) {
        try {
          metadata = JSON.parse(req.body.metadata);
        } catch (error) {
          console.error("Error parsing metadata:", error);
          console.log("Raw metadata received:", req.body.metadata);
          // Continue with empty metadata instead of failing
        }
      }
      
      console.log("Processing file:", uploadedFile.name);
      console.log("File type:", uploadedFile.mimetype);
      console.log("File size:", uploadedFile.size);
      
      // For storage in Replit Object Storage
      const timestamp = Date.now();
      const sanitizedFileName = uploadedFile.name.replace(/[^a-zA-Z0-9.-]/g, '_');
      const objectName = `${req.user.id}/${timestamp}-${sanitizedFileName}`;
      
      try {
        // Use appropriate storage client based on environment
        let objectStorage: any;
        
        if (isReplitEnvironment) {
          console.log("Using real Object Storage client with bucket ID: replit-objstore-98b6b970-0937-4dd6-9dc9-d33d8ec62826");
          objectStorage = new ObjectStorageClient({
            bucketId: 'replit-objstore-98b6b970-0937-4dd6-9dc9-d33d8ec62826'
          });
        } else {
          console.log("Using development mock storage for file upload");
          objectStorage = objectClient;
        }
        
        console.log("Attempting to upload file:", objectName);
        // Upload file to Object Storage
        const uploadResult = await objectStorage.uploadFromBytes(
          objectName, 
          uploadedFile.data
        );
        
        if (!uploadResult.ok) {
          console.error("Error uploading to storage:", uploadResult.error);
          console.error("Error details:", JSON.stringify(uploadResult, null, 2));
          return res.status(500).json({ 
            message: "Error uploading file to storage", 
            error: uploadResult.error,
            details: uploadResult
          });
        }
        
        // Extract category from folder ID if provided
        let category = 'General'; // Default category
        if (metadata.folderId) {
          // Extract folder name from ID format: folder-{userId}-{folderName}
          const folderNamePart = metadata.folderId.replace(/^folder-\d+-/, '');
          category = folderNamePart.replace(/-/g, ' ');
        }

        // Create a new document record
        const newDocument = await storage.createUserDocument({
          userId: req.user.id,
          title: metadata.title || uploadedFile.name,
          description: metadata.description || null,
          fileName: uploadedFile.name,
          fileType: uploadedFile.mimetype,
          fileSize: uploadedFile.size,
          fileUrl: objectName, // Store the object path in storage bucket
          tags: Array.isArray(metadata.tags) ? metadata.tags : [],
          category: category,
        });
        
        console.log("Document created successfully:", newDocument);
        res.status(201).json(newDocument);
      } catch (error: any) {
        console.error("Object storage error:", error);
        console.error("Error details:", JSON.stringify(error, null, 2));
        res.status(500).json({ 
          message: "Error uploading document", 
          error: error.message,
          details: error.code || error.name || "unknown_error",
          stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
        });
      }
    } catch (error: any) {
      console.error("Upload error:", error);
      res.status(500).json({ 
        message: "Error uploading document", 
        error: error.message,
        stack: process.env.NODE_ENV === 'development' ? error.stack : undefined
      });
    }
  });
  
  app.patch("/api/user-documents/:id", async (req: Request, res: Response) => {
    if (!req.isAuthenticated()) {
      return res.status(401).json({ message: "Unauthorized" });
    }
    
    try {
      const documentId = parseInt(req.params.id);
      
      // Check if document exists and belongs to user
      const document = await storage.getUserDocument(documentId);
      
      if (!document) {
        return res.status(404).json({ message: "Document not found" });
      }
      
      if (document.userId !== req.user.id) {
        return res.status(403).json({ message: "Forbidden" });
      }
      
      // Update the document
      const updatedDocument = await storage.updateUserDocument(documentId, req.body);
      
      res.status(200).json(updatedDocument);
    } catch (error: any) {
      res.status(500).json({ message: "Error updating document", error: error.message });
    }
  });

  app.delete("/api/user-documents/:id", async (req: Request, res: Response) => {
    if (!req.isAuthenticated()) {
      return res.status(401).json({ message: "Unauthorized" });
    }
    
    try {
      const documentId = parseInt(req.params.id);
      
      // Check if document exists and belongs to user
      const document = await storage.getUserDocument(documentId);
      
      if (!document) {
        return res.status(404).json({ message: "Document not found" });
      }
      
      if (document.userId !== req.user.id) {
        return res.status(403).json({ message: "Forbidden" });
      }
      
      // Delete from object storage if it exists
      if (document.fileUrl) {
        try {
          let objectStorage: any;
          
          if (isReplitEnvironment) {
            objectStorage = new ObjectStorageClient({
              bucketId: 'replit-objstore-98b6b970-0937-4dd6-9dc9-d33d8ec62826'
            });
          } else {
            objectStorage = objectClient;
          }
          
          // Delete the file from storage
          await objectStorage.delete(document.fileUrl);
        } catch (storageError) {
          console.error("Error deleting file from storage:", storageError);
          // Continue with deletion even if storage deletion fails
        }
      }
      
      // Delete the document
      await storage.deleteUserDocument(documentId);
      
      res.status(200).json({ message: "Document deleted successfully" });
    } catch (error: any) {
      res.status(500).json({ message: "Error deleting document", error: error.message });
    }
  });

  // Duplicate user document
  app.post("/api/user-documents/:id/duplicate", async (req: Request, res: Response) => {
    if (!req.isAuthenticated()) {
      return res.status(401).json({ message: "Unauthorized" });
    }
    
    try {
      const originalDocumentId = parseInt(req.params.id);
      
      // Check if document exists and belongs to user
      const originalDocument = await storage.getUserDocument(originalDocumentId);
      
      if (!originalDocument) {
        return res.status(404).json({ message: "Document not found" });
      }
      
      if (originalDocument.userId !== req.user.id) {
        return res.status(403).json({ message: "Forbidden" });
      }
      
      // Create duplicate with new title and reset status to draft
      const duplicateData = {
        userId: req.user.id,
        title: `${originalDocument.title} (Copy)`,
        description: originalDocument.description,
        fileName: `copy_${originalDocument.fileName}`,
        fileType: originalDocument.fileType,
        fileSize: originalDocument.fileSize,
        fileUrl: originalDocument.fileUrl, // Keep the same file URL since it's the same content
        tags: originalDocument.tags,
        category: originalDocument.category,
        starred: false, // Reset starred status
        status: "draft" as const // Reset to draft
      };
      
      const duplicateDocument = await storage.createUserDocument(duplicateData);
      
      res.json(duplicateDocument);
    } catch (error: any) {
      res.status(500).json({ message: "Error duplicating document", error: error.message });
    }
  });

  // Document Files API
  app.post("/api/documents/:id/files", upload.single('file'), async (req: any, res: Response) => {
    if (!req.isAuthenticated()) {
      return res.status(401).json({ message: "Unauthorized" });
    }
    const documentId = parseInt(req.params.id);
    const file = req.file;
    if (!file) {
      return res.status(400).json({ message: "No file uploaded" });
    }
    const objectName = `documents/${documentId}/${Date.now()}-${file.originalname}`;
    try {
      const uploadResult = await objectClient.uploadFromBytes(objectName, file.buffer);
      if (!uploadResult.ok) {
        return res.status(500).json({ message: "Error uploading file", error: uploadResult.error });
      }
      await storage.createAuditRecord({
        documentId,
        userId: req.user.id,
        action: "FILE_UPLOADED",
        details: `Uploaded file ${file.originalname}`,
        ipAddress: req.ip
      });
      res.status(201).json({ name: file.originalname, key: objectName });
    } catch (err: any) {
      res.status(500).json({ message: "Error uploading file", error: err.message });
    }
  });

  app.get("/api/documents/:id/files", async (req: Request, res: Response) => {
    if (!req.isAuthenticated()) {
      return res.status(401).json({ message: "Unauthorized" });
    }
    const documentId = parseInt(req.params.id);
    try {
      const listResult = await objectClient.list({ prefix: `documents/${documentId}/` });
      if (!listResult.ok) {
        return res.status(500).json({ message: "Error listing files", error: listResult.error });
      }
      const files = listResult.value.map((f: any) => ({ name: f.name.split('/').slice(2).join('/'), key: f.name }));
      res.json(files);
    } catch (err: any) {
      res.status(500).json({ message: "Error listing files", error: err.message });
    }
  });

  app.get("/api/documents/:id/files/:fileName", async (req: Request, res: Response) => {
    if (!req.isAuthenticated()) {
      return res.status(401).json({ message: "Unauthorized" });
    }
    const documentId = parseInt(req.params.id);
    const fileName = req.params.fileName;
    const objectKey = `documents/${documentId}/${fileName}`;
    try {
      const existsResult = await objectClient.exists(objectKey);
      if (!existsResult.ok) {
        return res.status(500).json({ message: "Error checking file", error: existsResult.error });
      }
      if (!existsResult.value) {
        return res.status(404).json({ message: "File not found" });
      }
      const stream = objectClient.downloadAsStream(objectKey);
      const contentType = mime.lookup(fileName) as string || 'application/octet-stream';
      res.setHeader('Content-Type', contentType);
      res.setHeader('Content-Disposition', `attachment; filename="${fileName}"`);
      stream.pipe(res);
    } catch (err: any) {
      res.status(500).json({ message: "Error downloading file", error: err.message });
    }
  });

  app.delete("/api/documents/:id/files/:fileName", async (req: Request, res: Response) => {
    if (!req.isAuthenticated()) {
      return res.status(401).json({ message: "Unauthorized" });
    }
    const documentId = parseInt(req.params.id);
    const fileName = req.params.fileName;
    const objectKey = `documents/${documentId}/${fileName}`;
    try {
      const deleteResult = await objectClient.delete(objectKey);
      if (!deleteResult.ok) {
        return res.status(500).json({ message: "Error deleting file", error: deleteResult.error });
      }
      await storage.createAuditRecord({
        documentId,
        userId: req.user.id,
        action: "FILE_DELETED",
        details: `Deleted file ${fileName}`,
        ipAddress: req.ip
      });
      res.sendStatus(204);
    } catch (err: any) {
      res.status(500).json({ message: "Error deleting file", error: err.message });
    }
  });

  // Add this endpoint after your existing document file endpoints
  app.get("/api/documents/files", async (req: Request, res: Response) => {
    if (!req.isAuthenticated()) {
      return res.status(401).json({ message: "Unauthorized" });
    }
    
    try {
      const listResult = await objectClient.list({ prefix: 'documents/' });
      if (!listResult.ok) {
        return res.status(500).json({ message: "Error listing files", error: listResult.error });
      }
      
      // Transform the results to include document IDs
      const files = listResult.value.map((file: any) => {
        const parts = file.name.split('/');
        if (parts.length >= 2) {
          return {
            name: parts.slice(2).join('/'),
            key: file.name,
            documentId: parseInt(parts[1], 10)
          };
        }
        return null;
      }).filter(Boolean);
      
      res.json(files);
    } catch (err: any) {
      res.status(500).json({ message: "Error listing all files", error: err.message });
    }
  });

  const httpServer = createServer(app);
  return httpServer;
}

================
File: server/run-migrations.ts
================
import { runMigration as addUserDocumentsTable } from "./migrations/add-user-documents-table.js";

async function runAllMigrations() {
  console.log("Starting database migrations...");
  
  try {
    // Add new migrations here in sequence
    await addUserDocumentsTable();
    
    console.log("All migrations completed successfully");
  } catch (error) {
    console.error("Migration failed:", error);
    process.exit(1);
  }
}

// Run all migrations when this script is executed directly
if (require.main === module) {
  runAllMigrations()
    .then(() => process.exit(0))
    .catch((err) => {
      console.error("Error running migrations:", err);
      process.exit(1);
    });
}

================
File: server/storage.ts
================
import { users, documents, documentVersions, signatures, auditTrail, complianceDeadlines, templates, userDocuments } from "../shared/schema.js";
import type { 
  User, InsertUser, Document, InsertDocument, DocumentVersion, InsertDocumentVersion,
  Signature, InsertSignature, AuditTrail, InsertAuditTrail, 
  ComplianceDeadline, InsertComplianceDeadline, Template, InsertTemplate,
  UserDocument, InsertUserDocument
} from "../shared/schema.js";
import session from "express-session";
import { eq, gt, desc, asc, and, sql } from "drizzle-orm";
import { db } from "./db.js";
import connectPg from "connect-pg-simple";
import { pool } from "./db.js";

const PostgresSessionStore = connectPg(session);

export interface IStorage {
  // Users
  getUser(id: number): Promise<User | undefined>;
  getUserByUsername(username: string): Promise<User | undefined>;
  getUserByEmail(email: string): Promise<User | undefined>;
  createUser(user: InsertUser): Promise<User>;
  listUsers(): Promise<User[]>;
  updateUser(id: number, data: Partial<InsertUser>): Promise<User | undefined>;
  
  // Documents
  createDocument(document: InsertDocument): Promise<Document>;
  getDocument(id: number): Promise<Document | undefined>;
  listDocuments(options?: {
    createdById?: number;
    status?: string;
    limit?: number;
    offset?: number;
  }): Promise<Document[]>;
  updateDocument(id: number, data: Partial<InsertDocument>): Promise<Document | undefined>;
  
  // Document versions
  createDocumentVersion(version: InsertDocumentVersion): Promise<DocumentVersion>;
  getDocumentVersions(documentId: number): Promise<DocumentVersion[]>;
  
  // Signatures
  createSignature(signature: InsertSignature): Promise<Signature>;
  getDocumentSignatures(documentId: number): Promise<Signature[]>;
  
  // Audit trail
  createAuditRecord(record: InsertAuditTrail): Promise<AuditTrail>;
  getDocumentAuditTrail(documentId: number): Promise<AuditTrail[]>;
  
  // Compliance deadlines
  createComplianceDeadline(deadline: InsertComplianceDeadline): Promise<ComplianceDeadline>;
  listComplianceDeadlines(options?: {
    assigneeId?: number;
    status?: string;
    upcoming?: boolean;
    limit?: number;
    offset?: number;
  }): Promise<ComplianceDeadline[]>;
  updateComplianceDeadline(id: number, data: Partial<InsertComplianceDeadline>): Promise<ComplianceDeadline | undefined>;
  getComplianceDeadline(id: number): Promise<ComplianceDeadline | undefined>;
  
  // Templates
  createTemplate(template: InsertTemplate): Promise<Template>;
  getTemplate(id: number): Promise<Template | undefined>;
  listTemplates(): Promise<Template[]>;
  
  // User Documents Repository
  getUserDocuments(userId: number): Promise<UserDocument[]>;
  getUserDocument(id: number): Promise<UserDocument | undefined>;
  createUserDocument(document: InsertUserDocument): Promise<UserDocument>;
  updateUserDocument(id: number, data: Partial<InsertUserDocument>): Promise<UserDocument | undefined>;
  deleteUserDocument(id: number): Promise<void>;
  
  // Session store
  sessionStore: session.Store;
}

export class DatabaseStorage implements IStorage {
  sessionStore: session.Store;
  
  constructor() {
    this.sessionStore = new PostgresSessionStore({ 
      pool, 
      createTableIfMissing: true 
    });
    
    // Initialize default templates
    this.initDefaultTemplates();
  }
  
  private async initDefaultTemplates() {
    // Check if there are any templates
    const existingTemplates = await db.select({ count: sql`count(*)` }).from(templates);
    if (parseInt(existingTemplates[0].count as string) > 0) {
      return; // Already have templates
    }
    
    // Create admin user if it doesn't exist
    let adminId = 1;
    const adminUser = await this.getUserByUsername("admin@compliance.ai");
    if (!adminUser) {
      const admin = await this.createUser({
        username: "admin@compliance.ai",
        password: "$2b$10$zreNJHPZ4WEGkSVFX/l98eThME7E6gZl/lQPLiCnQnCY3s.x3EvFi", // hashed "admin123"
        name: "System Admin",
        email: "admin@compliance.ai",
        role: "admin"
      });
      adminId = admin.id;
    }
    
    // Add default templates
    await this.createTemplate({
      name: "GDPR Compliance",
      content: "# GDPR Compliance Statement\n\nThis document outlines how [Company Name] complies with GDPR regulations...",
      category: "Privacy",
      createdById: adminId,
      isDefault: true
    });

    await this.createTemplate({
      name: "ISO 27001",
      content: "# ISO 27001 Information Security Policy\n\n[Company Name] is committed to information security...",
      category: "Security",
      createdById: adminId,
      isDefault: true
    });

    await this.createTemplate({
      name: "PCI DSS",
      content: "# PCI DSS Compliance Statement\n\n[Company Name] adheres to the Payment Card Industry Data Security Standard...",
      category: "Financial",
      createdById: adminId,
      isDefault: true
    });

    await this.createTemplate({
      name: "SOC 2",
      content: "# SOC 2 Compliance Statement\n\n[Company Name] follows the Trust Services Criteria...",
      category: "Security",
      createdById: adminId,
      isDefault: true
    });
  }
  
  // User management
  async getUser(id: number): Promise<User | undefined> {
    const [user] = await db.select().from(users).where(eq(users.id, id));
    return user;
  }
  
  async getUserByUsername(username: string): Promise<User | undefined> {
    const [user] = await db.select().from(users).where(eq(users.username, username));
    return user;
  }
  
  async getUserByEmail(email: string): Promise<User | undefined> {
    const [user] = await db.select().from(users).where(eq(users.email, email));
    return user;
  }
  
  async createUser(user: InsertUser): Promise<User> {
    const [newUser] = await db.insert(users).values(user).returning();
    return newUser;
  }
  
  async listUsers(): Promise<User[]> {
    return await db.select().from(users);
  }
  
  async updateUser(id: number, data: Partial<InsertUser>): Promise<User | undefined> {
    const [updatedUser] = await db
      .update(users)
      .set(data)
      .where(eq(users.id, id))
      .returning();
    return updatedUser;
  }
  
  // Document management
  async createDocument(document: InsertDocument): Promise<Document> {
    // Insert document
    const [newDocument] = await db
      .insert(documents)
      .values(document as any)
      .returning();
    
    // Create initial version
    await this.createDocumentVersion({
      documentId: newDocument.id,
      version: 1,
      content: document.content,
      createdById: document.createdById || 0
    });
    
    return newDocument;
  }
  
  async getDocument(id: number): Promise<Document | undefined> {
    const [document] = await db
      .select()
      .from(documents)
      .where(eq(documents.id, id));
    return document;
  }
  
  async listDocuments(options: {
    createdById?: number;
    status?: string;
    limit?: number;
    offset?: number;
  } = {}): Promise<Document[]> {
    const baseQuery = db.select().from(documents);
    type QueryType = typeof baseQuery;
    
    let query = baseQuery;
    
    // Apply filters
    const filters = [];
    if (options.createdById !== undefined) {
      filters.push(eq(documents.createdById, options.createdById));
    }
    
    if (options.status !== undefined) {
      filters.push(eq(documents.status, options.status as "draft" | "pending_approval" | "active" | "expired" | "archived"));
    }
    
    if (filters.length > 0) {
      query = query.where(and(...filters)) as QueryType;
    }
    
    // Apply sorting
    query = query.orderBy(desc(documents.updatedAt)) as QueryType;
    
    // Apply pagination
    if (options.limit !== undefined) {
      query = query.limit(options.limit) as QueryType;
    }
    
    if (options.offset !== undefined) {
      query = query.offset(options.offset) as QueryType;
    }
    
    return await query;
  }
  
  async updateDocument(id: number, data: Partial<InsertDocument>): Promise<Document | undefined> {
    // Get the current document
    const document = await this.getDocument(id);
    if (!document) return undefined;
    
    // If content is changing, create a new version
    if (data.content && data.content !== document.content) {
      const newVersion = document.version + 1;
      
      // Create a version record for the new content
      await this.createDocumentVersion({
        documentId: id,
        version: newVersion,
        content: data.content,
        createdById: data.createdById || document.createdById
      });
      
      data.version = newVersion;
    }
    
    // Update the document with a new updatedAt timestamp
    const [updatedDocument] = await db
      .update(documents)
      .set({
        ...data,
        updatedAt: new Date()
      })
      .where(eq(documents.id, id))
      .returning();
      
    return updatedDocument;
  }
  
  // Document versions
  async createDocumentVersion(version: InsertDocumentVersion): Promise<DocumentVersion> {
    const [newVersion] = await db
      .insert(documentVersions)
      .values(version)
      .returning();
    return newVersion;
  }
  
  async getDocumentVersions(documentId: number): Promise<DocumentVersion[]> {
    return await db
      .select()
      .from(documentVersions)
      .where(eq(documentVersions.documentId, documentId))
      .orderBy(desc(documentVersions.version));
  }
  
  // Signatures
  async createSignature(signature: InsertSignature): Promise<Signature> {
    const [newSignature] = await db
      .insert(signatures)
      .values(signature)
      .returning();
    return newSignature;
  }
  
  async getDocumentSignatures(documentId: number): Promise<Signature[]> {
    return await db
      .select()
      .from(signatures)
      .where(eq(signatures.documentId, documentId));
  }
  
  // Audit trail
  async createAuditRecord(record: InsertAuditTrail): Promise<AuditTrail> {
    const [newRecord] = await db
      .insert(auditTrail)
      .values(record)
      .returning();
    return newRecord;
  }
  
  async getDocumentAuditTrail(documentId: number): Promise<AuditTrail[]> {
    return await db
      .select()
      .from(auditTrail)
      .where(eq(auditTrail.documentId, documentId))
      .orderBy(desc(auditTrail.timestamp));
  }
  
  // Compliance deadlines
  async createComplianceDeadline(deadline: InsertComplianceDeadline): Promise<ComplianceDeadline> {
    // Ensure assigneeId is a valid number or null before sending to DB
    const sanitizedDeadline = { ...deadline };
    
    if ('assigneeId' in sanitizedDeadline) {
      if (sanitizedDeadline.assigneeId === undefined || 
          (typeof sanitizedDeadline.assigneeId === 'number' && isNaN(sanitizedDeadline.assigneeId))) {
        sanitizedDeadline.assigneeId = null;
      }
    }
    
    // Extra safety for any other ID fields
    Object.keys(sanitizedDeadline).forEach(key => {
      if (key.toLowerCase().includes('id') && key !== 'id' && key !== 'documentId') {
        const value = (sanitizedDeadline as any)[key];
        if (value !== null && typeof value === 'number' && isNaN(value)) {
          (sanitizedDeadline as any)[key] = null;
        }
      }
    });
    
    const [newDeadline] = await db
      .insert(complianceDeadlines)
      .values(sanitizedDeadline)
      .returning();
    return newDeadline;
  }
  
  async listComplianceDeadlines(options: {
    assigneeId?: number;
    status?: string;
    upcoming?: boolean;
    limit?: number;
    offset?: number;
  } = {}): Promise<ComplianceDeadline[]> {
    const baseQuery = db.select().from(complianceDeadlines);
    type QueryType = typeof baseQuery;
    
    let query = baseQuery;
    
    // Apply filters
    const filters = [];
    if (options.assigneeId !== undefined) {
      filters.push(eq(complianceDeadlines.assigneeId, options.assigneeId));
    }
    
    if (options.status !== undefined) {
      filters.push(eq(complianceDeadlines.status, options.status as "not_started" | "in_progress" | "completed" | "overdue"));
    }
    
    if (options.upcoming === true) {
      filters.push(gt(complianceDeadlines.deadline, new Date()));
    }
    
    if (filters.length > 0) {
      query = query.where(and(...filters)) as QueryType;
    }
    
    // Apply sorting by deadline
    query = query.orderBy(asc(complianceDeadlines.deadline)) as QueryType;
    
    // Apply pagination
    if (options.limit !== undefined) {
      query = query.limit(options.limit) as QueryType;
    }
    
    if (options.offset !== undefined) {
      query = query.offset(options.offset) as QueryType;
    }
    
    return await query;
  }
  
  async updateComplianceDeadline(id: number, data: Partial<InsertComplianceDeadline>): Promise<ComplianceDeadline | undefined> {
    // Extra protection for assigneeId and other ID fields
    const sanitizedData = { ...data };
    
    if ('assigneeId' in sanitizedData) {
      if (sanitizedData.assigneeId === undefined || 
          (typeof sanitizedData.assigneeId === 'number' && isNaN(sanitizedData.assigneeId))) {
        sanitizedData.assigneeId = null;
      }
    }
    
    // Extra safety for any other ID fields
    Object.keys(sanitizedData).forEach(key => {
      if (key.toLowerCase().includes('id') && key !== 'id' && key !== 'documentId') {
        const value = (sanitizedData as any)[key];
        if (value !== null && typeof value === 'number' && isNaN(value)) {
          (sanitizedData as any)[key] = null;
        }
      }
    });
    
    const [updatedDeadline] = await db
      .update(complianceDeadlines)
      .set(sanitizedData)
      .where(eq(complianceDeadlines.id, id))
      .returning();
    return updatedDeadline;
  }
  
  async getComplianceDeadline(id: number): Promise<ComplianceDeadline | undefined> {
    const [deadline] = await db
      .select()
      .from(complianceDeadlines)
      .where(eq(complianceDeadlines.id, id));
    return deadline;
  }
  
  // Templates
  async createTemplate(template: InsertTemplate): Promise<Template> {
    const [newTemplate] = await db
      .insert(templates)
      .values({
        ...template,
        updatedAt: new Date()
      })
      .returning();
    return newTemplate;
  }
  
  async getTemplate(id: number): Promise<Template | undefined> {
    const [template] = await db
      .select()
      .from(templates)
      .where(eq(templates.id, id));
    return template;
  }
  
  async listTemplates(): Promise<Template[]> {
    return await db.select().from(templates);
  }

  // User Documents Repository - using database
  async getUserDocuments(userId: number): Promise<UserDocument[]> {
    return await db
      .select()
      .from(userDocuments)
      .where(
        and(
          eq(userDocuments.userId, userId),
          eq(userDocuments.isFolderPlaceholder, false)
        )
      )
      .orderBy(desc(userDocuments.updatedAt));
  }
  
  async getUserDocument(id: number): Promise<UserDocument | undefined> {
    const [document] = await db
      .select()
      .from(userDocuments)
      .where(eq(userDocuments.id, id));
    return document;
  }
  
  async createUserDocument(document: InsertUserDocument): Promise<UserDocument> {
    const [newDocument] = await db
      .insert(userDocuments)
      .values({
        ...document,
        updatedAt: new Date()
      })
      .returning();
    return newDocument;
  }
  
  async updateUserDocument(id: number, data: Partial<InsertUserDocument>): Promise<UserDocument | undefined> {
    const [updatedDocument] = await db
      .update(userDocuments)
      .set({
        ...data,
        updatedAt: new Date()
      })
      .where(eq(userDocuments.id, id))
      .returning();
    return updatedDocument;
  }
  
  async deleteUserDocument(id: number): Promise<void> {
    await db
      .delete(userDocuments)
      .where(eq(userDocuments.id, id));
  }
}

// Export a singleton instance of the storage class
export const storage = new DatabaseStorage();

================
File: server/vite.ts
================
import express, { type Express } from "express";
import fs from "fs";
import path from "path";
import { createServer as createViteServer, createLogger } from "vite";
import { type Server } from "http";
import viteConfig from "../vite.config.js";
import { nanoid } from "nanoid";
import { fileURLToPath } from "url";

const __dirname = path.dirname(fileURLToPath(import.meta.url));
const viteLogger = createLogger();

export function log(message: string, source = "express") {
  const formattedTime = new Date().toLocaleTimeString("en-US", {
    hour: "numeric",
    minute: "2-digit",
    second: "2-digit",
    hour12: true,
  });

  console.log(`${formattedTime} [${source}] ${message}`);
}

export async function setupVite(app: Express, server: Server) {
  const serverOptions = {
    middlewareMode: true,
    hmr: { server },
    allowedHosts: true,
  };

  const vite = await createViteServer({
    ...viteConfig,
    configFile: false,
    customLogger: {
      ...viteLogger,
      error: (msg, options) => {
        viteLogger.error(msg, options);
        process.exit(1);
      },
    },
    server: serverOptions as any,
    appType: "custom",
  });

  app.use(vite.middlewares);
  app.use("*", async (req, res, next) => {
    const url = req.originalUrl;

    try {
      const clientTemplate = path.resolve(
        __dirname,
        "..",
        "client",
        "index.html",
      );

      // always reload the index.html file from disk incase it changes
      let template = await fs.promises.readFile(clientTemplate, "utf-8");
      template = template.replace(
        `src="/src/main.tsx"`,
        `src="/src/main.tsx?v=${nanoid()}"`,
      );
      const page = await vite.transformIndexHtml(url, template);
      res.status(200).set({ "Content-Type": "text/html" }).end(page);
    } catch (e) {
      vite.ssrFixStacktrace(e as Error);
      next(e);
    }
  });
}

export function serveStatic(app: Express) {
  const distPath = path.resolve(__dirname, "..", "public");

  if (!fs.existsSync(distPath)) {
    throw new Error(
      `Could not find the build directory: ${distPath}, make sure to build the client first`,
    );
  }

  app.use(express.static(distPath));

  // fall through to index.html if the file doesn't exist
  app.use("*", (_req, res) => {
    res.sendFile(path.resolve(distPath, "index.html"));
  });
}

================
File: shared/schema.ts
================
import { pgTable, text, serial, integer, boolean, timestamp, jsonb, varchar } from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";

// User schema
export const users = pgTable("users", {
  id: serial("id").primaryKey(),
  username: text("username").notNull().unique(),
  password: text("password").notNull(),
  name: text("name").notNull(),
  email: text("email").notNull().unique(),
  role: text("role", { enum: ["admin", "compliance_officer", "employee"] }).notNull().default("employee"),
  createdAt: timestamp("created_at").defaultNow().notNull(),
});

// Document schema
export const documents = pgTable("documents", {
  id: serial("id").primaryKey(),
  title: text("title").notNull(),
  content: text("content").notNull(),
  status: text("status", { enum: ["draft", "pending_approval", "active", "expired", "archived"] }).notNull().default("draft"),
  templateId: integer("template_id").references(() => templates.id),
  version: integer("version").notNull().default(1),
  createdById: integer("created_by_id").references(() => users.id).notNull(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  updatedAt: timestamp("updated_at").defaultNow().notNull(),
  expiresAt: timestamp("expires_at"),
});

// Document versions schema
export const documentVersions = pgTable("document_versions", {
  id: serial("id").primaryKey(),
  documentId: integer("document_id").references(() => documents.id).notNull(),
  version: integer("version").notNull(),
  content: text("content").notNull(),
  createdById: integer("created_by_id").references(() => users.id).notNull(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
});

// Signatures schema
export const signatures = pgTable("signatures", {
  id: serial("id").primaryKey(),
  documentId: integer("document_id").references(() => documents.id).notNull(),
  userId: integer("user_id").references(() => users.id).notNull(),
  signature: text("signature").notNull(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
  ipAddress: text("ip_address"),
  metadata: jsonb("metadata"),
});

// Audit trail schema
export const auditTrail = pgTable("audit_trail", {
  id: serial("id").primaryKey(),
  documentId: integer("document_id").references(() => documents.id),
  userId: integer("user_id").references(() => users.id).notNull(),
  action: text("action").notNull(),
  details: text("details"),
  timestamp: timestamp("timestamp").defaultNow().notNull(),
  ipAddress: text("ip_address"),
});

// Compliance deadlines schema
export const complianceDeadlines = pgTable("compliance_deadlines", {
  id: serial("id").primaryKey(),
  title: text("title").notNull(),
  description: text("description"),
  deadline: timestamp("deadline").notNull(),
  documentId: integer("document_id").references(() => documents.id),
  assigneeId: integer("assignee_id").references(() => users.id),
  status: text("status", { enum: ["not_started", "in_progress", "completed", "overdue"] }).notNull().default("not_started"),
  type: text("type").notNull(),
  createdAt: timestamp("created_at").defaultNow().notNull(),
});

// Templates schema
export const templates = pgTable("templates", {
  id: serial("id").primaryKey(),
  name: varchar("name", { length: 255 }).notNull(),
  content: text("content").notNull(),
  category: varchar("category", { length: 100 }),
  createdById: integer("created_by_id").notNull().references(() => users.id),
  createdAt: timestamp("created_at", { withTimezone: true }).defaultNow().notNull(),
  updatedAt: timestamp("updated_at", { withTimezone: true }).defaultNow().notNull(),
  isDefault: boolean("is_default").default(false),
});

// User documents table
export const userDocuments = pgTable("user_documents", {
  id: serial("id").primaryKey(),
  userId: integer("user_id").notNull().references(() => users.id, { onDelete: "cascade" }),
  title: varchar("title", { length: 255 }).notNull(),
  description: text("description"),
  fileName: varchar("file_name", { length: 255 }).notNull(),
  fileType: varchar("file_type", { length: 100 }).notNull(),
  fileSize: integer("file_size").notNull(),
  fileUrl: text("file_url").notNull(),
  tags: text("tags").array(),
  category: varchar("category", { length: 100 }).default("General"),
  starred: boolean("starred").default(false),
  status: text("status", { enum: ["draft", "review", "approved", "archived"] }).default("draft"),
  isFolderPlaceholder: boolean("is_folder_placeholder").default(false),
  createdAt: timestamp("created_at", { withTimezone: true }).defaultNow().notNull(),
  updatedAt: timestamp("updated_at", { withTimezone: true }).defaultNow().notNull(),
});

// Insert schemas
export const insertUserSchema = createInsertSchema(users).omit({ id: true, createdAt: true });
export const insertDocumentSchema = createInsertSchema(documents)
  .partial({ createdById: true })
  .omit({ id: true, createdAt: true, updatedAt: true });
export const insertDocumentVersionSchema = createInsertSchema(documentVersions).omit({ id: true, createdAt: true });
export const insertSignatureSchema = createInsertSchema(signatures).omit({ id: true, createdAt: true });
export const insertAuditTrailSchema = createInsertSchema(auditTrail).omit({ id: true, timestamp: true });
export const insertComplianceDeadlineSchema = createInsertSchema(complianceDeadlines).omit({ id: true, createdAt: true });
export const insertTemplateSchema = createInsertSchema(templates).omit({ id: true, createdAt: true, updatedAt: true });

// Type definitions
export type User = typeof users.$inferSelect;
export type InsertUser = z.infer<typeof insertUserSchema>;

export type Document = typeof documents.$inferSelect;
export type InsertDocument = z.infer<typeof insertDocumentSchema>;

export type DocumentVersion = typeof documentVersions.$inferSelect;
export type InsertDocumentVersion = z.infer<typeof insertDocumentVersionSchema>;

export type Signature = typeof signatures.$inferSelect;
export type InsertSignature = z.infer<typeof insertSignatureSchema>;

export type AuditTrail = typeof auditTrail.$inferSelect;
export type InsertAuditTrail = z.infer<typeof insertAuditTrailSchema>;

export type ComplianceDeadline = typeof complianceDeadlines.$inferSelect;
export type InsertComplianceDeadline = z.infer<typeof insertComplianceDeadlineSchema>;

export type Template = typeof templates.$inferSelect;
export type InsertTemplate = z.infer<typeof insertTemplateSchema>;

export type UserDocument = typeof userDocuments.$inferSelect;
export type InsertUserDocument = typeof userDocuments.$inferInsert;

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";

export default {
  darkMode: ["class"],
  content: ["./client/index.html", "./client/src/**/*.{js,jsx,ts,tsx}"],
  theme: {
    extend: {
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      colors: {
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        chart: {
          "1": "hsl(var(--chart-1))",
          "2": "hsl(var(--chart-2))",
          "3": "hsl(var(--chart-3))",
          "4": "hsl(var(--chart-4))",
          "5": "hsl(var(--chart-5))",
        },
        sidebar: {
          DEFAULT: "hsl(var(--sidebar-background))",
          foreground: "hsl(var(--sidebar-foreground))",
          primary: "hsl(var(--sidebar-primary))",
          "primary-foreground": "hsl(var(--sidebar-primary-foreground))",
          accent: "hsl(var(--sidebar-accent))",
          "accent-foreground": "hsl(var(--sidebar-accent-foreground))",
          border: "hsl(var(--sidebar-border))",
          ring: "hsl(var(--sidebar-ring))",
        },
      },
      keyframes: {
        "accordion-down": {
          from: {
            height: "0",
          },
          to: {
            height: "var(--radix-accordion-content-height)",
          },
        },
        "accordion-up": {
          from: {
            height: "var(--radix-accordion-content-height)",
          },
          to: {
            height: "0",
          },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate"), require("@tailwindcss/typography")],
} satisfies Config;

================
File: theme.json
================
{
  "variant": "professional",
  "primary": "hsl(222.2 47.4% 11.2%)",
  "appearance": "light",
  "radius": 0.5
}

================
File: tsconfig.json
================
{
  "include": ["client/src/**/*", "shared/**/*", "server/**/*"],
  "exclude": ["node_modules", "build", "dist", "**/*.test.ts"],
  "compilerOptions": {
    "incremental": true,
    "tsBuildInfoFile": "./node_modules/typescript/tsbuildinfo",
    "noEmit": true,
    "module": "ESNext",
    "strict": true,
    "lib": ["esnext", "dom", "dom.iterable"],
    "jsx": "preserve",
    "esModuleInterop": true,
    "skipLibCheck": true,
    "allowImportingTsExtensions": true,
    "moduleResolution": "bundler",
    "baseUrl": ".",
    "types": ["node", "vite/client", "multer", "mime-types"],
    "paths": {
      "@/*": ["./client/src/*"],
      "@shared/*": ["./shared/*"]
    }
  }
}

================
File: tsconfig.server.json
================
{
  "extends": "./tsconfig.json",
  "compilerOptions": {
    "module": "ESNext",
    "moduleResolution": "node",
    "target": "ES2022",
    "lib": ["ES2022"],
    "outDir": "dist",
    "noEmit": false,
    "allowImportingTsExtensions": false,
    "esModuleInterop": true,
    "incremental": false
  },
  "include": ["server/**/*", "shared/**/*", "vite.config.ts"],
  "exclude": ["node_modules", "client"]
}

================
File: verify-build.js
================
// Verification script to debug build issues
import fs from 'fs';
import path from 'path';

console.log('Verifying build files...');

// Check if dist directory exists
if (!fs.existsSync('dist')) {
  console.error('Error: dist directory does not exist!');
  process.exit(1);
}

// Check if server directory exists
if (!fs.existsSync('dist/server')) {
  console.error('Error: dist/server directory does not exist!');
  process.exit(1);
}

// Check if index.js exists
if (!fs.existsSync('dist/server/index.js')) {
  console.error('Error: dist/server/index.js file does not exist!');
  
  // Show what is in the dist directory
  console.log('Contents of dist directory:');
  console.log(fs.readdirSync('dist'));
  
  if (fs.existsSync('dist/server')) {
    console.log('Contents of dist/server directory:');
    console.log(fs.readdirSync('dist/server'));
  }
  
  process.exit(1);
}

console.log('index.js content:');
console.log(fs.readFileSync('dist/server/index.js', 'utf8').slice(0, 500) + '...');

console.log('Build verification completed successfully!');

================
File: vite.config.ts
================
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import themePlugin from "@replit/vite-plugin-shadcn-theme-json";
import path from "path";
import runtimeErrorOverlay from "@replit/vite-plugin-runtime-error-modal";
import { fileURLToPath } from "url";

const __dirname = path.dirname(fileURLToPath(import.meta.url));

export default defineConfig({
  plugins: [
    react(),
    runtimeErrorOverlay(),
    themePlugin(),
    ...(process.env.NODE_ENV !== "production" &&
    process.env.REPL_ID !== undefined
      ? [
          // Cartographer plugin disabled for production builds
          // await import("@replit/vite-plugin-cartographer").then((m) =>
          //   m.cartographer(),
          // ),
        ]
      : []),
  ],
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "client", "src"),
      "@shared": path.resolve(__dirname, "shared"),
      "@assets": path.resolve(__dirname, "attached_assets"),
    },
  },
  root: path.resolve(__dirname, "client"),
  build: {
    outDir: path.resolve(__dirname, "dist/public"),
    emptyOutDir: true,
  },
});
